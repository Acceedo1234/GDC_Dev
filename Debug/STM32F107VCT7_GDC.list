
STM32F107VCT7_GDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005198  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b4  080055b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055bc  080055bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  080055d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080055d0  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011377  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ff  00000000  00000000  000313ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00033ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00034a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f34f  00000000  00000000  00035950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a8e  00000000  00000000  00054c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9596  00000000  00000000  0006772d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120cc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  00120d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005364 	.word	0x08005364

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08005364 	.word	0x08005364

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <TimerApplicationInit>:
uint8_t Flag500ms;

extern uint16_t Production;

void TimerApplicationInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <TimerApplicationInit+0x14>)
 8000532:	f003 fd13 	bl	8003f5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <TimerApplicationInit+0x18>)
 8000538:	f003 fd10 	bl	8003f5c <HAL_TIM_Base_Start_IT>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000013c 	.word	0x2000013c
 8000544:	20000184 	.word	0x20000184

08000548 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a2d      	ldr	r2, [pc, #180]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d11f      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(++Count5ms >= 5)
 8000558:	4b2c      	ldr	r3, [pc, #176]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d905      	bls.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			Flag5msTM2 = 1;
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
			Count5ms=0;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
		}
		if(++Count20ms >= 20){
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b13      	cmp	r3, #19
 800058a:	d905      	bls.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x50>
			Flag200ms=1;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
			Count20ms=0;
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim == &htim3)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a20      	ldr	r2, [pc, #128]	; (800061c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d12f      	bne.n	8000600 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		if(++Count1Sec >= 10)
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b09      	cmp	r3, #9
 80005b2:	d913      	bls.n	80005dc <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			//HAL_GPIO_TogglePin(GPIOD,Relay_1_Pin);
			Count1Sec=0;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
			Flag1Sec = 1;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
			if(++Production > 1000){Production=0;}
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d4:	d902      	bls.n	80005dc <HAL_TIM_PeriodElapsedCallback+0x94>
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	801a      	strh	r2, [r3, #0]
		}
		if(++Count500ms >= 4)
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d905      	bls.n	80005fc <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			Count500ms=0;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
			Flag500ms = 1;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
		}
		InputOutputTest1();
 80005fc:	f000 f82e 	bl	800065c <InputOutputTest1>
	}
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000013c 	.word	0x2000013c
 800060c:	20000028 	.word	0x20000028
 8000610:	2000002f 	.word	0x2000002f
 8000614:	2000002b 	.word	0x2000002b
 8000618:	2000002e 	.word	0x2000002e
 800061c:	20000184 	.word	0x20000184
 8000620:	20000029 	.word	0x20000029
 8000624:	2000002d 	.word	0x2000002d
 8000628:	20000086 	.word	0x20000086
 800062c:	2000002c 	.word	0x2000002c
 8000630:	20000030 	.word	0x20000030

08000634 <InputOutputTest>:

void InputOutputTest(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <InputOutputTest+0x20>)
 8000640:	f002 f957 	bl	80028f2 <HAL_GPIO_WritePin>
	                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <InputOutputTest+0x24>)
 800064c:	f002 f951 	bl	80028f2 <HAL_GPIO_WritePin>

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40011400 	.word	0x40011400
 8000658:	40011000 	.word	0x40011000

0800065c <InputOutputTest1>:

void InputOutputTest1(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin (GPIOA, CycleStart_Switch_Pin))
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <InputOutputTest1+0x24>)
 8000664:	f002 f92e 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <InputOutputTest1+0x1a>
	{
		CycleStart_Switch = 1;
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <InputOutputTest1+0x28>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		CycleStart_Switch = 0;
	}
}
 8000674:	e002      	b.n	800067c <InputOutputTest1+0x20>
		CycleStart_Switch = 0;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <InputOutputTest1+0x28>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010800 	.word	0x40010800
 8000684:	2000002a 	.word	0x2000002a

08000688 <HAL_UART_RxCpltCallback>:

uint16_t CuringTime_k1,TIltingup_k1,tinltingdown_k1,sliderin_k1,SLiderout_k1,Ejectionon_k1,Ejectionoff_k1;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if((DWINRxData[1] == 0x03)&&(DWINRxData[2] == 0x14))
 8000690:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	2b03      	cmp	r3, #3
 8000696:	f040 80a2 	bne.w	80007de <HAL_UART_RxCpltCallback+0x156>
 800069a:	4b53      	ldr	r3, [pc, #332]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	2b14      	cmp	r3, #20
 80006a0:	f040 809d 	bne.w	80007de <HAL_UART_RxCpltCallback+0x156>
	{
		CuringTime 		= (DWINRxData[3]<<8 | DWINRxData[4]);
 80006a4:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <HAL_UART_RxCpltCallback+0x164>)
 80006ba:	801a      	strh	r2, [r3, #0]
		TIltingup 		= (DWINRxData[5]<<8 | DWINRxData[6]);
 80006bc:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006c6:	799b      	ldrb	r3, [r3, #6]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <HAL_UART_RxCpltCallback+0x168>)
 80006d2:	801a      	strh	r2, [r3, #0]
		tinltingdown 	= (DWINRxData[7]<<8 | DWINRxData[8]);
 80006d4:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	b21a      	sxth	r2, r3
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006de:	7a1b      	ldrb	r3, [r3, #8]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <HAL_UART_RxCpltCallback+0x16c>)
 80006ea:	801a      	strh	r2, [r3, #0]
		sliderin 		= (DWINRxData[9]<<8 | DWINRxData[10]);
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006ee:	7a5b      	ldrb	r3, [r3, #9]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 80006f6:	7a9b      	ldrb	r3, [r3, #10]
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <HAL_UART_RxCpltCallback+0x170>)
 8000702:	801a      	strh	r2, [r3, #0]
		SLiderout 		= (DWINRxData[11]<<8 | DWINRxData[12]);
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 8000706:	7adb      	ldrb	r3, [r3, #11]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	b21a      	sxth	r2, r3
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 800070e:	7b1b      	ldrb	r3, [r3, #12]
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b38      	ldr	r3, [pc, #224]	; (80007fc <HAL_UART_RxCpltCallback+0x174>)
 800071a:	801a      	strh	r2, [r3, #0]
		Ejectionon 		= (DWINRxData[13]<<8 | DWINRxData[14]);
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 800071e:	7b5b      	ldrb	r3, [r3, #13]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 8000726:	7b9b      	ldrb	r3, [r3, #14]
 8000728:	b21b      	sxth	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b21b      	sxth	r3, r3
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b33      	ldr	r3, [pc, #204]	; (8000800 <HAL_UART_RxCpltCallback+0x178>)
 8000732:	801a      	strh	r2, [r3, #0]
		Ejectionoff 	= (DWINRxData[15]<<8 | DWINRxData[16]);
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 8000736:	7bdb      	ldrb	r3, [r3, #15]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <HAL_UART_RxCpltCallback+0x160>)
 800073e:	7c1b      	ldrb	r3, [r3, #16]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21b      	sxth	r3, r3
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <HAL_UART_RxCpltCallback+0x17c>)
 800074a:	801a      	strh	r2, [r3, #0]
		if(((CuringTime != CuringTime_k1)&&(CuringTime > 0))||((TIltingup != TIltingup_k1)&&(TIltingup>0))
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <HAL_UART_RxCpltCallback+0x164>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <HAL_UART_RxCpltCallback+0x180>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d003      	beq.n	8000760 <HAL_UART_RxCpltCallback+0xd8>
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <HAL_UART_RxCpltCallback+0x164>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d13b      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x150>
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <HAL_UART_RxCpltCallback+0x168>)
 8000762:	881a      	ldrh	r2, [r3, #0]
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <HAL_UART_RxCpltCallback+0x184>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d003      	beq.n	8000774 <HAL_UART_RxCpltCallback+0xec>
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_UART_RxCpltCallback+0x168>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d131      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x150>
		||((tinltingdown != tinltingdown_k1)&&(tinltingdown>0))||((sliderin != sliderin_k1)&&(sliderin>0))
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <HAL_UART_RxCpltCallback+0x16c>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <HAL_UART_RxCpltCallback+0x188>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d003      	beq.n	8000788 <HAL_UART_RxCpltCallback+0x100>
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_UART_RxCpltCallback+0x16c>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d127      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x150>
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_UART_RxCpltCallback+0x170>)
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <HAL_UART_RxCpltCallback+0x18c>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d003      	beq.n	800079c <HAL_UART_RxCpltCallback+0x114>
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_UART_RxCpltCallback+0x170>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d11d      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x150>
		||((SLiderout != SLiderout_k1)&&(SLiderout>0))||((Ejectionon != Ejectionon_k1)&&(Ejectionon>0))
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_UART_RxCpltCallback+0x174>)
 800079e:	881a      	ldrh	r2, [r3, #0]
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_UART_RxCpltCallback+0x190>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d003      	beq.n	80007b0 <HAL_UART_RxCpltCallback+0x128>
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_UART_RxCpltCallback+0x174>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d113      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x150>
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UART_RxCpltCallback+0x178>)
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_UART_RxCpltCallback+0x194>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d003      	beq.n	80007c4 <HAL_UART_RxCpltCallback+0x13c>
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_UART_RxCpltCallback+0x178>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d109      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x150>
		||((Ejectionoff != Ejectionoff_k1)&&(Ejectionoff>0)))
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_UART_RxCpltCallback+0x17c>)
 80007c6:	881a      	ldrh	r2, [r3, #0]
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_UART_RxCpltCallback+0x198>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d006      	beq.n	80007de <HAL_UART_RxCpltCallback+0x156>
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_UART_RxCpltCallback+0x17c>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <HAL_UART_RxCpltCallback+0x156>
		{
			Trigger_Hmi_Data_Save =1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_UART_RxCpltCallback+0x19c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
		}


	}

}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	20000088 	.word	0x20000088
 80007ec:	2000005a 	.word	0x2000005a
 80007f0:	20000056 	.word	0x20000056
 80007f4:	20000058 	.word	0x20000058
 80007f8:	2000005c 	.word	0x2000005c
 80007fc:	2000005e 	.word	0x2000005e
 8000800:	20000060 	.word	0x20000060
 8000804:	20000062 	.word	0x20000062
 8000808:	20000034 	.word	0x20000034
 800080c:	20000036 	.word	0x20000036
 8000810:	20000038 	.word	0x20000038
 8000814:	2000003a 	.word	0x2000003a
 8000818:	2000003c 	.word	0x2000003c
 800081c:	2000003e 	.word	0x2000003e
 8000820:	20000040 	.word	0x20000040
 8000824:	20000032 	.word	0x20000032

08000828 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,DWINRxData,RxNoOfData);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_UART_TxCpltCallback+0x20>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <HAL_UART_TxCpltCallback+0x24>)
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_UART_TxCpltCallback+0x28>)
 800083a:	f003 ffdc 	bl	80047f6 <HAL_UART_Receive_IT>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000c8 	.word	0x200000c8
 800084c:	20000088 	.word	0x20000088
 8000850:	200001cc 	.word	0x200001cc

08000854 <gdc_businesslogic>:
uint16_t SLiderout;
uint16_t Ejectionon;
uint16_t Ejectionoff;

void gdc_businesslogic(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	/*Read the inputs*/
	input.Auto_Manual 			=	HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	4894      	ldr	r0, [pc, #592]	; (8000ab0 <gdc_businesslogic+0x25c>)
 800085e:	f002 f831 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b93      	ldr	r3, [pc, #588]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000868:	701a      	strb	r2, [r3, #0]
	if(input.Auto_Manual == GPIO_PIN_SET){
 800086a:	4b92      	ldr	r3, [pc, #584]	; (8000ab4 <gdc_businesslogic+0x260>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d107      	bne.n	8000882 <gdc_businesslogic+0x2e>
		Inputs_Status = Inputs_Status & ~(1 << 0);
 8000872:	4b91      	ldr	r3, [pc, #580]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b8e      	ldr	r3, [pc, #568]	; (8000ab8 <gdc_businesslogic+0x264>)
 800087e:	801a      	strh	r2, [r3, #0]
 8000880:	e006      	b.n	8000890 <gdc_businesslogic+0x3c>
	}else{
		Inputs_Status = Inputs_Status |(1 <<0);
 8000882:	4b8d      	ldr	r3, [pc, #564]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b8a      	ldr	r3, [pc, #552]	; (8000ab8 <gdc_businesslogic+0x264>)
 800088e:	801a      	strh	r2, [r3, #0]
	}

	input.cycleStart 			=	HAL_GPIO_ReadPin(GPIOE,CycleStart_Switch_Pin);
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	488a      	ldr	r0, [pc, #552]	; (8000abc <gdc_businesslogic+0x268>)
 8000894:	f002 f816 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b85      	ldr	r3, [pc, #532]	; (8000ab4 <gdc_businesslogic+0x260>)
 800089e:	705a      	strb	r2, [r3, #1]
	if(input.cycleStart == GPIO_PIN_SET){
 80008a0:	4b84      	ldr	r3, [pc, #528]	; (8000ab4 <gdc_businesslogic+0x260>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d107      	bne.n	80008b8 <gdc_businesslogic+0x64>
		Inputs_Status = Inputs_Status & ~(1 << 1);
 80008a8:	4b83      	ldr	r3, [pc, #524]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f023 0302 	bic.w	r3, r3, #2
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b81      	ldr	r3, [pc, #516]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008b4:	801a      	strh	r2, [r3, #0]
 80008b6:	e006      	b.n	80008c6 <gdc_businesslogic+0x72>
	}else{
		Inputs_Status = Inputs_Status |(1 <<1);
 80008b8:	4b7f      	ldr	r3, [pc, #508]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b7d      	ldr	r3, [pc, #500]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008c4:	801a      	strh	r2, [r3, #0]
	}
	input.Emergency 			=	HAL_GPIO_ReadPin(GPIOB,Emergency_Switch_Pin);
 80008c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ca:	4879      	ldr	r0, [pc, #484]	; (8000ab0 <gdc_businesslogic+0x25c>)
 80008cc:	f001 fffa 	bl	80028c4 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b77      	ldr	r3, [pc, #476]	; (8000ab4 <gdc_businesslogic+0x260>)
 80008d6:	709a      	strb	r2, [r3, #2]
	if(input.Emergency == GPIO_PIN_SET){
 80008d8:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <gdc_businesslogic+0x260>)
 80008da:	789b      	ldrb	r3, [r3, #2]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d107      	bne.n	80008f0 <gdc_businesslogic+0x9c>
		Inputs_Status = Inputs_Status & ~(1 << 2);
 80008e0:	4b75      	ldr	r3, [pc, #468]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	f023 0304 	bic.w	r3, r3, #4
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b73      	ldr	r3, [pc, #460]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008ec:	801a      	strh	r2, [r3, #0]
 80008ee:	e006      	b.n	80008fe <gdc_businesslogic+0xaa>
	}else{
		Inputs_Status = Inputs_Status |(1 <<2);
 80008f0:	4b71      	ldr	r3, [pc, #452]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <gdc_businesslogic+0x264>)
 80008fc:	801a      	strh	r2, [r3, #0]
	}

	input.Ram_close_switch 		=	HAL_GPIO_ReadPin(GPIOE,RampClose_Switch_Pin);
 80008fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000902:	486e      	ldr	r0, [pc, #440]	; (8000abc <gdc_businesslogic+0x268>)
 8000904:	f001 ffde 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <gdc_businesslogic+0x260>)
 800090e:	70da      	strb	r2, [r3, #3]
	if(input.Ram_close_switch == GPIO_PIN_SET){
 8000910:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000912:	78db      	ldrb	r3, [r3, #3]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d107      	bne.n	8000928 <gdc_businesslogic+0xd4>
		Inputs_Status = Inputs_Status & ~(1 << 3);
 8000918:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <gdc_businesslogic+0x264>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	f023 0308 	bic.w	r3, r3, #8
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000924:	801a      	strh	r2, [r3, #0]
 8000926:	e006      	b.n	8000936 <gdc_businesslogic+0xe2>
	}else{
		Inputs_Status = Inputs_Status |(1 <<3);
 8000928:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <gdc_businesslogic+0x264>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000934:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Open_Switch 		=	HAL_GPIO_ReadPin(GPIOE,RampOpen_Switch_Pin);
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	4860      	ldr	r0, [pc, #384]	; (8000abc <gdc_businesslogic+0x268>)
 800093c:	f001 ffc2 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000946:	711a      	strb	r2, [r3, #4]
	if(input.Ram_Open_Switch == GPIO_PIN_SET){
 8000948:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <gdc_businesslogic+0x260>)
 800094a:	791b      	ldrb	r3, [r3, #4]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d107      	bne.n	8000960 <gdc_businesslogic+0x10c>
		Inputs_Status = Inputs_Status & ~(1 << 4);
 8000950:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	f023 0310 	bic.w	r3, r3, #16
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <gdc_businesslogic+0x264>)
 800095c:	801a      	strh	r2, [r3, #0]
 800095e:	e006      	b.n	800096e <gdc_businesslogic+0x11a>
	}else{
		Inputs_Status = Inputs_Status |(1 <<4);
 8000960:	4b55      	ldr	r3, [pc, #340]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <gdc_businesslogic+0x264>)
 800096c:	801a      	strh	r2, [r3, #0]
	}
	input.Tilting_Up_Switch 	=	HAL_GPIO_ReadPin(GPIOE,TiltingUp_Switch_Pin);
 800096e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000972:	4852      	ldr	r0, [pc, #328]	; (8000abc <gdc_businesslogic+0x268>)
 8000974:	f001 ffa6 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <gdc_businesslogic+0x260>)
 800097e:	715a      	strb	r2, [r3, #5]
	if(input.Tilting_Up_Switch == GPIO_PIN_SET){
 8000980:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d107      	bne.n	8000998 <gdc_businesslogic+0x144>
		Inputs_Status = Inputs_Status & ~(1 << 5);
 8000988:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <gdc_businesslogic+0x264>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	f023 0320 	bic.w	r3, r3, #32
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	e006      	b.n	80009a6 <gdc_businesslogic+0x152>
	}else{
		Inputs_Status = Inputs_Status |(1 <<5);
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <gdc_businesslogic+0x264>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <gdc_businesslogic+0x264>)
 80009a4:	801a      	strh	r2, [r3, #0]
	}
	input.Tilting_down_switch 	=	HAL_GPIO_ReadPin(GPIOE,TiltingDown_Switch_Pin);
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	4844      	ldr	r0, [pc, #272]	; (8000abc <gdc_businesslogic+0x268>)
 80009ac:	f001 ff8a 	bl	80028c4 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <gdc_businesslogic+0x260>)
 80009b6:	719a      	strb	r2, [r3, #6]
	if(input.Tilting_down_switch == GPIO_PIN_SET){
 80009b8:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <gdc_businesslogic+0x260>)
 80009ba:	799b      	ldrb	r3, [r3, #6]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d107      	bne.n	80009d0 <gdc_businesslogic+0x17c>
		Inputs_Status = Inputs_Status & ~(1 << 6);
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <gdc_businesslogic+0x264>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <gdc_businesslogic+0x264>)
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	e006      	b.n	80009de <gdc_businesslogic+0x18a>
	}else{
		Inputs_Status = Inputs_Status |(1 <<6);
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <gdc_businesslogic+0x264>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <gdc_businesslogic+0x264>)
 80009dc:	801a      	strh	r2, [r3, #0]
	}
	input.Ejection_In 			=	HAL_GPIO_ReadPin(GPIOE,EjectionIn_Switch_Pin);
 80009de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e2:	4836      	ldr	r0, [pc, #216]	; (8000abc <gdc_businesslogic+0x268>)
 80009e4:	f001 ff6e 	bl	80028c4 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <gdc_businesslogic+0x260>)
 80009ee:	71da      	strb	r2, [r3, #7]
	if(input.Ejection_In == GPIO_PIN_SET){
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <gdc_businesslogic+0x260>)
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d107      	bne.n	8000a08 <gdc_businesslogic+0x1b4>
		Inputs_Status = Inputs_Status & ~(1 << 7);
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <gdc_businesslogic+0x264>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a04:	801a      	strh	r2, [r3, #0]
 8000a06:	e006      	b.n	8000a16 <gdc_businesslogic+0x1c2>
	}else{
		Inputs_Status = Inputs_Status |(1 <<7);
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a14:	801a      	strh	r2, [r3, #0]
	}
	input.Ejection_Output 		=	HAL_GPIO_ReadPin(GPIOE,EjectionOut_Switch_Pin);
 8000a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1a:	4828      	ldr	r0, [pc, #160]	; (8000abc <gdc_businesslogic+0x268>)
 8000a1c:	f001 ff52 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000a26:	721a      	strb	r2, [r3, #8]
	if(input.Ejection_Output == GPIO_PIN_SET){
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000a2a:	7a1b      	ldrb	r3, [r3, #8]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d107      	bne.n	8000a40 <gdc_businesslogic+0x1ec>
		Inputs_Status = Inputs_Status & ~(1 << 8);
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a3c:	801a      	strh	r2, [r3, #0]
 8000a3e:	e006      	b.n	8000a4e <gdc_businesslogic+0x1fa>
	}else{
		Inputs_Status = Inputs_Status |(1 <<8);
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a4c:	801a      	strh	r2, [r3, #0]
	}
	input.Slider_In_Switch 		=	HAL_GPIO_ReadPin(GPIOE,SliderIn_Switch_Pin);
 8000a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a52:	481a      	ldr	r0, [pc, #104]	; (8000abc <gdc_businesslogic+0x268>)
 8000a54:	f001 ff36 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000a5e:	725a      	strb	r2, [r3, #9]
	if(input.Slider_In_Switch == GPIO_PIN_SET){
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000a62:	7a5b      	ldrb	r3, [r3, #9]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d107      	bne.n	8000a78 <gdc_businesslogic+0x224>
		Inputs_Status = Inputs_Status & ~(1 << 9);
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a74:	801a      	strh	r2, [r3, #0]
 8000a76:	e006      	b.n	8000a86 <gdc_businesslogic+0x232>
	}else{
		Inputs_Status = Inputs_Status |(1 <<9);
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000a84:	801a      	strh	r2, [r3, #0]
	}
	input.Slider_Out_Switch 	=	HAL_GPIO_ReadPin(GPIOE,SliderOut_Pin);
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <gdc_businesslogic+0x268>)
 8000a8c:	f001 ff1a 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000a96:	729a      	strb	r2, [r3, #10]
	if(input.Slider_Out_Switch == GPIO_PIN_SET){
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <gdc_businesslogic+0x260>)
 8000a9a:	7a9b      	ldrb	r3, [r3, #10]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10f      	bne.n	8000ac0 <gdc_businesslogic+0x26c>
		Inputs_Status = Inputs_Status & ~(1 << 10);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <gdc_businesslogic+0x264>)
 8000aac:	801a      	strh	r2, [r3, #0]
 8000aae:	e00e      	b.n	8000ace <gdc_businesslogic+0x27a>
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	20000044 	.word	0x20000044
 8000ab8:	20000054 	.word	0x20000054
 8000abc:	40011800 	.word	0x40011800
	}else{
		Inputs_Status = Inputs_Status |(1 <<10);
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000acc:	801a      	strh	r2, [r3, #0]
	}
	input.Motor_Switch 			=	0;//HAL_GPIO_ReadPin(GPIOE,Auto_Manual_Switch_Pin);
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	72da      	strb	r2, [r3, #11]
	Inputs_Status = Inputs_Status |(input.Motor_Switch <<11);
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000ad6:	7adb      	ldrb	r3, [r3, #11]
 8000ad8:	02db      	lsls	r3, r3, #11
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000aea:	801a      	strh	r2, [r3, #0]
	input.Station_Conformation 	=	0;//HAL_GPIO_ReadPin(GPIOE,Auto_Manual_Switch_Pin);
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	731a      	strb	r2, [r3, #12]
	Inputs_Status = Inputs_Status |(input.Station_Conformation <<12);
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000af4:	7b1b      	ldrb	r3, [r3, #12]
 8000af6:	031b      	lsls	r3, r3, #12
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000b08:	801a      	strh	r2, [r3, #0]
	input.Robo_Acknowledgment 	=	0;//HAL_GPIO_ReadPin(GPIOE,Auto_Manual_Switch_Pin);
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	735a      	strb	r2, [r3, #13]
	Inputs_Status = Inputs_Status |(input.Robo_Acknowledgment <<13);
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000b12:	7b5b      	ldrb	r3, [r3, #13]
 8000b14:	035b      	lsls	r3, r3, #13
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000b26:	801a      	strh	r2, [r3, #0]
	input.Ram_Close_Sensor 		=	0;//HAL_GPIO_ReadPin(GPIOE,Auto_Manual_Switch_Pin);
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	739a      	strb	r2, [r3, #14]
	Inputs_Status = Inputs_Status |(input.Ram_Close_Sensor <<14);
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <gdc_businesslogic+0x2fc>)
 8000b30:	7b9b      	ldrb	r3, [r3, #14]
 8000b32:	039b      	lsls	r3, r3, #14
 8000b34:	b21a      	sxth	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <gdc_businesslogic+0x2f8>)
 8000b44:	801a      	strh	r2, [r3, #0]
	{
		case 0:

		break;
	}*/
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000054 	.word	0x20000054
 8000b50:	20000044 	.word	0x20000044

08000b54 <ModbusFrame>:
uint16_t Production;
uint8_t DWINRxData[64];
uint16_t RxNoOfData;

void ModbusFrame(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	switch(Config)
 8000b58:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <ModbusFrame+0x1b8>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <ModbusFrame+0x12>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d032      	beq.n	8000bca <ModbusFrame+0x76>
 8000b64:	e0cc      	b.n	8000d00 <ModbusFrame+0x1ac>
	{
		case  ReadMultileReg:
			bufftx[0] = SalveId;
 8000b66:	4b6a      	ldr	r3, [pc, #424]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_READMULTIPLEREG;
 8000b6c:	4b68      	ldr	r3, [pc, #416]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_READ & 0xff00)>>8;
 8000b72:	4b67      	ldr	r3, [pc, #412]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b74:	2230      	movs	r2, #48	; 0x30
 8000b76:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_READ & 0xff);
 8000b78:	4b65      	ldr	r3, [pc, #404]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	70da      	strb	r2, [r3, #3]
			bufftx[4] = (NO_OF_READDATA & 0xff00)>>8;
 8000b7e:	4b64      	ldr	r3, [pc, #400]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_READDATA & 0xff);
 8000b84:	4b62      	ldr	r3, [pc, #392]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b86:	220a      	movs	r2, #10
 8000b88:	715a      	strb	r2, [r3, #5]

			CRC_value = ASCChecksum(bufftx,6);
 8000b8a:	2106      	movs	r1, #6
 8000b8c:	4860      	ldr	r0, [pc, #384]	; (8000d10 <ModbusFrame+0x1bc>)
 8000b8e:	f000 f8d5 	bl	8000d3c <ASCChecksum>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b5f      	ldr	r3, [pc, #380]	; (8000d14 <ModbusFrame+0x1c0>)
 8000b98:	801a      	strh	r2, [r3, #0]

			bufftx[6] = (CRC_value & 0xff);
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <ModbusFrame+0x1c0>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b5b      	ldr	r3, [pc, #364]	; (8000d10 <ModbusFrame+0x1bc>)
 8000ba2:	719a      	strb	r2, [r3, #6]
			bufftx[7] = (CRC_value & 0xff00)>>8;
 8000ba4:	4b5b      	ldr	r3, [pc, #364]	; (8000d14 <ModbusFrame+0x1c0>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b58      	ldr	r3, [pc, #352]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bb0:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(&huart1,bufftx,8);
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	4956      	ldr	r1, [pc, #344]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bb6:	4858      	ldr	r0, [pc, #352]	; (8000d18 <ModbusFrame+0x1c4>)
 8000bb8:	f003 fde8 	bl	800478c <HAL_UART_Transmit_IT>
			RxNoOfData=(NO_OF_READDATA*2)+5;
 8000bbc:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <ModbusFrame+0x1c8>)
 8000bbe:	2219      	movs	r2, #25
 8000bc0:	801a      	strh	r2, [r3, #0]
			Config = WriteMultipleReg;
 8000bc2:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <ModbusFrame+0x1b8>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
		break;
 8000bc8:	e09e      	b.n	8000d08 <ModbusFrame+0x1b4>
		case WriteMultipleReg:
			bufftx[0] = SalveId;
 8000bca:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_WRITEMULTIPLEREG;
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bd2:	2210      	movs	r2, #16
 8000bd4:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_WRITE & 0xff00)>>8;
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bd8:	2220      	movs	r2, #32
 8000bda:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_WRITE & 0xff);
 8000bdc:	4b4c      	ldr	r3, [pc, #304]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	70da      	strb	r2, [r3, #3]

			bufftx[4] = (NO_OF_WRITEDATA & 0xff00)>>8;
 8000be2:	4b4b      	ldr	r3, [pc, #300]	; (8000d10 <ModbusFrame+0x1bc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_WRITEDATA & 0xff);
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bea:	220a      	movs	r2, #10
 8000bec:	715a      	strb	r2, [r3, #5]

			bufftx[6] = NO_OF_WRITEDATA*2;
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <ModbusFrame+0x1bc>)
 8000bf0:	2214      	movs	r2, #20
 8000bf2:	719a      	strb	r2, [r3, #6]

			bufftx[7] = (Production & 0xff00)>>8;
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <ModbusFrame+0x1cc>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c00:	71da      	strb	r2, [r3, #7]
			bufftx[8] = (Production & 0xff);
 8000c02:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <ModbusFrame+0x1cc>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c0a:	721a      	strb	r2, [r3, #8]

			bufftx[9] = (0 & 0xff00)>>8;
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	725a      	strb	r2, [r3, #9]
			bufftx[10] = (0 & 0xff);
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	729a      	strb	r2, [r3, #10]

			bufftx[11] = (0 & 0xff00)>>8;
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	72da      	strb	r2, [r3, #11]
			bufftx[12] = (0 & 0xff);
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	731a      	strb	r2, [r3, #12]

			bufftx[13] = (Inputs_Status & 0xff00)>>8;
 8000c24:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <ModbusFrame+0x1d0>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c30:	735a      	strb	r2, [r3, #13]
			bufftx[14] = (Inputs_Status & 0xff);
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <ModbusFrame+0x1d0>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c3a:	739a      	strb	r2, [r3, #14]

			bufftx[15] = (0 & 0xff00)>>8;
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	73da      	strb	r2, [r3, #15]
			bufftx[16] = (0 & 0xff);
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	741a      	strb	r2, [r3, #16]

			bufftx[17] = (CuringTime & 0xff00)>>8;//2005
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <ModbusFrame+0x1d4>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c54:	745a      	strb	r2, [r3, #17]
			bufftx[18] = (CuringTime & 0xff);
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <ModbusFrame+0x1d4>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c5e:	749a      	strb	r2, [r3, #18]

			bufftx[19] = (TIltingup & 0xff00)>>8;
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <ModbusFrame+0x1d8>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c6c:	74da      	strb	r2, [r3, #19]
			bufftx[20] = (TIltingup & 0xff);
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <ModbusFrame+0x1d8>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c76:	751a      	strb	r2, [r3, #20]

			bufftx[21] = (tinltingdown & 0xff00)>>8;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <ModbusFrame+0x1dc>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c84:	755a      	strb	r2, [r3, #21]
			bufftx[22] = (tinltingdown & 0xff);
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <ModbusFrame+0x1dc>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c8e:	759a      	strb	r2, [r3, #22]

			bufftx[23] = (sliderin & 0xff00)>>8;
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <ModbusFrame+0x1e0>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <ModbusFrame+0x1bc>)
 8000c9c:	75da      	strb	r2, [r3, #23]
			bufftx[24] = (sliderin & 0xff);
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <ModbusFrame+0x1e0>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <ModbusFrame+0x1bc>)
 8000ca6:	761a      	strb	r2, [r3, #24]

			bufftx[25] = (SLiderout & 0xff00)>>8;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <ModbusFrame+0x1e4>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <ModbusFrame+0x1bc>)
 8000cb4:	765a      	strb	r2, [r3, #25]
			bufftx[26] = (SLiderout & 0xff);
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <ModbusFrame+0x1e4>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <ModbusFrame+0x1bc>)
 8000cbe:	769a      	strb	r2, [r3, #26]
			CRC_value = ASCChecksum(bufftx,27);
 8000cc0:	211b      	movs	r1, #27
 8000cc2:	4813      	ldr	r0, [pc, #76]	; (8000d10 <ModbusFrame+0x1bc>)
 8000cc4:	f000 f83a 	bl	8000d3c <ASCChecksum>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <ModbusFrame+0x1c0>)
 8000cce:	801a      	strh	r2, [r3, #0]

			bufftx[27] = (CRC_value & 0xff);
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <ModbusFrame+0x1c0>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <ModbusFrame+0x1bc>)
 8000cd8:	76da      	strb	r2, [r3, #27]
			bufftx[28] = (CRC_value & 0xff00)>>8;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <ModbusFrame+0x1c0>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <ModbusFrame+0x1bc>)
 8000ce6:	771a      	strb	r2, [r3, #28]
			RxNoOfData=8;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <ModbusFrame+0x1c8>)
 8000cea:	2208      	movs	r2, #8
 8000cec:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,bufftx,29);
 8000cee:	221d      	movs	r2, #29
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <ModbusFrame+0x1bc>)
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <ModbusFrame+0x1c4>)
 8000cf4:	f003 fd4a 	bl	800478c <HAL_UART_Transmit_IT>
			Config = ReadMultileReg;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <ModbusFrame+0x1b8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
		break;
 8000cfe:	e003      	b.n	8000d08 <ModbusFrame+0x1b4>
		default:
			Config = ReadMultileReg;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <ModbusFrame+0x1b8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
		break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000082 	.word	0x20000082
 8000d10:	20000064 	.word	0x20000064
 8000d14:	20000084 	.word	0x20000084
 8000d18:	200001cc 	.word	0x200001cc
 8000d1c:	200000c8 	.word	0x200000c8
 8000d20:	20000086 	.word	0x20000086
 8000d24:	20000054 	.word	0x20000054
 8000d28:	2000005a 	.word	0x2000005a
 8000d2c:	20000056 	.word	0x20000056
 8000d30:	20000058 	.word	0x20000058
 8000d34:	2000005c 	.word	0x2000005c
 8000d38:	2000005e 	.word	0x2000005e

08000d3c <ASCChecksum>:

uint16_t ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8000d48:	23ff      	movs	r3, #255	; 0xff
 8000d4a:	73bb      	strb	r3, [r7, #14]
	uint8_t CRCRegHigh = 0xff;
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	737b      	strb	r3, [r7, #13]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	733b      	strb	r3, [r7, #12]
   	for(i=0;i < CheckSumBytes;i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e013      	b.n	8000d82 <ASCChecksum+0x46>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	7bbb      	ldrb	r3, [r7, #14]
 8000d64:	4053      	eors	r3, r2
 8000d66:	72fb      	strb	r3, [r7, #11]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <ASCChecksum+0x68>)
 8000d6c:	5cd2      	ldrb	r2, [r2, r3]
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	4053      	eors	r3, r2
 8000d72:	73bb      	strb	r3, [r7, #14]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <ASCChecksum+0x6c>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	737b      	strb	r3, [r7, #13]
   	for(i=0;i < CheckSumBytes;i++)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	7bfa      	ldrb	r2, [r7, #15]
 8000d84:	7b3b      	ldrb	r3, [r7, #12]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3e7      	bcc.n	8000d5a <ASCChecksum+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	b29b      	uxth	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	0800537c 	.word	0x0800537c
 8000da8:	0800547c 	.word	0x0800547c

08000dac <ModbusInit>:


void ModbusInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DWINRxData, 64);
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	4903      	ldr	r1, [pc, #12]	; (8000dc0 <ModbusInit+0x14>)
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <ModbusInit+0x18>)
 8000db6:	f003 fd43 	bl	8004840 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000088 	.word	0x20000088
 8000dc4:	200001cc 	.word	0x200001cc

08000dc8 <Dwin_Rx_Decoder>:

void Dwin_Rx_Decoder(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
if(!dwin_rx_multipledata_completed){return;}
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <Dwin_Rx_Decoder+0x1c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <Dwin_Rx_Decoder+0x14>
dwin_rx_multipledata_completed=0;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <Dwin_Rx_Decoder+0x1c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e000      	b.n	8000dde <Dwin_Rx_Decoder+0x16>
if(!dwin_rx_multipledata_completed){return;}
 8000ddc:	bf00      	nop
}
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000031 	.word	0x20000031

08000de8 <flashmemoryinit>:
uint8_t writeFlashBuf[10];

uint8_t databuffer_sector_zero[10];
void flashmemoryread(void);

void flashmemoryinit(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	W25qxx_Init();
 8000dec:	f000 fe0c 	bl	8001a08 <W25qxx_Init>
	flashmemoryread();
 8000df0:	f000 f87c 	bl	8000eec <flashmemoryread>

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <flashmemoryroutine>:

void flashmemoryroutine(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	if(Trigger_Hmi_Data_Save)
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <flashmemoryroutine+0xd0>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d05f      	beq.n	8000ec4 <flashmemoryroutine+0xcc>
	{
		Trigger_Hmi_Data_Save=0;
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <flashmemoryroutine+0xd0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
		databuffer_sector_zero[0] = (CuringTime & 0xff00)>>8;
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <flashmemoryroutine+0xd4>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e16:	701a      	strb	r2, [r3, #0]
		databuffer_sector_zero[1] = (CuringTime & 0xff);
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <flashmemoryroutine+0xd4>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e20:	705a      	strb	r2, [r3, #1]
		databuffer_sector_zero[2] = (TIltingup & 0xff00)>>8;
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <flashmemoryroutine+0xdc>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e2e:	709a      	strb	r2, [r3, #2]
		databuffer_sector_zero[3] = (TIltingup & 0xff);
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <flashmemoryroutine+0xdc>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e38:	70da      	strb	r2, [r3, #3]
		databuffer_sector_zero[4] = (tinltingdown & 0xff00)>>8;
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <flashmemoryroutine+0xe0>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e46:	711a      	strb	r2, [r3, #4]
		databuffer_sector_zero[5] = (tinltingdown & 0xff);
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <flashmemoryroutine+0xe0>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e50:	715a      	strb	r2, [r3, #5]
		databuffer_sector_zero[6] = (sliderin & 0xff00)>>8;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <flashmemoryroutine+0xe4>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e5e:	719a      	strb	r2, [r3, #6]
		databuffer_sector_zero[7] = (sliderin & 0xff);
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <flashmemoryroutine+0xe4>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e68:	71da      	strb	r2, [r3, #7]
		databuffer_sector_zero[8] = (SLiderout & 0xff00)>>8;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <flashmemoryroutine+0xe8>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e76:	721a      	strb	r2, [r3, #8]
		databuffer_sector_zero[9] = (SLiderout & 0xff);
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <flashmemoryroutine+0xe8>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e80:	725a      	strb	r2, [r3, #9]
		databuffer_sector_zero[10] = (Ejectionon & 0xff00)>>8;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <flashmemoryroutine+0xec>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e8e:	729a      	strb	r2, [r3, #10]
		databuffer_sector_zero[11] = (Ejectionon & 0xff);
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <flashmemoryroutine+0xec>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000e98:	72da      	strb	r2, [r3, #11]
		databuffer_sector_zero[12] = (Ejectionoff & 0xff00)>>8;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <flashmemoryroutine+0xf0>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000ea6:	731a      	strb	r2, [r3, #12]
		databuffer_sector_zero[13] = (Ejectionoff & 0xff);
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <flashmemoryroutine+0xf0>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000eb0:	735a      	strb	r2, [r3, #13]
		W25qxx_EraseSector(0);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 fe7a 	bl	8001bac <W25qxx_EraseSector>
		W25qxx_WriteSector(databuffer_sector_zero,HMIDATASECTOR,0,14);
 8000eb8:	230e      	movs	r3, #14
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <flashmemoryroutine+0xd8>)
 8000ec0:	f000 ff64 	bl	8001d8c <W25qxx_WriteSector>

	}
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000032 	.word	0x20000032
 8000ecc:	2000005a 	.word	0x2000005a
 8000ed0:	200000d8 	.word	0x200000d8
 8000ed4:	20000056 	.word	0x20000056
 8000ed8:	20000058 	.word	0x20000058
 8000edc:	2000005c 	.word	0x2000005c
 8000ee0:	2000005e 	.word	0x2000005e
 8000ee4:	20000060 	.word	0x20000060
 8000ee8:	20000062 	.word	0x20000062

08000eec <flashmemoryread>:

void flashmemoryread(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	W25qxx_ReadSector(writeFlashBuf,HMIDATASECTOR,0,14);
 8000ef0:	230e      	movs	r3, #14
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	483a      	ldr	r0, [pc, #232]	; (8000fe0 <flashmemoryread+0xf4>)
 8000ef8:	f001 f828 	bl	8001f4c <W25qxx_ReadSector>
	CuringTime 		= (databuffer_sector_zero[0]<<8 | databuffer_sector_zero[1]);
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <flashmemoryread+0xf8>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <flashmemoryread+0xfc>)
 8000f12:	801a      	strh	r2, [r3, #0]
	TIltingup 		= (databuffer_sector_zero[2]<<8 | databuffer_sector_zero[3]);
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <flashmemoryread+0x100>)
 8000f2a:	801a      	strh	r2, [r3, #0]
	tinltingdown 	= (databuffer_sector_zero[4]<<8 | databuffer_sector_zero[5]);
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f2e:	791b      	ldrb	r3, [r3, #4]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f36:	795b      	ldrb	r3, [r3, #5]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <flashmemoryread+0x104>)
 8000f42:	801a      	strh	r2, [r3, #0]
	sliderin 		= (databuffer_sector_zero[6]<<8 | databuffer_sector_zero[7]);
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f46:	799b      	ldrb	r3, [r3, #6]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f4e:	79db      	ldrb	r3, [r3, #7]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <flashmemoryread+0x108>)
 8000f5a:	801a      	strh	r2, [r3, #0]
	SLiderout 		= (databuffer_sector_zero[8]<<8 | databuffer_sector_zero[9]);
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f5e:	7a1b      	ldrb	r3, [r3, #8]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f66:	7a5b      	ldrb	r3, [r3, #9]
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <flashmemoryread+0x10c>)
 8000f72:	801a      	strh	r2, [r3, #0]
	Ejectionon 		= (databuffer_sector_zero[10]<<8 | databuffer_sector_zero[11]);
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f76:	7a9b      	ldrb	r3, [r3, #10]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f7e:	7adb      	ldrb	r3, [r3, #11]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <flashmemoryread+0x110>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	Ejectionoff 	= (databuffer_sector_zero[12]<<8 | databuffer_sector_zero[13]);
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f8e:	7b1b      	ldrb	r3, [r3, #12]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <flashmemoryread+0xf8>)
 8000f96:	7b5b      	ldrb	r3, [r3, #13]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <flashmemoryread+0x114>)
 8000fa2:	801a      	strh	r2, [r3, #0]
	CuringTime_k1 = CuringTime;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <flashmemoryread+0xfc>)
 8000fa6:	881a      	ldrh	r2, [r3, #0]
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <flashmemoryread+0x118>)
 8000faa:	801a      	strh	r2, [r3, #0]
	TIltingup_k1 = TIltingup;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <flashmemoryread+0x100>)
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <flashmemoryread+0x11c>)
 8000fb2:	801a      	strh	r2, [r3, #0]
	tinltingdown_k1 = tinltingdown;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <flashmemoryread+0x104>)
 8000fb6:	881a      	ldrh	r2, [r3, #0]
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <flashmemoryread+0x120>)
 8000fba:	801a      	strh	r2, [r3, #0]
	SLiderout_k1 = SLiderout;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <flashmemoryread+0x10c>)
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <flashmemoryread+0x124>)
 8000fc2:	801a      	strh	r2, [r3, #0]
	sliderin_k1=sliderin;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <flashmemoryread+0x108>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <flashmemoryread+0x128>)
 8000fca:	801a      	strh	r2, [r3, #0]
	Ejectionon_k1 =Ejectionon;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <flashmemoryread+0x110>)
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <flashmemoryread+0x12c>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	Ejectionoff_k1=Ejectionoff;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <flashmemoryread+0x114>)
 8000fd6:	881a      	ldrh	r2, [r3, #0]
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <flashmemoryread+0x130>)
 8000fda:	801a      	strh	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000cc 	.word	0x200000cc
 8000fe4:	200000d8 	.word	0x200000d8
 8000fe8:	2000005a 	.word	0x2000005a
 8000fec:	20000056 	.word	0x20000056
 8000ff0:	20000058 	.word	0x20000058
 8000ff4:	2000005c 	.word	0x2000005c
 8000ff8:	2000005e 	.word	0x2000005e
 8000ffc:	20000060 	.word	0x20000060
 8001000:	20000062 	.word	0x20000062
 8001004:	20000034 	.word	0x20000034
 8001008:	20000036 	.word	0x20000036
 800100c:	20000038 	.word	0x20000038
 8001010:	2000003c 	.word	0x2000003c
 8001014:	2000003a 	.word	0x2000003a
 8001018:	2000003e 	.word	0x2000003e
 800101c:	20000040 	.word	0x20000040

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fff4 	bl	8002010 <HAL_Init>
  /* USER CODE END WHILE */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f82e 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f97a 	bl	8001324 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001030:	f000 f8b4 	bl	800119c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001034:	f000 f8fe 	bl	8001234 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001038:	f000 f87a 	bl	8001130 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800103c:	f000 f948 	bl	80012d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerApplicationInit();
 8001040:	f7ff fa74 	bl	800052c <TimerApplicationInit>


  ModbusInit();
 8001044:	f7ff feb2 	bl	8000dac <ModbusInit>
  flashmemoryinit();
 8001048:	f7ff fece 	bl	8000de8 <flashmemoryinit>
 // HAL_UART_Receive_IT(&huart1,serial_1_buff, 1);

  InputOutputTest();
 800104c:	f7ff faf2 	bl	8000634 <InputOutputTest>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(Flag5msTM2)
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <main+0x60>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <main+0x42>
	  {
		  Flag5msTM2=0;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <main+0x60>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
		  gdc_businesslogic();
 800105e:	f7ff fbf9 	bl	8000854 <gdc_businesslogic>
	  }
	  if(Flag500ms)
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <main+0x64>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f2      	beq.n	8001050 <main+0x30>
	  {
		  Flag500ms=0;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <main+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		  ModbusFrame();
 8001070:	f7ff fd70 	bl	8000b54 <ModbusFrame>
		  Dwin_Rx_Decoder();
 8001074:	f7ff fea8 	bl	8000dc8 <Dwin_Rx_Decoder>
		  flashmemoryroutine();
 8001078:	f7ff febe 	bl	8000df8 <flashmemoryroutine>
	  if(Flag5msTM2)
 800107c:	e7e8      	b.n	8001050 <main+0x30>
 800107e:	bf00      	nop
 8001080:	2000002f 	.word	0x2000002f
 8001084:	20000030 	.word	0x20000030

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	2238      	movs	r2, #56	; 0x38
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f004 f95c 	bl	8005354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV6;
 80010b4:	2305      	movs	r3, #5
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL12;
 80010d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 80010dc:	2310      	movs	r3, #16
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fc1d 	bl	8002924 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80010f0:	f000 f9f0 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 ff1e 	bl	8002f50 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800111a:	f000 f9db 	bl	80014d4 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800111e:	4b03      	ldr	r3, [pc, #12]	; (800112c <SystemClock_Config+0xa4>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3750      	adds	r7, #80	; 0x50
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	42420070 	.word	0x42420070

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_SPI1_Init+0x64>)
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_SPI1_Init+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_SPI1_Init+0x64>)
 800113c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_SPI1_Init+0x64>)
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SPI1_Init+0x64>)
 8001164:	2218      	movs	r2, #24
 8001166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SPI1_Init+0x64>)
 800117c:	220a      	movs	r2, #10
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_SPI1_Init+0x64>)
 8001182:	f002 f913 	bl	80033ac <HAL_SPI_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800118c:	f000 f9a2 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000e4 	.word	0x200000e4
 8001198:	40013000 	.word	0x40013000

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM2_Init+0x94>)
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_TIM2_Init+0x94>)
 80011c2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM2_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM2_Init+0x94>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_TIM2_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM2_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_TIM2_Init+0x94>)
 80011e2:	f002 fe6b 	bl	8003ebc <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011ec:	f000 f972 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_TIM2_Init+0x94>)
 80011fe:	f003 f80f 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 f964 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM2_Init+0x94>)
 800121a:	f003 f9ef 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001224:	f000 f956 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000013c 	.word	0x2000013c

08001234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM3_Init+0x94>)
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <MX_TIM3_Init+0x98>)
 8001254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_TIM3_Init+0x94>)
 8001258:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800125c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_TIM3_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM3_Init+0x94>)
 8001266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800126a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM3_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_TIM3_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_TIM3_Init+0x94>)
 800127a:	f002 fe1f 	bl	8003ebc <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001284:	f000 f926 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_TIM3_Init+0x94>)
 8001296:	f002 ffc3 	bl	8004220 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012a0:	f000 f918 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM3_Init+0x94>)
 80012b2:	f003 f9a3 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f90a 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000184 	.word	0x20000184
 80012cc:	40000400 	.word	0x40000400

080012d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_USART1_UART_Init+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART1_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART1_UART_Init+0x4c>)
 8001308:	f003 f9f0 	bl	80046ec <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001312:	f000 f8df 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001cc 	.word	0x200001cc
 8001320:	40013800 	.word	0x40013800

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <MX_GPIO_Init+0x194>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <MX_GPIO_Init+0x194>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <MX_GPIO_Init+0x194>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001350:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <MX_GPIO_Init+0x194>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <MX_GPIO_Init+0x194>)
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <MX_GPIO_Init+0x194>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <MX_GPIO_Init+0x194>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <MX_GPIO_Init+0x194>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <MX_GPIO_Init+0x194>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <MX_GPIO_Init+0x194>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <MX_GPIO_Init+0x194>)
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x194>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <MX_GPIO_Init+0x194>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <MX_GPIO_Init+0x194>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <MX_GPIO_Init+0x194>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013b0:	2200      	movs	r2, #0
 80013b2:	f641 7110 	movw	r1, #7952	; 0x1f10
 80013b6:	4841      	ldr	r0, [pc, #260]	; (80014bc <MX_GPIO_Init+0x198>)
 80013b8:	f001 fa9b 	bl	80028f2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80013c2:	483f      	ldr	r0, [pc, #252]	; (80014c0 <MX_GPIO_Init+0x19c>)
 80013c4:	f001 fa95 	bl	80028f2 <HAL_GPIO_WritePin>
                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80013ce:	483d      	ldr	r0, [pc, #244]	; (80014c4 <MX_GPIO_Init+0x1a0>)
 80013d0:	f001 fa8f 	bl	80028f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d4:	f641 7310 	movw	r3, #7952	; 0x1f10
 80013d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4833      	ldr	r0, [pc, #204]	; (80014bc <MX_GPIO_Init+0x198>)
 80013ee:	f001 f8e5 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CycleStart_Switch_Pin SliderIn_Switch_Pin SliderOut_Pin EjectionOut_Switch_Pin
                           EjectionIn_Switch_Pin TiltingDown_Switch_Pin TiltingUp_Switch_Pin RampClose_Switch_Pin
                           RampOpen_Switch_Pin */
  GPIO_InitStruct.Pin = CycleStart_Switch_Pin|SliderIn_Switch_Pin|SliderOut_Pin|EjectionOut_Switch_Pin
 80013f2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013f6:	617b      	str	r3, [r7, #20]
                          |EjectionIn_Switch_Pin|TiltingDown_Switch_Pin|TiltingUp_Switch_Pin|RampClose_Switch_Pin
                          |RampOpen_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4830      	ldr	r0, [pc, #192]	; (80014c8 <MX_GPIO_Init+0x1a4>)
 8001408:	f001 f8d8 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Emergency_Switch_Pin Auto_Manual_Switch_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Pin|Auto_Manual_Switch_Pin;
 800140c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	482a      	ldr	r0, [pc, #168]	; (80014cc <MX_GPIO_Init+0x1a8>)
 8001422:	f001 f8cb 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorOn_Pin MotorOff_Pin RampOpen_Pin RampCLose_Pin
                           TiltingUp_Pin TiltingDown_Pin SkiderOut_Pin SliderIn_Pin */
  GPIO_InitStruct.Pin = MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
 8001426:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800142a:	617b      	str	r3, [r7, #20]
                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4820      	ldr	r0, [pc, #128]	; (80014c0 <MX_GPIO_Init+0x19c>)
 8001440:	f001 f8bc 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EjectionOn_Pin EjectionOff_Pin RoboRelay_Pin PC9 */
  GPIO_InitStruct.Pin = EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin|GPIO_PIN_9;
 8001444:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <MX_GPIO_Init+0x1a0>)
 800145e:	f001 f8ad 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_485_Tx_2_Pin */
  GPIO_InitStruct.Pin = UART_485_Tx_2_Pin;
 8001462:	2320      	movs	r3, #32
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UART_485_Tx_2_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4812      	ldr	r0, [pc, #72]	; (80014c0 <MX_GPIO_Init+0x19c>)
 8001476:	f001 f8a1 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_Rx_485_2_Pin */
  GPIO_InitStruct.Pin = USART_Rx_485_2_Pin;
 800147a:	2340      	movs	r3, #64	; 0x40
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_Rx_485_2_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_GPIO_Init+0x19c>)
 800148e:	f001 f895 	bl	80025bc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_USART2_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_GPIO_Init+0x1ac>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <MX_GPIO_Init+0x1ac>)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	6053      	str	r3, [r2, #4]

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40011400 	.word	0x40011400
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40011800 	.word	0x40011800
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40010000 	.word	0x40010000

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_MspInit+0x54>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_MspInit+0x54>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_MspInit+0x54>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_MspInit+0x54>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <HAL_MspInit+0x54>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_MspInit+0x54>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_MspInit+0x58>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_MspInit+0x58>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d12f      	bne.n	80015bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 8001562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800158c:	23a0      	movs	r3, #160	; 0xa0
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <HAL_SPI_MspInit+0x90>)
 80015a0:	f001 f80c 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a4:	2340      	movs	r3, #64	; 0x40
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_SPI_MspInit+0x90>)
 80015b8:	f001 f800 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40013000 	.word	0x40013000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010800 	.word	0x40010800

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e0:	d114      	bne.n	800160c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_TIM_Base_MspInit+0x78>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_TIM_Base_MspInit+0x78>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_TIM_Base_MspInit+0x78>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	201c      	movs	r0, #28
 8001600:	f000 fe63 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001604:	201c      	movs	r0, #28
 8001606:	f000 fe7c 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800160a:	e018      	b.n	800163e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_TIM_Base_MspInit+0x7c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d113      	bne.n	800163e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_TIM_Base_MspInit+0x78>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_TIM_Base_MspInit+0x78>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_TIM_Base_MspInit+0x78>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201d      	movs	r0, #29
 8001634:	f000 fe49 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001638:	201d      	movs	r0, #29
 800163a:	f000 fe62 	bl	8002302 <HAL_NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	40000400 	.word	0x40000400

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_UART_MspInit+0xb4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d145      	bne.n	80016fc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_UART_MspInit+0xb8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_UART_MspInit+0xb8>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_UART_MspInit+0xb8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_UART_MspInit+0xb8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_UART_MspInit+0xb8>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_UART_MspInit+0xb8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4816      	ldr	r0, [pc, #88]	; (800170c <HAL_UART_MspInit+0xbc>)
 80016b4:	f000 ff82 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4810      	ldr	r0, [pc, #64]	; (800170c <HAL_UART_MspInit+0xbc>)
 80016cc:	f000 ff76 	bl	80025bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_UART_MspInit+0xc0>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_UART_MspInit+0xc0>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2025      	movs	r0, #37	; 0x25
 80016f2:	f000 fdea 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f6:	2025      	movs	r0, #37	; 0x25
 80016f8:	f000 fe03 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40013800 	.word	0x40013800
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00
 8001710:	40010000 	.word	0x40010000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 fc9f 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM2_IRQHandler+0x10>)
 800176a:	f002 fc51 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000013c 	.word	0x2000013c

08001778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM3_IRQHandler+0x10>)
 800177e:	f002 fc47 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000184 	.word	0x20000184

0800178c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <USART1_IRQHandler+0x10>)
 8001792:	f003 f8b3 	bl	80048fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001cc 	.word	0x200001cc

080017a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ac:	f7ff fff8 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017c8:	4c09      	ldr	r4, [pc, #36]	; (80017f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80017d6:	f003 fd99 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017da:	f7ff fc21 	bl	8001020 <main>
  bx lr
 80017de:	4770      	bx	lr
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017e8:	080055c4 	.word	0x080055c4
  ldr r2, =_sbss
 80017ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017f0:	20000240 	.word	0x20000240

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>
	...

080017f8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001802:	f107 020f 	add.w	r2, r7, #15
 8001806:	1df9      	adds	r1, r7, #7
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <W25qxx_Spi+0x28>)
 8001810:	f002 f8ab 	bl	800396a <HAL_SPI_TransmitReceive>
	return ret;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000e4 	.word	0x200000e4

08001824 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	4813      	ldr	r0, [pc, #76]	; (800188c <W25qxx_ReadID+0x68>)
 8001840:	f001 f857 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001844:	209f      	movs	r0, #159	; 0x9f
 8001846:	f7ff ffd7 	bl	80017f8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800184a:	20a5      	movs	r0, #165	; 0xa5
 800184c:	f7ff ffd4 	bl	80017f8 <W25qxx_Spi>
 8001850:	4603      	mov	r3, r0
 8001852:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001854:	20a5      	movs	r0, #165	; 0xa5
 8001856:	f7ff ffcf 	bl	80017f8 <W25qxx_Spi>
 800185a:	4603      	mov	r3, r0
 800185c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800185e:	20a5      	movs	r0, #165	; 0xa5
 8001860:	f7ff ffca 	bl	80017f8 <W25qxx_Spi>
 8001864:	4603      	mov	r3, r0
 8001866:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2110      	movs	r1, #16
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <W25qxx_ReadID+0x68>)
 800186e:	f001 f840 	bl	80028f2 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	4313      	orrs	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40010800 	.word	0x40010800

08001890 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2110      	movs	r1, #16
 800189a:	4816      	ldr	r0, [pc, #88]	; (80018f4 <W25qxx_ReadUniqID+0x64>)
 800189c:	f001 f829 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80018a0:	204b      	movs	r0, #75	; 0x4b
 80018a2:	f7ff ffa9 	bl	80017f8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	e005      	b.n	80018b8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018ac:	20a5      	movs	r0, #165	; 0xa5
 80018ae:	f7ff ffa3 	bl	80017f8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	3301      	adds	r3, #1
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d9f6      	bls.n	80018ac <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	71bb      	strb	r3, [r7, #6]
 80018c2:	e00b      	b.n	80018dc <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018c4:	79bc      	ldrb	r4, [r7, #6]
 80018c6:	20a5      	movs	r0, #165	; 0xa5
 80018c8:	f7ff ff96 	bl	80017f8 <W25qxx_Spi>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <W25qxx_ReadUniqID+0x68>)
 80018d2:	4423      	add	r3, r4
 80018d4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	3301      	adds	r3, #1
 80018da:	71bb      	strb	r3, [r7, #6]
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	2b07      	cmp	r3, #7
 80018e0:	d9f0      	bls.n	80018c4 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2110      	movs	r1, #16
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <W25qxx_ReadUniqID+0x64>)
 80018e8:	f001 f803 	bl	80028f2 <HAL_GPIO_WritePin>
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	40010800 	.word	0x40010800
 80018f8:	20000214 	.word	0x20000214

080018fc <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2110      	movs	r1, #16
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <W25qxx_WriteEnable+0x28>)
 8001906:	f000 fff4 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800190a:	2006      	movs	r0, #6
 800190c:	f7ff ff74 	bl	80017f8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2110      	movs	r1, #16
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <W25qxx_WriteEnable+0x28>)
 8001916:	f000 ffec 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fbda 	bl	80020d4 <HAL_Delay>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40010800 	.word	0x40010800

08001928 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2110      	movs	r1, #16
 800193a:	481c      	ldr	r0, [pc, #112]	; (80019ac <W25qxx_ReadStatusRegister+0x84>)
 800193c:	f000 ffd9 	bl	80028f2 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10c      	bne.n	8001960 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001946:	2005      	movs	r0, #5
 8001948:	f7ff ff56 	bl	80017f8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800194c:	20a5      	movs	r0, #165	; 0xa5
 800194e:	f7ff ff53 	bl	80017f8 <W25qxx_Spi>
 8001952:	4603      	mov	r3, r0
 8001954:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <W25qxx_ReadStatusRegister+0x88>)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800195e:	e01b      	b.n	8001998 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d10c      	bne.n	8001980 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001966:	2035      	movs	r0, #53	; 0x35
 8001968:	f7ff ff46 	bl	80017f8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800196c:	20a5      	movs	r0, #165	; 0xa5
 800196e:	f7ff ff43 	bl	80017f8 <W25qxx_Spi>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <W25qxx_ReadStatusRegister+0x88>)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800197e:	e00b      	b.n	8001998 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001980:	2015      	movs	r0, #21
 8001982:	f7ff ff39 	bl	80017f8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001986:	20a5      	movs	r0, #165	; 0xa5
 8001988:	f7ff ff36 	bl	80017f8 <W25qxx_Spi>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <W25qxx_ReadStatusRegister+0x88>)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2110      	movs	r1, #16
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <W25qxx_ReadStatusRegister+0x84>)
 800199e:	f000 ffa8 	bl	80028f2 <HAL_GPIO_WritePin>
	return status;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010800 	.word	0x40010800
 80019b0:	20000214 	.word	0x20000214

080019b4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f000 fb8b 	bl	80020d4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2110      	movs	r1, #16
 80019c2:	480f      	ldr	r0, [pc, #60]	; (8001a00 <W25qxx_WaitForWriteEnd+0x4c>)
 80019c4:	f000 ff95 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80019c8:	2005      	movs	r0, #5
 80019ca:	f7ff ff15 	bl	80017f8 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80019ce:	20a5      	movs	r0, #165	; 0xa5
 80019d0:	f7ff ff12 	bl	80017f8 <W25qxx_Spi>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <W25qxx_WaitForWriteEnd+0x50>)
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fb78 	bl	80020d4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <W25qxx_WaitForWriteEnd+0x50>)
 80019e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ed      	bne.n	80019ce <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	2110      	movs	r1, #16
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <W25qxx_WaitForWriteEnd+0x4c>)
 80019f8:	f000 ff7b 	bl	80028f2 <HAL_GPIO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010800 	.word	0x40010800
 8001a04:	20000214 	.word	0x20000214

08001a08 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001a0e:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8001a16:	e002      	b.n	8001a1e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f000 fb5b 	bl	80020d4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8001a1e:	f000 fb4f 	bl	80020c0 <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b63      	cmp	r3, #99	; 0x63
 8001a26:	d9f7      	bls.n	8001a18 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	485e      	ldr	r0, [pc, #376]	; (8001ba8 <W25qxx_Init+0x1a0>)
 8001a2e:	f000 ff60 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001a32:	2064      	movs	r0, #100	; 0x64
 8001a34:	f000 fb4e 	bl	80020d4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001a38:	f7ff fef4 	bl	8001824 <W25qxx_ReadID>
 8001a3c:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3b11      	subs	r3, #17
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d86c      	bhi.n	8001b22 <W25qxx_Init+0x11a>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <W25qxx_Init+0x48>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001b15 	.word	0x08001b15
 8001a54:	08001b07 	.word	0x08001b07
 8001a58:	08001af9 	.word	0x08001af9
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001add 	.word	0x08001add
 8001a64:	08001acf 	.word	0x08001acf
 8001a68:	08001ac1 	.word	0x08001ac1
 8001a6c:	08001ab1 	.word	0x08001ab1
 8001a70:	08001aa1 	.word	0x08001aa1
 8001a74:	08001b23 	.word	0x08001b23
 8001a78:	08001b23 	.word	0x08001b23
 8001a7c:	08001b23 	.word	0x08001b23
 8001a80:	08001b23 	.word	0x08001b23
 8001a84:	08001b23 	.word	0x08001b23
 8001a88:	08001b23 	.word	0x08001b23
 8001a8c:	08001a91 	.word	0x08001a91
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001a92:	220a      	movs	r2, #10
 8001a94:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001a9e:	e046      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001aa0:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001aa2:	2209      	movs	r2, #9
 8001aa4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001aae:	e03e      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001abe:	e036      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001acc:	e02f      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001ace:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8001ada:	e028      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ade:	2205      	movs	r2, #5
 8001ae0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8001ae8:	e021      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001aec:	2204      	movs	r2, #4
 8001aee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001af2:	2210      	movs	r2, #16
 8001af4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8001af6:	e01a      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001afa:	2203      	movs	r2, #3
 8001afc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b00:	2208      	movs	r2, #8
 8001b02:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001b04:	e013      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b08:	2202      	movs	r2, #2
 8001b0a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8001b12:	e00c      	b.n	8001b2e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8001b20:	e005      	b.n	8001b2e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e036      	b.n	8001b9c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b34:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b3c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b46:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b4e:	6912      	ldr	r2, [r2, #16]
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b56:	8952      	ldrh	r2, [r2, #10]
 8001b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b5e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b68:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b70:	6912      	ldr	r2, [r2, #16]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b7a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001b7c:	f7ff fe88 	bl	8001890 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff fed1 	bl	8001928 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001b86:	2002      	movs	r0, #2
 8001b88:	f7ff fece 	bl	8001928 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f7ff fecb 	bl	8001928 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <W25qxx_Init+0x19c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000214 	.word	0x20000214
 8001ba8:	40010800 	.word	0x40010800

08001bac <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8001bb4:	e002      	b.n	8001bbc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 fa8c 	bl	80020d4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <W25qxx_EraseSector+0xa8>)
 8001bbe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d0f7      	beq.n	8001bb6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <W25qxx_EraseSector+0xa8>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8001bce:	f7ff fef1 	bl	80019b4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <W25qxx_EraseSector+0xa8>)
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8001bde:	f7ff fe8d 	bl	80018fc <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2110      	movs	r1, #16
 8001be6:	481c      	ldr	r0, [pc, #112]	; (8001c58 <W25qxx_EraseSector+0xac>)
 8001be8:	f000 fe83 	bl	80028f2 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <W25qxx_EraseSector+0xa8>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d909      	bls.n	8001c08 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8001bf4:	2021      	movs	r0, #33	; 0x21
 8001bf6:	f7ff fdff 	bl	80017f8 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0e1b      	lsrs	r3, r3, #24
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fdf9 	bl	80017f8 <W25qxx_Spi>
 8001c06:	e002      	b.n	8001c0e <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8001c08:	2020      	movs	r0, #32
 8001c0a:	f7ff fdf5 	bl	80017f8 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fdef 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fde9 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fde4 	bl	80017f8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2110      	movs	r1, #16
 8001c34:	4808      	ldr	r0, [pc, #32]	; (8001c58 <W25qxx_EraseSector+0xac>)
 8001c36:	f000 fe5c 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001c3a:	f7ff febb 	bl	80019b4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 fa48 	bl	80020d4 <HAL_Delay>
	w25qxx.Lock = 0;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <W25qxx_EraseSector+0xa8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000214 	.word	0x20000214
 8001c58:	40010800 	.word	0x40010800

08001c5c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <W25qxx_SectorToPage+0x24>)
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <W25qxx_SectorToPage+0x24>)
 8001c70:	8952      	ldrh	r2, [r2, #10]
 8001c72:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000214 	.word	0x20000214

08001c84 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001c92:	e002      	b.n	8001c9a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 fa1d 	bl	80020d4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001c9c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d0f7      	beq.n	8001c94 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001cb4:	8952      	ldrh	r2, [r2, #10]
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d802      	bhi.n	8001cc0 <W25qxx_WritePage+0x3c>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001cc2:	895b      	ldrh	r3, [r3, #10]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001cd4:	8952      	ldrh	r2, [r2, #10]
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d905      	bls.n	8001ce6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001cdc:	895b      	ldrh	r3, [r3, #10]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8001ce6:	f7ff fe65 	bl	80019b4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001cea:	f7ff fe07 	bl	80018fc <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	4824      	ldr	r0, [pc, #144]	; (8001d84 <W25qxx_WritePage+0x100>)
 8001cf4:	f000 fdfd 	bl	80028f2 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001cfa:	895b      	ldrh	r3, [r3, #10]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d909      	bls.n	8001d26 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8001d12:	2012      	movs	r0, #18
 8001d14:	f7ff fd70 	bl	80017f8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0e1b      	lsrs	r3, r3, #24
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd6a 	bl	80017f8 <W25qxx_Spi>
 8001d24:	e002      	b.n	8001d2c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fd66 	bl	80017f8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fd60 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd5a 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fd55 	bl	80017f8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <W25qxx_WritePage+0x104>)
 8001d58:	f001 fbac 	bl	80034b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <W25qxx_WritePage+0x100>)
 8001d62:	f000 fdc6 	bl	80028f2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001d66:	f7ff fe25 	bl	80019b4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 f9b2 	bl	80020d4 <HAL_Delay>
	w25qxx.Lock = 0;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <W25qxx_WritePage+0xfc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000214 	.word	0x20000214
 8001d84:	40010800 	.word	0x40010800
 8001d88:	200000e4 	.word	0x200000e4

08001d8c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d802      	bhi.n	8001daa <W25qxx_WriteSector+0x1e>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d243      	bcs.n	8001e42 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	441a      	add	r2, r3
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d905      	bls.n	8001dd4 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	e001      	b.n	8001dd8 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f7ff ff3f 	bl	8001c5c <W25qxx_SectorToPage>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001de2:	895b      	ldrh	r3, [r3, #10]
 8001de4:	4619      	mov	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dec:	4413      	add	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001df2:	895b      	ldrh	r3, [r3, #10]
 8001df4:	461a      	mov	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dfc:	fb01 f202 	mul.w	r2, r1, r2
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	69f9      	ldr	r1, [r7, #28]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff ff3a 	bl	8001c84 <W25qxx_WritePage>
		StartPage++;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3301      	adds	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001e18:	895b      	ldrh	r3, [r3, #10]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1a9a      	subs	r2, r3, r2
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	4413      	add	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <W25qxx_WriteSector+0xc0>)
 8001e28:	895b      	ldrh	r3, [r3, #10]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	dce1      	bgt.n	8001e04 <W25qxx_WriteSector+0x78>
 8001e40:	e000      	b.n	8001e44 <W25qxx_WriteSector+0xb8>
		return;
 8001e42:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000214 	.word	0x20000214

08001e50 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001e5e:	e002      	b.n	8001e66 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f000 f937 	bl	80020d4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001e68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d0f7      	beq.n	8001e60 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001e7a:	895b      	ldrh	r3, [r3, #10]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d802      	bhi.n	8001e8a <W25qxx_ReadPage+0x3a>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001e8c:	895b      	ldrh	r3, [r3, #10]
 8001e8e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001e98:	8952      	ldrh	r2, [r2, #10]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d905      	bls.n	8001eaa <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001ea0:	895b      	ldrh	r3, [r3, #10]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001eac:	895b      	ldrh	r3, [r3, #10]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	4820      	ldr	r0, [pc, #128]	; (8001f44 <W25qxx_ReadPage+0xf4>)
 8001ec2:	f000 fd16 	bl	80028f2 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d909      	bls.n	8001ee2 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8001ece:	200c      	movs	r0, #12
 8001ed0:	f7ff fc92 	bl	80017f8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0e1b      	lsrs	r3, r3, #24
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fc8c 	bl	80017f8 <W25qxx_Spi>
 8001ee0:	e002      	b.n	8001ee8 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8001ee2:	200b      	movs	r0, #11
 8001ee4:	f7ff fc88 	bl	80017f8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc82 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc7c 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fc77 	bl	80017f8 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fc74 	bl	80017f8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	2364      	movs	r3, #100	; 0x64
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <W25qxx_ReadPage+0xf8>)
 8001f1a:	f001 fc0e 	bl	800373a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2110      	movs	r1, #16
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <W25qxx_ReadPage+0xf4>)
 8001f24:	f000 fce5 	bl	80028f2 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f000 f8d3 	bl	80020d4 <HAL_Delay>
	w25qxx.Lock = 0;
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000214 	.word	0x20000214
 8001f44:	40010800 	.word	0x40010800
 8001f48:	200000e4 	.word	0x200000e4

08001f4c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d802      	bhi.n	8001f6a <W25qxx_ReadSector+0x1e>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d243      	bcs.n	8002002 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	441a      	add	r2, r3
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d905      	bls.n	8001f94 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	e001      	b.n	8001f98 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001f98:	68b8      	ldr	r0, [r7, #8]
 8001f9a:	f7ff fe5f 	bl	8001c5c <W25qxx_SectorToPage>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001fa2:	895b      	ldrh	r3, [r3, #10]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001fb2:	895b      	ldrh	r3, [r3, #10]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fbc:	fb01 f202 	mul.w	r2, r1, r2
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	69f9      	ldr	r1, [r7, #28]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff ff40 	bl	8001e50 <W25qxx_ReadPage>
		StartPage++;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001fd8:	895b      	ldrh	r3, [r3, #10]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1a9a      	subs	r2, r3, r2
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <W25qxx_ReadSector+0xc0>)
 8001fe8:	895b      	ldrh	r3, [r3, #10]
 8001fea:	461a      	mov	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dce1      	bgt.n	8001fc4 <W25qxx_ReadSector+0x78>
 8002000:	e000      	b.n	8002004 <W25qxx_ReadSector+0xb8>
		return;
 8002002:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000214 	.word	0x20000214

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x28>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f947 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fa58 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f95f 	bl	800231e <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f927 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000000 	.word	0x20000000
 8002094:	20000008 	.word	0x20000008
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x1c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x20>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_IncTick+0x20>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000008 	.word	0x20000008
 80020bc:	2000023c 	.word	0x2000023c

080020c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_GetTick+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	2000023c 	.word	0x2000023c

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffe0 	bl	80020c0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4906      	ldr	r1, [pc, #24]	; (80021b4 <__NVIC_EnableIRQ+0x34>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff90 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff2d 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff42 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff90 	bl	800220c <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5f 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff35 	bl	8002180 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d008      	beq.n	8002360 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e020      	b.n	80023a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020e 	bic.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d005      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2204      	movs	r2, #4
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	e0d6      	b.n	800257e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020e 	bic.w	r2, r2, #14
 80023de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b64      	ldr	r3, [pc, #400]	; (8002588 <HAL_DMA_Abort_IT+0x1dc>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d958      	bls.n	80024ae <HAL_DMA_Abort_IT+0x102>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a62      	ldr	r2, [pc, #392]	; (800258c <HAL_DMA_Abort_IT+0x1e0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d04f      	beq.n	80024a6 <HAL_DMA_Abort_IT+0xfa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a61      	ldr	r2, [pc, #388]	; (8002590 <HAL_DMA_Abort_IT+0x1e4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d048      	beq.n	80024a2 <HAL_DMA_Abort_IT+0xf6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5f      	ldr	r2, [pc, #380]	; (8002594 <HAL_DMA_Abort_IT+0x1e8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d040      	beq.n	800249c <HAL_DMA_Abort_IT+0xf0>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a5e      	ldr	r2, [pc, #376]	; (8002598 <HAL_DMA_Abort_IT+0x1ec>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d038      	beq.n	8002496 <HAL_DMA_Abort_IT+0xea>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a5c      	ldr	r2, [pc, #368]	; (800259c <HAL_DMA_Abort_IT+0x1f0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d030      	beq.n	8002490 <HAL_DMA_Abort_IT+0xe4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5b      	ldr	r2, [pc, #364]	; (80025a0 <HAL_DMA_Abort_IT+0x1f4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d028      	beq.n	800248a <HAL_DMA_Abort_IT+0xde>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_DMA_Abort_IT+0x1dc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d020      	beq.n	8002484 <HAL_DMA_Abort_IT+0xd8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <HAL_DMA_Abort_IT+0x1f8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d019      	beq.n	8002480 <HAL_DMA_Abort_IT+0xd4>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a55      	ldr	r2, [pc, #340]	; (80025a8 <HAL_DMA_Abort_IT+0x1fc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d012      	beq.n	800247c <HAL_DMA_Abort_IT+0xd0>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a54      	ldr	r2, [pc, #336]	; (80025ac <HAL_DMA_Abort_IT+0x200>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00a      	beq.n	8002476 <HAL_DMA_Abort_IT+0xca>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <HAL_DMA_Abort_IT+0x204>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d102      	bne.n	8002470 <HAL_DMA_Abort_IT+0xc4>
 800246a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246e:	e01b      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 8002470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002474:	e018      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	e015      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 800247c:	2310      	movs	r3, #16
 800247e:	e013      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 8002480:	2301      	movs	r3, #1
 8002482:	e011      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 8002484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002488:	e00e      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 800248a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800248e:	e00b      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	e008      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 8002496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249a:	e005      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	e002      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 80024a2:	2310      	movs	r3, #16
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_Abort_IT+0xfc>
 80024a6:	2301      	movs	r3, #1
 80024a8:	4a42      	ldr	r2, [pc, #264]	; (80025b4 <HAL_DMA_Abort_IT+0x208>)
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e057      	b.n	800255e <HAL_DMA_Abort_IT+0x1b2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a36      	ldr	r2, [pc, #216]	; (800258c <HAL_DMA_Abort_IT+0x1e0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04f      	beq.n	8002558 <HAL_DMA_Abort_IT+0x1ac>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a34      	ldr	r2, [pc, #208]	; (8002590 <HAL_DMA_Abort_IT+0x1e4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d048      	beq.n	8002554 <HAL_DMA_Abort_IT+0x1a8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a33      	ldr	r2, [pc, #204]	; (8002594 <HAL_DMA_Abort_IT+0x1e8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d040      	beq.n	800254e <HAL_DMA_Abort_IT+0x1a2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a31      	ldr	r2, [pc, #196]	; (8002598 <HAL_DMA_Abort_IT+0x1ec>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d038      	beq.n	8002548 <HAL_DMA_Abort_IT+0x19c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a30      	ldr	r2, [pc, #192]	; (800259c <HAL_DMA_Abort_IT+0x1f0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d030      	beq.n	8002542 <HAL_DMA_Abort_IT+0x196>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <HAL_DMA_Abort_IT+0x1f4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d028      	beq.n	800253c <HAL_DMA_Abort_IT+0x190>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_DMA_Abort_IT+0x1dc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d020      	beq.n	8002536 <HAL_DMA_Abort_IT+0x18a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_DMA_Abort_IT+0x1f8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d019      	beq.n	8002532 <HAL_DMA_Abort_IT+0x186>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <HAL_DMA_Abort_IT+0x1fc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d012      	beq.n	800252e <HAL_DMA_Abort_IT+0x182>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_DMA_Abort_IT+0x200>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00a      	beq.n	8002528 <HAL_DMA_Abort_IT+0x17c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <HAL_DMA_Abort_IT+0x204>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d102      	bne.n	8002522 <HAL_DMA_Abort_IT+0x176>
 800251c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002520:	e01b      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002526:	e018      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252c:	e015      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 800252e:	2310      	movs	r3, #16
 8002530:	e013      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002532:	2301      	movs	r3, #1
 8002534:	e011      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253a:	e00e      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 800253c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002540:	e00b      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002546:	e008      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254c:	e005      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 800254e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002552:	e002      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002554:	2310      	movs	r3, #16
 8002556:	e000      	b.n	800255a <HAL_DMA_Abort_IT+0x1ae>
 8002558:	2301      	movs	r3, #1
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_DMA_Abort_IT+0x20c>)
 800255c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
    } 
  }
  return status;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40020080 	.word	0x40020080
 800258c:	40020008 	.word	0x40020008
 8002590:	4002001c 	.word	0x4002001c
 8002594:	40020030 	.word	0x40020030
 8002598:	40020044 	.word	0x40020044
 800259c:	40020058 	.word	0x40020058
 80025a0:	4002006c 	.word	0x4002006c
 80025a4:	40020408 	.word	0x40020408
 80025a8:	4002041c 	.word	0x4002041c
 80025ac:	40020430 	.word	0x40020430
 80025b0:	40020444 	.word	0x40020444
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e169      	b.n	80028a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d0:	2201      	movs	r2, #1
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 8158 	bne.w	800289e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a9a      	ldr	r2, [pc, #616]	; (800285c <HAL_GPIO_Init+0x2a0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d05e      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 80025f8:	4a98      	ldr	r2, [pc, #608]	; (800285c <HAL_GPIO_Init+0x2a0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d875      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 80025fe:	4a98      	ldr	r2, [pc, #608]	; (8002860 <HAL_GPIO_Init+0x2a4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d058      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002604:	4a96      	ldr	r2, [pc, #600]	; (8002860 <HAL_GPIO_Init+0x2a4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d86f      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 800260a:	4a96      	ldr	r2, [pc, #600]	; (8002864 <HAL_GPIO_Init+0x2a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d052      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002610:	4a94      	ldr	r2, [pc, #592]	; (8002864 <HAL_GPIO_Init+0x2a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d869      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002616:	4a94      	ldr	r2, [pc, #592]	; (8002868 <HAL_GPIO_Init+0x2ac>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04c      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 800261c:	4a92      	ldr	r2, [pc, #584]	; (8002868 <HAL_GPIO_Init+0x2ac>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d863      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002622:	4a92      	ldr	r2, [pc, #584]	; (800286c <HAL_GPIO_Init+0x2b0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d046      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002628:	4a90      	ldr	r2, [pc, #576]	; (800286c <HAL_GPIO_Init+0x2b0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d85d      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 800262e:	2b12      	cmp	r3, #18
 8002630:	d82a      	bhi.n	8002688 <HAL_GPIO_Init+0xcc>
 8002632:	2b12      	cmp	r3, #18
 8002634:	d859      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <HAL_GPIO_Init+0x80>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	080026b7 	.word	0x080026b7
 8002640:	08002691 	.word	0x08002691
 8002644:	080026a3 	.word	0x080026a3
 8002648:	080026e5 	.word	0x080026e5
 800264c:	080026eb 	.word	0x080026eb
 8002650:	080026eb 	.word	0x080026eb
 8002654:	080026eb 	.word	0x080026eb
 8002658:	080026eb 	.word	0x080026eb
 800265c:	080026eb 	.word	0x080026eb
 8002660:	080026eb 	.word	0x080026eb
 8002664:	080026eb 	.word	0x080026eb
 8002668:	080026eb 	.word	0x080026eb
 800266c:	080026eb 	.word	0x080026eb
 8002670:	080026eb 	.word	0x080026eb
 8002674:	080026eb 	.word	0x080026eb
 8002678:	080026eb 	.word	0x080026eb
 800267c:	080026eb 	.word	0x080026eb
 8002680:	08002699 	.word	0x08002699
 8002684:	080026ad 	.word	0x080026ad
 8002688:	4a79      	ldr	r2, [pc, #484]	; (8002870 <HAL_GPIO_Init+0x2b4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800268e:	e02c      	b.n	80026ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e029      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	3304      	adds	r3, #4
 800269e:	623b      	str	r3, [r7, #32]
          break;
 80026a0:	e024      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	3308      	adds	r3, #8
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e01f      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	330c      	adds	r3, #12
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e01a      	b.n	80026ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026be:	2304      	movs	r3, #4
 80026c0:	623b      	str	r3, [r7, #32]
          break;
 80026c2:	e013      	b.n	80026ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026cc:	2308      	movs	r3, #8
 80026ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	611a      	str	r2, [r3, #16]
          break;
 80026d6:	e009      	b.n	80026ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d8:	2308      	movs	r3, #8
 80026da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	615a      	str	r2, [r3, #20]
          break;
 80026e2:	e003      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
          break;
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x130>
          break;
 80026ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d801      	bhi.n	80026f6 <HAL_GPIO_Init+0x13a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	e001      	b.n	80026fa <HAL_GPIO_Init+0x13e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2bff      	cmp	r3, #255	; 0xff
 8002700:	d802      	bhi.n	8002708 <HAL_GPIO_Init+0x14c>
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	e002      	b.n	800270e <HAL_GPIO_Init+0x152>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	3b08      	subs	r3, #8
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	210f      	movs	r1, #15
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80b1 	beq.w	800289e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800273c:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <HAL_GPIO_Init+0x2b8>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_GPIO_Init+0x2b8>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_GPIO_Init+0x2b8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002754:	4a48      	ldr	r2, [pc, #288]	; (8002878 <HAL_GPIO_Init+0x2bc>)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	220f      	movs	r2, #15
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a40      	ldr	r2, [pc, #256]	; (800287c <HAL_GPIO_Init+0x2c0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_GPIO_Init+0x1ec>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3f      	ldr	r2, [pc, #252]	; (8002880 <HAL_GPIO_Init+0x2c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1e8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3e      	ldr	r2, [pc, #248]	; (8002884 <HAL_GPIO_Init+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1e4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <HAL_GPIO_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1e0>
 8002798:	2303      	movs	r3, #3
 800279a:	e006      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 800279c:	2304      	movs	r3, #4
 800279e:	e004      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a8:	2300      	movs	r3, #0
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ba:	492f      	ldr	r1, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x2bc>)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	492c      	ldr	r1, [pc, #176]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4928      	ldr	r1, [pc, #160]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	491e      	ldr	r1, [pc, #120]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002814:	4013      	ands	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4918      	ldr	r1, [pc, #96]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	4914      	ldr	r1, [pc, #80]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800283c:	4013      	ands	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d021      	beq.n	8002890 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e021      	b.n	800289e <HAL_GPIO_Init+0x2e2>
 800285a:	bf00      	nop
 800285c:	10320000 	.word	0x10320000
 8002860:	10310000 	.word	0x10310000
 8002864:	10220000 	.word	0x10220000
 8002868:	10210000 	.word	0x10210000
 800286c:	10120000 	.word	0x10120000
 8002870:	10110000 	.word	0x10110000
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	40010800 	.word	0x40010800
 8002880:	40010c00 	.word	0x40010c00
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_GPIO_Init+0x304>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	43db      	mvns	r3, r3
 8002898:	4909      	ldr	r1, [pc, #36]	; (80028c0 <HAL_GPIO_Init+0x304>)
 800289a:	4013      	ands	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	3301      	adds	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f47f ae8e 	bne.w	80025d0 <HAL_GPIO_Init+0x14>
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	372c      	adds	r7, #44	; 0x2c
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40010400 	.word	0x40010400

080028c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]
 80028fe:	4613      	mov	r3, r2
 8002900:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002902:	787b      	ldrb	r3, [r7, #1]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002908:	887a      	ldrh	r2, [r7, #2]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800290e:	e003      	b.n	8002918 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	041a      	lsls	r2, r3, #16
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	611a      	str	r2, [r3, #16]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
	...

08002924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e304      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b04      	cmp	r3, #4
 800294e:	d00c      	beq.n	800296a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d112      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
 800295c:	4b8c      	ldr	r3, [pc, #560]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x12c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d168      	bne.n	8002a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e2de      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x76>
 800298c:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a7f      	ldr	r2, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b7b      	ldr	r3, [pc, #492]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xbc>
 80029c6:	4b72      	ldr	r3, [pc, #456]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a71      	ldr	r2, [pc, #452]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6a      	ldr	r2, [pc, #424]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7ff fb5e 	bl	80020c0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7ff fb5a 	bl	80020c0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e292      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe4>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7ff fb4a 	bl	80020c0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff fb46 	bl	80020c0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e27e      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x10c>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d063      	beq.n	8002b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a6a:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x18c>
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e252      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4939      	ldr	r1, [pc, #228]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7ff faff 	bl	80020c0 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7ff fafb 	bl	80020c0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e233      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4927      	ldr	r1, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff fade 	bl	80020c0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7ff fada 	bl	80020c0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e212      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03a      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d019      	beq.n	8002b6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7ff fabe 	bl	80020c0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7ff faba 	bl	80020c0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1f2      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f000 fc02 	bl	8003370 <RCC_Delay>
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7ff faa4 	bl	80020c0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7a:	e00f      	b.n	8002b9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7ff faa0 	bl	80020c0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d908      	bls.n	8002b9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1d8      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	42420000 	.word	0x42420000
 8002b98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e9      	bne.n	8002b7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a6 	beq.w	8002d02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bba:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	61d3      	str	r3, [r2, #28]
 8002bd2:	4b8e      	ldr	r3, [pc, #568]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b8b      	ldr	r3, [pc, #556]	; (8002e10 <HAL_RCC_OscConfig+0x4ec>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <HAL_RCC_OscConfig+0x4ec>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a87      	ldr	r2, [pc, #540]	; (8002e10 <HAL_RCC_OscConfig+0x4ec>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7ff fa61 	bl	80020c0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7ff fa5d 	bl	80020c0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e195      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x4ec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x312>
 8002c28:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a77      	ldr	r2, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	e02d      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x334>
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a72      	ldr	r2, [pc, #456]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4a6f      	ldr	r2, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6213      	str	r3, [r2, #32]
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x356>
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a63      	ldr	r2, [pc, #396]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7ff fa11 	bl	80020c0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7ff fa0d 	bl	80020c0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e143      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x37e>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f9fb 	bl	80020c0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7ff f9f7 	bl	80020c0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e12d      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4a44      	ldr	r2, [pc, #272]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 808c 	beq.w	8002e24 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d10e      	bne.n	8002d38 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d108      	bne.n	8002d38 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e103      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d14e      	bne.n	8002dde <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0ef      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002d60:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RCC_OscConfig+0x4f0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff f9ab 	bl	80020c0 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d6e:	f7ff f9a7 	bl	80020c0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0df      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	491c      	ldr	r1, [pc, #112]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4918      	ldr	r1, [pc, #96]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002db0:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_RCC_OscConfig+0x4f0>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7ff f983 	bl	80020c0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002dbe:	f7ff f97f 	bl	80020c0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0b7      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x49a>
 8002ddc:	e022      	b.n	8002e24 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_OscConfig+0x4f0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff f966 	bl	80020c0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002df8:	f7ff f962 	bl	80020c0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d908      	bls.n	8002e18 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e09a      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e9      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8088 	beq.w	8002f3e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d068      	beq.n	8002f0c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d14d      	bne.n	8002ede <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCC_OscConfig+0x628>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7ff f93a 	bl	80020c0 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7ff f936 	bl	80020c0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e06e      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e62:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d10f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4931      	ldr	r1, [pc, #196]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e86:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f023 020f 	bic.w	r2, r3, #15
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	492d      	ldr	r1, [pc, #180]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	4927      	ldr	r1, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCC_OscConfig+0x628>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7ff f903 	bl	80020c0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7ff f8ff 	bl	80020c0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e037      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x59a>
 8002edc:	e02f      	b.n	8002f3e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x628>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7ff f8ec 	bl	80020c0 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7ff f8e8 	bl	80020c0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e020      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x5c8>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e013      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	42420060 	.word	0x42420060

08002f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d0      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 0207 	bic.w	r2, r3, #7
 8002f7a:	4965      	ldr	r1, [pc, #404]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d040      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d115      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e073      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06b      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4936      	ldr	r1, [pc, #216]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7ff f83e 	bl	80020c0 <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7ff f83a 	bl	80020c0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e053      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d210      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 0207 	bic.w	r2, r3, #7
 8003086:	4922      	ldr	r1, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f821 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1cc>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1d0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ff9c 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	0800557c 	.word	0x0800557c
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b092      	sub	sp, #72	; 0x48
 800312a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003130:	2300      	movs	r3, #0
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
 8003134:	2300      	movs	r3, #0
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
 8003138:	2300      	movs	r3, #0
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003148:	4b6b      	ldr	r3, [pc, #428]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b04      	cmp	r3, #4
 8003156:	d002      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x3a>
 8003158:	2b08      	cmp	r3, #8
 800315a:	d003      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	e0c3      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003160:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003162:	e0c3      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	4b64      	ldr	r3, [pc, #400]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80ac 	beq.w	80032d6 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800317e:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8003188:	5c9b      	ldrb	r3, [r3, r2]
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 808c 	beq.w	80032b2 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800319a:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	3301      	adds	r3, #1
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3302      	adds	r3, #2
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	2200      	movs	r2, #0
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	627a      	str	r2, [r7, #36]	; 0x24
 80031be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c0:	2200      	movs	r2, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	4611      	mov	r1, r2
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	fb00 f203 	mul.w	r2, r0, r3
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	fb03 f301 	mul.w	r3, r3, r1
 80031d2:	4413      	add	r3, r2
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	fba2 4500 	umull	r4, r5, r2, r0
 80031da:	442b      	add	r3, r5
 80031dc:	461d      	mov	r5, r3
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f0:	0150      	lsls	r0, r2, #5
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	ebb2 0a04 	subs.w	sl, r2, r4
 80031fa:	eb63 0b05 	sbc.w	fp, r3, r5
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800320a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800320e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003212:	ebb2 080a 	subs.w	r8, r2, sl
 8003216:	eb63 090b 	sbc.w	r9, r3, fp
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800322a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800322e:	4690      	mov	r8, r2
 8003230:	4699      	mov	r9, r3
 8003232:	eb18 0304 	adds.w	r3, r8, r4
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	eb49 0305 	adc.w	r3, r9, r5
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324a:	4629      	mov	r1, r5
 800324c:	024b      	lsls	r3, r1, #9
 800324e:	4620      	mov	r0, r4
 8003250:	4629      	mov	r1, r5
 8003252:	4604      	mov	r4, r0
 8003254:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003258:	4601      	mov	r1, r0
 800325a:	024a      	lsls	r2, r1, #9
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	2200      	movs	r2, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	617a      	str	r2, [r7, #20]
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	2200      	movs	r2, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	60fa      	str	r2, [r7, #12]
 8003270:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003274:	4622      	mov	r2, r4
 8003276:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800327a:	4645      	mov	r5, r8
 800327c:	fb05 f202 	mul.w	r2, r5, r2
 8003280:	46cc      	mov	ip, r9
 8003282:	4625      	mov	r5, r4
 8003284:	461c      	mov	r4, r3
 8003286:	4623      	mov	r3, r4
 8003288:	fb03 f30c 	mul.w	r3, r3, ip
 800328c:	4413      	add	r3, r2
 800328e:	4622      	mov	r2, r4
 8003290:	4644      	mov	r4, r8
 8003292:	fba2 2404 	umull	r2, r4, r2, r4
 8003296:	61fc      	str	r4, [r7, #28]
 8003298:	61ba      	str	r2, [r7, #24]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a4:	f7fc ffbe 	bl	8000224 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	e007      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1d8>)
 80032b6:	fb03 f202 	mul.w	r2, r3, r2
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80032c4:	7b5b      	ldrb	r3, [r3, #13]
 80032c6:	461a      	mov	r2, r3
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44
 80032d4:	e004      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80032e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80032e4:	e002      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1d8>)
 80032e8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80032ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3748      	adds	r7, #72	; 0x48
 80032f2:	46bd      	mov	sp, r7
 80032f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	08005594 	.word	0x08005594
 8003304:	080055a4 	.word	0x080055a4
 8003308:	003d0900 	.word	0x003d0900

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b02      	ldr	r3, [pc, #8]	; (800331c <HAL_RCC_GetHCLKFreq+0x10>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000000 	.word	0x20000000

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003324:	f7ff fff2 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	0800558c 	.word	0x0800558c

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff ffde 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0adb      	lsrs	r3, r3, #11
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	0800558c 	.word	0x0800558c

08003370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <RCC_Delay+0x34>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <RCC_Delay+0x38>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a5b      	lsrs	r3, r3, #9
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800338c:	bf00      	nop
  }
  while (Delay --);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f9      	bne.n	800338c <RCC_Delay+0x1c>
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	20000000 	.word	0x20000000
 80033a8:	10624dd3 	.word	0x10624dd3

080033ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e076      	b.n	80034ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d108      	bne.n	80033d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ce:	d009      	beq.n	80033e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
 80033d6:	e005      	b.n	80033e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe f89c 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	ea42 0103 	orr.w	r1, r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	0c1a      	lsrs	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f002 0204 	and.w	r2, r2, #4
 800348a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_SPI_Transmit+0x22>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e12d      	b.n	8003732 <HAL_SPI_Transmit+0x27e>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034de:	f7fe fdef 	bl	80020c0 <HAL_GetTick>
 80034e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
 80034f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034f8:	e116      	b.n	8003728 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_SPI_Transmit+0x52>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800350a:	e10d      	b.n	8003728 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2203      	movs	r2, #3
 8003510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003552:	d10f      	bne.n	8003574 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003562:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003572:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d007      	beq.n	8003592 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359a:	d14f      	bne.n	800363c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_Transmit+0xf6>
 80035a4:	8afb      	ldrh	r3, [r7, #22]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d142      	bne.n	8003630 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	1c9a      	adds	r2, r3, #2
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035ce:	e02f      	b.n	8003630 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d112      	bne.n	8003604 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	86da      	strh	r2, [r3, #54]	; 0x36
 8003602:	e015      	b.n	8003630 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003604:	f7fe fd5c 	bl	80020c0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d803      	bhi.n	800361c <HAL_SPI_Transmit+0x168>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d102      	bne.n	8003622 <HAL_SPI_Transmit+0x16e>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800362e:	e07b      	b.n	8003728 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ca      	bne.n	80035d0 <HAL_SPI_Transmit+0x11c>
 800363a:	e050      	b.n	80036de <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit+0x196>
 8003644:	8afb      	ldrh	r3, [r7, #22]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d144      	bne.n	80036d4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003670:	e030      	b.n	80036d4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d113      	bne.n	80036a8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a6:	e015      	b.n	80036d4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a8:	f7fe fd0a 	bl	80020c0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d803      	bhi.n	80036c0 <HAL_SPI_Transmit+0x20c>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_Transmit+0x212>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036d2:	e029      	b.n	8003728 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1c9      	bne.n	8003672 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fbcc 	bl	8003e80 <SPI_EndRxTxTransaction>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e003      	b.n	8003728 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003730:	7ffb      	ldrb	r3, [r7, #31]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b088      	sub	sp, #32
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d002      	beq.n	8003760 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800375e:	e0fb      	b.n	8003958 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003768:	d112      	bne.n	8003790 <HAL_SPI_Receive+0x56>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10e      	bne.n	8003790 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2204      	movs	r2, #4
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8ef 	bl	800396a <HAL_SPI_TransmitReceive>
 800378c:	4603      	mov	r3, r0
 800378e:	e0e8      	b.n	8003962 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_SPI_Receive+0x64>
 800379a:	2302      	movs	r3, #2
 800379c:	e0e1      	b.n	8003962 <HAL_SPI_Receive+0x228>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a6:	f7fe fc8b 	bl	80020c0 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_SPI_Receive+0x7e>
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037bc:	e0cc      	b.n	8003958 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2204      	movs	r2, #4
 80037c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003804:	d10f      	bne.n	8003826 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d007      	beq.n	8003844 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d16a      	bne.n	8003922 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800384c:	e032      	b.n	80038b4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d115      	bne.n	8003888 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f103 020c 	add.w	r2, r3, #12
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	7812      	ldrb	r2, [r2, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003886:	e015      	b.n	80038b4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003888:	f7fe fc1a 	bl	80020c0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d803      	bhi.n	80038a0 <HAL_SPI_Receive+0x166>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d102      	bne.n	80038a6 <HAL_SPI_Receive+0x16c>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80038b2:	e051      	b.n	8003958 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1c7      	bne.n	800384e <HAL_SPI_Receive+0x114>
 80038be:	e035      	b.n	800392c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d113      	bne.n	80038f6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	b292      	uxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038f4:	e015      	b.n	8003922 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f6:	f7fe fbe3 	bl	80020c0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d803      	bhi.n	800390e <HAL_SPI_Receive+0x1d4>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d102      	bne.n	8003914 <HAL_SPI_Receive+0x1da>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003920:	e01a      	b.n	8003958 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1c9      	bne.n	80038c0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fa53 	bl	8003ddc <SPI_EndRxTransaction>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
 800394e:	e003      	b.n	8003958 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	; 0x30
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003978:	2301      	movs	r3, #1
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x26>
 800398c:	2302      	movs	r3, #2
 800398e:	e198      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x358>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003998:	f7fe fb92 	bl	80020c0 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d00f      	beq.n	80039da <HAL_SPI_TransmitReceive+0x70>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c0:	d107      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x68>
 80039ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
 80039d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039d8:	e16d      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x82>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x82>
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f2:	e160      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d003      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2205      	movs	r2, #5
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	887a      	ldrh	r2, [r7, #2]
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d007      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a64:	d17c      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x10a>
 8003a6e:	8b7b      	ldrh	r3, [r7, #26]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d16a      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	881a      	ldrh	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a98:	e057      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x176>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x176>
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d113      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d119      	bne.n	8003b22 <HAL_SPI_TransmitReceive+0x1b8>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d014      	beq.n	8003b22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b22:	f7fe facd 	bl	80020c0 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d80b      	bhi.n	8003b4a <HAL_SPI_TransmitReceive+0x1e0>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d007      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b48:	e0b5      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1a2      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x130>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d19d      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x130>
 8003b5e:	e080      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x204>
 8003b68:	8b7b      	ldrh	r3, [r7, #26]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d16f      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b94:	e05b      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d11c      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x274>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <HAL_SPI_TransmitReceive+0x274>
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d114      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	7812      	ldrb	r2, [r2, #0]
 8003bc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x2b6>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d014      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c20:	f7fe fa4e 	bl	80020c0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d803      	bhi.n	8003c38 <HAL_SPI_TransmitReceive+0x2ce>
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d102      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x2d4>
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c4c:	e033      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d19e      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x22c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d199      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f90a 	bl	8003e80 <SPI_EndRxTxTransaction>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d006      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c7e:	e01a      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cac:	e003      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fe f9f0 	bl	80020c0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fe f9e8 	bl	80020c0 <HAL_GetTick>
 8003cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e054      	b.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d050      	beq.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0c:	f7fe f9d8 	bl	80020c0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d902      	bls.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13d      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3a:	d111      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	d004      	beq.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d107      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d68:	d10f      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e017      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d19b      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df0:	d111      	bne.n	8003e16 <SPI_EndRxTransaction+0x3a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfa:	d004      	beq.n	8003e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e04:	d107      	bne.n	8003e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1e:	d117      	bne.n	8003e50 <SPI_EndRxTransaction+0x74>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d112      	bne.n	8003e50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2101      	movs	r1, #1
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff ff49 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01a      	beq.n	8003e76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e013      	b.n	8003e78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff ff36 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f043 0220 	orr.w	r2, r3, #32
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e000      	b.n	8003e78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2200      	movs	r2, #0
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff ff18 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e000      	b.n	8003eb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fb74 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fa7c 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e03f      	b.n	8003ff4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d00e      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x62>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_TIM_Base_Start_IT+0xa8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a16      	ldr	r2, [pc, #88]	; (8004008 <HAL_TIM_Base_Start_IT+0xac>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x62>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_TIM_Base_Start_IT+0xb0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d111      	bne.n	8003fe2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d010      	beq.n	8003ff2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	e007      	b.n	8003ff2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00

08004010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0202 	mvn.w	r2, #2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9b4 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9a7 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9b6 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0204 	mvn.w	r2, #4
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f98a 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f97d 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f98c 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f960 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f953 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f962 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f936 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f929 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f938 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0201 	mvn.w	r2, #1
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc f9da 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa8d 	bl	80046da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8fc 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa58 	bl	80046c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIM_ConfigClockSource+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e0b4      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x172>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b70      	cmp	r3, #112	; 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004290:	2b70      	cmp	r3, #112	; 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b60      	cmp	r3, #96	; 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b60      	cmp	r3, #96	; 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b50      	cmp	r3, #80	; 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xfa>
 80042a0:	2b50      	cmp	r3, #80	; 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x13a>
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b30      	cmp	r3, #48	; 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f000 f972 	bl	80045be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f000 f95b 	bl	80045be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 f8d2 	bl	80044d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f929 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f000 f8f0 	bl	800452c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	; 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f919 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f8b2 	bl	80044d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f909 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 f900 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2d      	ldr	r2, [pc, #180]	; (80044c0 <TIM_Base_SetConfig+0xc8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00f      	beq.n	8004430 <TIM_Base_SetConfig+0x38>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d00b      	beq.n	8004430 <TIM_Base_SetConfig+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <TIM_Base_SetConfig+0xcc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <TIM_Base_SetConfig+0x38>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <TIM_Base_SetConfig+0xd0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a28      	ldr	r2, [pc, #160]	; (80044cc <TIM_Base_SetConfig+0xd4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d108      	bne.n	8004442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <TIM_Base_SetConfig+0xc8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00f      	beq.n	800446a <TIM_Base_SetConfig+0x72>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x72>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <TIM_Base_SetConfig+0xcc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x72>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <TIM_Base_SetConfig+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x72>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a19      	ldr	r2, [pc, #100]	; (80044cc <TIM_Base_SetConfig+0xd4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <TIM_Base_SetConfig+0xc8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00

080044d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f023 0201 	bic.w	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f023 030a 	bic.w	r3, r3, #10
 800450c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	031b      	lsls	r3, r3, #12
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004568:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f043 0307 	orr.w	r3, r3, #7
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	609a      	str	r2, [r3, #8]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e04b      	b.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d00e      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10c      	bne.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00

080046c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e042      	b.n	8004784 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc ff9c 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fd5d 	bl	80051f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d121      	bne.n	80047ea <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_UART_Transmit_IT+0x26>
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e01a      	b.n	80047ec <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	4613      	mov	r3, r2
 8004802:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b20      	cmp	r3, #32
 800480e:	d112      	bne.n	8004836 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_UART_Receive_IT+0x26>
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e00b      	b.n	8004838 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	461a      	mov	r2, r3
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fb0b 	bl	8004e48 <UART_Start_Receive_IT>
 8004832:	4603      	mov	r3, r0
 8004834:	e000      	b.n	8004838 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	d14a      	bne.n	80048f0 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e043      	b.n	80048f2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	461a      	mov	r2, r3
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fae3 	bl	8004e48 <UART_Start_Receive_IT>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12c      	bne.n	80048ea <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b01      	cmp	r3, #1
 8004896:	d125      	bne.n	80048e4 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	617b      	str	r3, [r7, #20]
   return(result);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f043 0310 	orr.w	r3, r3, #16
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ce:	627a      	str	r2, [r7, #36]	; 0x24
 80048d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6a39      	ldr	r1, [r7, #32]
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80048e2:	e002      	b.n	80048ea <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80048ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048ee:	e000      	b.n	80048f2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b0ba      	sub	sp, #232	; 0xe8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004922:	2300      	movs	r3, #0
 8004924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800493a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_UART_IRQHandler+0x66>
 800494e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb8a 	bl	8005074 <UART_Receive_IT>
      return;
 8004960:	e25b      	b.n	8004e1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80de 	beq.w	8004b28 <HAL_UART_IRQHandler+0x22c>
 800496c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80d1 	beq.w	8004b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_UART_IRQHandler+0xae>
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HAL_UART_IRQHandler+0xd2>
 80049b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_UART_IRQHandler+0xf6>
 80049da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <HAL_UART_IRQHandler+0x126>
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f043 0208 	orr.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 81f2 	beq.w	8004e10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_UART_IRQHandler+0x14e>
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fb15 	bl	8005074 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <HAL_UART_IRQHandler+0x17a>
 8004a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d04f      	beq.n	8004b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa1f 	bl	8004eba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d041      	beq.n	8004b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3314      	adds	r3, #20
 8004a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1d9      	bne.n	8004a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d013      	beq.n	8004b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	4a7e      	ldr	r2, [pc, #504]	; (8004cdc <HAL_UART_IRQHandler+0x3e0>)
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fd fc5e 	bl	80023ac <HAL_DMA_Abort_IT>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d016      	beq.n	8004b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e00e      	b.n	8004b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f98a 	bl	8004e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	e00a      	b.n	8004b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f986 	bl	8004e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b14:	e006      	b.n	8004b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f982 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b22:	e175      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	bf00      	nop
    return;
 8004b26:	e173      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f040 814f 	bne.w	8004dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8148 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8141 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80b6 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8145 	beq.w	8004e14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b92:	429a      	cmp	r2, r3
 8004b94:	f080 813e 	bcs.w	8004e14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	f000 8088 	beq.w	8004cbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bd8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004be4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1d9      	bne.n	8004bac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e1      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e3      	bne.n	8004c34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	f023 0310 	bic.w	r3, r3, #16
 8004c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ca0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e3      	bne.n	8004c7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd fb3d 	bl	8002336 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8ad 	bl	8004e32 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cd8:	e09c      	b.n	8004e14 <HAL_UART_IRQHandler+0x518>
 8004cda:	bf00      	nop
 8004cdc:	08004f7f 	.word	0x08004f7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 808e 	beq.w	8004e18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8089 	beq.w	8004e18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e3      	bne.n	8004d06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3314      	adds	r3, #20
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d62:	633a      	str	r2, [r7, #48]	; 0x30
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e3      	bne.n	8004d3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0310 	bic.w	r3, r3, #16
 8004d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	69b9      	ldr	r1, [r7, #24]
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	617b      	str	r3, [r7, #20]
   return(result);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e3      	bne.n	8004d84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f832 	bl	8004e32 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dce:	e023      	b.n	8004e18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d009      	beq.n	8004df0 <HAL_UART_IRQHandler+0x4f4>
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8dc 	bl	8004fa6 <UART_Transmit_IT>
    return;
 8004dee:	e014      	b.n	8004e1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <HAL_UART_IRQHandler+0x51e>
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f91b 	bl	8005044 <UART_EndTransmit_IT>
    return;
 8004e0e:	e004      	b.n	8004e1a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e10:	bf00      	nop
 8004e12:	e002      	b.n	8004e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e14:	bf00      	nop
 8004e16:	e000      	b.n	8004e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e18:	bf00      	nop
  }
}
 8004e1a:	37e8      	adds	r7, #232	; 0xe8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2222      	movs	r2, #34	; 0x22
 8004e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0220 	orr.w	r2, r2, #32
 8004eac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b095      	sub	sp, #84	; 0x54
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee2:	643a      	str	r2, [r7, #64]	; 0x40
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d119      	bne.n	8004f66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f023 0310 	bic.w	r3, r3, #16
 8004f48:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f52:	61ba      	str	r2, [r7, #24]
 8004f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6979      	ldr	r1, [r7, #20]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f74:	bf00      	nop
 8004f76:	3754      	adds	r7, #84	; 0x54
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff ff41 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b21      	cmp	r3, #33	; 0x21
 8004fb8:	d13e      	bne.n	8005038 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d114      	bne.n	8004fee <UART_Transmit_IT+0x48>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d110      	bne.n	8004fee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	1c9a      	adds	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]
 8004fec:	e008      	b.n	8005000 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6211      	str	r1, [r2, #32]
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29b      	uxth	r3, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4619      	mov	r1, r3
 800500e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10f      	bne.n	8005034 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005022:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005032:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fb fbdf 	bl	8000828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08c      	sub	sp, #48	; 0x30
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b22      	cmp	r3, #34	; 0x22
 8005086:	f040 80ae 	bne.w	80051e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	d117      	bne.n	80050c4 <UART_Receive_IT+0x50>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d113      	bne.n	80050c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
 80050c2:	e026      	b.n	8005112 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d007      	beq.n	80050e8 <UART_Receive_IT+0x74>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <UART_Receive_IT+0x82>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e008      	b.n	8005108 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005102:	b2da      	uxtb	r2, r3
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29b      	uxth	r3, r3
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4619      	mov	r1, r3
 8005120:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005122:	2b00      	cmp	r3, #0
 8005124:	d15d      	bne.n	80051e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0220 	bic.w	r2, r2, #32
 8005134:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005144:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	d135      	bne.n	80051d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	613b      	str	r3, [r7, #16]
   return(result);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f023 0310 	bic.w	r3, r3, #16
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	623a      	str	r2, [r7, #32]
 8005194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	69f9      	ldr	r1, [r7, #28]
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e5      	bne.n	8005172 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d10a      	bne.n	80051ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fe2e 	bl	8004e32 <HAL_UARTEx_RxEventCallback>
 80051d6:	e002      	b.n	80051de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fb fa55 	bl	8000688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e002      	b.n	80051e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e000      	b.n	80051e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	; 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800522a:	f023 030c 	bic.w	r3, r3, #12
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	430b      	orrs	r3, r1
 8005236:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <UART_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d103      	bne.n	8005260 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005258:	f7fe f876 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	e002      	b.n	8005266 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe f85e 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 8005264:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009a      	lsls	r2, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <UART_SetConfig+0x118>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	0119      	lsls	r1, r3, #4
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009a      	lsls	r2, r3, #2
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	fbb2 f2f3 	udiv	r2, r2, r3
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <UART_SetConfig+0x118>)
 800529e:	fba3 0302 	umull	r0, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2064      	movs	r0, #100	; 0x64
 80052a6:	fb00 f303 	mul.w	r3, r0, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	3332      	adds	r3, #50	; 0x32
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <UART_SetConfig+0x118>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052bc:	4419      	add	r1, r3
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009a      	lsls	r2, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <UART_SetConfig+0x118>)
 80052d6:	fba3 0302 	umull	r0, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2064      	movs	r0, #100	; 0x64
 80052de:	fb00 f303 	mul.w	r3, r0, r3
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	3332      	adds	r3, #50	; 0x32
 80052e8:	4a07      	ldr	r2, [pc, #28]	; (8005308 <UART_SetConfig+0x118>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	f003 020f 	and.w	r2, r3, #15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	440a      	add	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40013800 	.word	0x40013800
 8005308:	51eb851f 	.word	0x51eb851f

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	2600      	movs	r6, #0
 8005310:	4d0c      	ldr	r5, [pc, #48]	; (8005344 <__libc_init_array+0x38>)
 8005312:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	f000 f822 	bl	8005364 <_init>
 8005320:	2600      	movs	r6, #0
 8005322:	4d0a      	ldr	r5, [pc, #40]	; (800534c <__libc_init_array+0x40>)
 8005324:	4c0a      	ldr	r4, [pc, #40]	; (8005350 <__libc_init_array+0x44>)
 8005326:	1b64      	subs	r4, r4, r5
 8005328:	10a4      	asrs	r4, r4, #2
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	080055bc 	.word	0x080055bc
 8005348:	080055bc 	.word	0x080055bc
 800534c:	080055bc 	.word	0x080055bc
 8005350:	080055c0 	.word	0x080055c0

08005354 <memset>:
 8005354:	4603      	mov	r3, r0
 8005356:	4402      	add	r2, r0
 8005358:	4293      	cmp	r3, r2
 800535a:	d100      	bne.n	800535e <memset+0xa>
 800535c:	4770      	bx	lr
 800535e:	f803 1b01 	strb.w	r1, [r3], #1
 8005362:	e7f9      	b.n	8005358 <memset+0x4>

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
