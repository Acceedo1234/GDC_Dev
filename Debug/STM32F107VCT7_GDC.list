
STM32F107VCT7_GDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004cb0  08004cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee8  08004ee8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef0  08004ef0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004f04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004f04  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001085d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002496  00000000  00000000  00030892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00032d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00033c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef95  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011922  00000000  00000000  00053aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9359  00000000  00000000  000653cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  0011e778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004c98 	.word	0x08004c98

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004c98 	.word	0x08004c98

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <TimerApplicationInit>:
uint8_t Flag5msTM2;

extern uint16_t Production;

void TimerApplicationInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <TimerApplicationInit+0x14>)
 8000532:	f003 fa55 	bl	80039e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <TimerApplicationInit+0x18>)
 8000538:	f003 fa52 	bl	80039e0 <HAL_TIM_Base_Start_IT>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000c0 	.word	0x200000c0
 8000544:	20000108 	.word	0x20000108

08000548 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d10f      	bne.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(++Count5ms >= 5)
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d905      	bls.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			Flag5msTM2 = 1;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
			Count5ms=0;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim == &htim3)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d11f      	bne.n	80005c0 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if(++Count1Sec >= 10)
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b09      	cmp	r3, #9
 8000592:	d913      	bls.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			//HAL_GPIO_TogglePin(GPIOD,Relay_1_Pin);
			Count1Sec=0;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
			Flag1Sec = 1;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
			if(++Production > 1000){Production=0;}
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005aa:	801a      	strh	r2, [r3, #0]
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b4:	d902      	bls.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x74>
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
		}
		InputOutputTest1();
 80005bc:	f000 f826 	bl	800060c <InputOutputTest1>
	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000c0 	.word	0x200000c0
 80005cc:	20000028 	.word	0x20000028
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	20000108 	.word	0x20000108
 80005d8:	20000029 	.word	0x20000029
 80005dc:	2000002b 	.word	0x2000002b
 80005e0:	20000066 	.word	0x20000066

080005e4 <InputOutputTest>:

void InputOutputTest(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <InputOutputTest+0x20>)
 80005f0:	f001 fec1 	bl	8002376 <HAL_GPIO_WritePin>
	                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <InputOutputTest+0x24>)
 80005fc:	f001 febb 	bl	8002376 <HAL_GPIO_WritePin>

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40011400 	.word	0x40011400
 8000608:	40011000 	.word	0x40011000

0800060c <InputOutputTest1>:

void InputOutputTest1(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin (GPIOA, CycleStart_Switch_Pin))
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <InputOutputTest1+0x24>)
 8000614:	f001 fe98 	bl	8002348 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <InputOutputTest1+0x1a>
	{
		CycleStart_Switch = 1;
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <InputOutputTest1+0x28>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		CycleStart_Switch = 0;
	}
}
 8000624:	e002      	b.n	800062c <InputOutputTest1+0x20>
		CycleStart_Switch = 0;
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <InputOutputTest1+0x28>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010800 	.word	0x40010800
 8000634:	2000002a 	.word	0x2000002a

08000638 <gdc_businesslogic>:

Hw_Inputs input;
Hw_Outputs output;
uint16_t Inputs_Status;
void gdc_businesslogic(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/*Read the inputs*/
	input.Auto_Manual 			=	HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	488f      	ldr	r0, [pc, #572]	; (8000880 <gdc_businesslogic+0x248>)
 8000642:	f001 fe81 	bl	8002348 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b8e      	ldr	r3, [pc, #568]	; (8000884 <gdc_businesslogic+0x24c>)
 800064c:	701a      	strb	r2, [r3, #0]
	Inputs_Status = Inputs_Status |(input.Auto_Manual <<0);
 800064e:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <gdc_businesslogic+0x24c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b8c      	ldr	r3, [pc, #560]	; (8000888 <gdc_businesslogic+0x250>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4313      	orrs	r3, r2
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b8a      	ldr	r3, [pc, #552]	; (8000888 <gdc_businesslogic+0x250>)
 800065e:	801a      	strh	r2, [r3, #0]
	input.cycleStart 			=	HAL_GPIO_ReadPin(GPIOB,CycleStart_Switch_Pin);
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4887      	ldr	r0, [pc, #540]	; (8000880 <gdc_businesslogic+0x248>)
 8000664:	f001 fe70 	bl	8002348 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b85      	ldr	r3, [pc, #532]	; (8000884 <gdc_businesslogic+0x24c>)
 800066e:	705a      	strb	r2, [r3, #1]
	Inputs_Status = Inputs_Status |(input.cycleStart <<1);
 8000670:	4b84      	ldr	r3, [pc, #528]	; (8000884 <gdc_businesslogic+0x24c>)
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b21a      	sxth	r2, r3
 8000678:	4b83      	ldr	r3, [pc, #524]	; (8000888 <gdc_businesslogic+0x250>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b21b      	sxth	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b21b      	sxth	r3, r3
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b80      	ldr	r3, [pc, #512]	; (8000888 <gdc_businesslogic+0x250>)
 8000686:	801a      	strh	r2, [r3, #0]
	input.Emergency 			=	HAL_GPIO_ReadPin(GPIOB,Emergency_Switch_Pin);
 8000688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068c:	487c      	ldr	r0, [pc, #496]	; (8000880 <gdc_businesslogic+0x248>)
 800068e:	f001 fe5b 	bl	8002348 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b7b      	ldr	r3, [pc, #492]	; (8000884 <gdc_businesslogic+0x24c>)
 8000698:	709a      	strb	r2, [r3, #2]
	Inputs_Status = Inputs_Status |(input.Emergency <<2);
 800069a:	4b7a      	ldr	r3, [pc, #488]	; (8000884 <gdc_businesslogic+0x24c>)
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	4b79      	ldr	r3, [pc, #484]	; (8000888 <gdc_businesslogic+0x250>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b76      	ldr	r3, [pc, #472]	; (8000888 <gdc_businesslogic+0x250>)
 80006b0:	801a      	strh	r2, [r3, #0]
	input.Ram_close_switch 		=	HAL_GPIO_ReadPin(GPIOB,RampClose_Switch_Pin);
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4872      	ldr	r0, [pc, #456]	; (8000880 <gdc_businesslogic+0x248>)
 80006b8:	f001 fe46 	bl	8002348 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b70      	ldr	r3, [pc, #448]	; (8000884 <gdc_businesslogic+0x24c>)
 80006c2:	70da      	strb	r2, [r3, #3]
	Inputs_Status = Inputs_Status |(input.Ram_close_switch <<3);
 80006c4:	4b6f      	ldr	r3, [pc, #444]	; (8000884 <gdc_businesslogic+0x24c>)
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	4b6e      	ldr	r3, [pc, #440]	; (8000888 <gdc_businesslogic+0x250>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b6b      	ldr	r3, [pc, #428]	; (8000888 <gdc_businesslogic+0x250>)
 80006da:	801a      	strh	r2, [r3, #0]
	input.Ram_Open_Switch 		=	HAL_GPIO_ReadPin(GPIOB,RampOpen_Switch_Pin);
 80006dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e0:	4867      	ldr	r0, [pc, #412]	; (8000880 <gdc_businesslogic+0x248>)
 80006e2:	f001 fe31 	bl	8002348 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b66      	ldr	r3, [pc, #408]	; (8000884 <gdc_businesslogic+0x24c>)
 80006ec:	711a      	strb	r2, [r3, #4]
	Inputs_Status = Inputs_Status |(input.Ram_Open_Switch <<4);
 80006ee:	4b65      	ldr	r3, [pc, #404]	; (8000884 <gdc_businesslogic+0x24c>)
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	4b64      	ldr	r3, [pc, #400]	; (8000888 <gdc_businesslogic+0x250>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b61      	ldr	r3, [pc, #388]	; (8000888 <gdc_businesslogic+0x250>)
 8000704:	801a      	strh	r2, [r3, #0]
	input.Tilting_Up_Switch 	=	HAL_GPIO_ReadPin(GPIOB,TiltingUp_Switch_Pin);
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	485d      	ldr	r0, [pc, #372]	; (8000880 <gdc_businesslogic+0x248>)
 800070c:	f001 fe1c 	bl	8002348 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <gdc_businesslogic+0x24c>)
 8000716:	715a      	strb	r2, [r3, #5]
	Inputs_Status = Inputs_Status |(input.Tilting_Up_Switch <<5);
 8000718:	4b5a      	ldr	r3, [pc, #360]	; (8000884 <gdc_businesslogic+0x24c>)
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	015b      	lsls	r3, r3, #5
 800071e:	b21a      	sxth	r2, r3
 8000720:	4b59      	ldr	r3, [pc, #356]	; (8000888 <gdc_businesslogic+0x250>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b21b      	sxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b21b      	sxth	r3, r3
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b56      	ldr	r3, [pc, #344]	; (8000888 <gdc_businesslogic+0x250>)
 800072e:	801a      	strh	r2, [r3, #0]
	input.Tilting_down_switch 	=	HAL_GPIO_ReadPin(GPIOB,TiltingDown_Switch_Pin);
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	4852      	ldr	r0, [pc, #328]	; (8000880 <gdc_businesslogic+0x248>)
 8000736:	f001 fe07 	bl	8002348 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b51      	ldr	r3, [pc, #324]	; (8000884 <gdc_businesslogic+0x24c>)
 8000740:	719a      	strb	r2, [r3, #6]
	Inputs_Status = Inputs_Status |(input.Tilting_down_switch <<6);
 8000742:	4b50      	ldr	r3, [pc, #320]	; (8000884 <gdc_businesslogic+0x24c>)
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	019b      	lsls	r3, r3, #6
 8000748:	b21a      	sxth	r2, r3
 800074a:	4b4f      	ldr	r3, [pc, #316]	; (8000888 <gdc_businesslogic+0x250>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <gdc_businesslogic+0x250>)
 8000758:	801a      	strh	r2, [r3, #0]
	input.Ejection_In 			=	HAL_GPIO_ReadPin(GPIOB,EjectionIn_Switch_Pin);
 800075a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075e:	4848      	ldr	r0, [pc, #288]	; (8000880 <gdc_businesslogic+0x248>)
 8000760:	f001 fdf2 	bl	8002348 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b46      	ldr	r3, [pc, #280]	; (8000884 <gdc_businesslogic+0x24c>)
 800076a:	71da      	strb	r2, [r3, #7]
	Inputs_Status = Inputs_Status |(input.Ejection_In <<7);
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <gdc_businesslogic+0x24c>)
 800076e:	79db      	ldrb	r3, [r3, #7]
 8000770:	01db      	lsls	r3, r3, #7
 8000772:	b21a      	sxth	r2, r3
 8000774:	4b44      	ldr	r3, [pc, #272]	; (8000888 <gdc_businesslogic+0x250>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b21b      	sxth	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b21b      	sxth	r3, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <gdc_businesslogic+0x250>)
 8000782:	801a      	strh	r2, [r3, #0]
	input.Ejection_Output 		=	HAL_GPIO_ReadPin(GPIOB,EjectionOut_Switch_Pin);
 8000784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000788:	483d      	ldr	r0, [pc, #244]	; (8000880 <gdc_businesslogic+0x248>)
 800078a:	f001 fddd 	bl	8002348 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <gdc_businesslogic+0x24c>)
 8000794:	721a      	strb	r2, [r3, #8]
	Inputs_Status = Inputs_Status |(input.Ejection_Output <<8);
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <gdc_businesslogic+0x24c>)
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	b21a      	sxth	r2, r3
 800079e:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <gdc_businesslogic+0x250>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <gdc_businesslogic+0x250>)
 80007ac:	801a      	strh	r2, [r3, #0]
	input.Slider_In_Switch 		=	HAL_GPIO_ReadPin(GPIOB,SliderIn_Switch_Pin);
 80007ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b2:	4833      	ldr	r0, [pc, #204]	; (8000880 <gdc_businesslogic+0x248>)
 80007b4:	f001 fdc8 	bl	8002348 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <gdc_businesslogic+0x24c>)
 80007be:	725a      	strb	r2, [r3, #9]
	Inputs_Status = Inputs_Status |(input.Slider_In_Switch <<9);
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <gdc_businesslogic+0x24c>)
 80007c2:	7a5b      	ldrb	r3, [r3, #9]
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <gdc_businesslogic+0x250>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <gdc_businesslogic+0x250>)
 80007d6:	801a      	strh	r2, [r3, #0]
	input.Slider_Out_Switch 	=	HAL_GPIO_ReadPin(GPIOB,SliderOut_Pin);
 80007d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007dc:	4828      	ldr	r0, [pc, #160]	; (8000880 <gdc_businesslogic+0x248>)
 80007de:	f001 fdb3 	bl	8002348 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <gdc_businesslogic+0x24c>)
 80007e8:	729a      	strb	r2, [r3, #10]
	Inputs_Status = Inputs_Status |(input.Slider_Out_Switch <<10);
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <gdc_businesslogic+0x24c>)
 80007ec:	7a9b      	ldrb	r3, [r3, #10]
 80007ee:	029b      	lsls	r3, r3, #10
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <gdc_businesslogic+0x250>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <gdc_businesslogic+0x250>)
 8000800:	801a      	strh	r2, [r3, #0]
	input.Motor_Switch 			=	0;//HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <gdc_businesslogic+0x24c>)
 8000804:	2200      	movs	r2, #0
 8000806:	72da      	strb	r2, [r3, #11]
	Inputs_Status = Inputs_Status |(input.Motor_Switch <<11);
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <gdc_businesslogic+0x24c>)
 800080a:	7adb      	ldrb	r3, [r3, #11]
 800080c:	02db      	lsls	r3, r3, #11
 800080e:	b21a      	sxth	r2, r3
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <gdc_businesslogic+0x250>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <gdc_businesslogic+0x250>)
 800081e:	801a      	strh	r2, [r3, #0]
	input.Station_Conformation 	=	0;//HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <gdc_businesslogic+0x24c>)
 8000822:	2200      	movs	r2, #0
 8000824:	731a      	strb	r2, [r3, #12]
	Inputs_Status = Inputs_Status |(input.Station_Conformation <<12);
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <gdc_businesslogic+0x24c>)
 8000828:	7b1b      	ldrb	r3, [r3, #12]
 800082a:	031b      	lsls	r3, r3, #12
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <gdc_businesslogic+0x250>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <gdc_businesslogic+0x250>)
 800083c:	801a      	strh	r2, [r3, #0]
	input.Robo_Acknowledgment 	=	0;//HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <gdc_businesslogic+0x24c>)
 8000840:	2200      	movs	r2, #0
 8000842:	735a      	strb	r2, [r3, #13]
	Inputs_Status = Inputs_Status |(input.Robo_Acknowledgment <<13);
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <gdc_businesslogic+0x24c>)
 8000846:	7b5b      	ldrb	r3, [r3, #13]
 8000848:	035b      	lsls	r3, r3, #13
 800084a:	b21a      	sxth	r2, r3
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <gdc_businesslogic+0x250>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21b      	sxth	r3, r3
 8000856:	b29a      	uxth	r2, r3
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <gdc_businesslogic+0x250>)
 800085a:	801a      	strh	r2, [r3, #0]
	input.Ram_Close_Sensor 		=	0;//HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <gdc_businesslogic+0x24c>)
 800085e:	2200      	movs	r2, #0
 8000860:	739a      	strb	r2, [r3, #14]
	Inputs_Status = Inputs_Status |(input.Ram_Close_Sensor <<14);
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <gdc_businesslogic+0x24c>)
 8000864:	7b9b      	ldrb	r3, [r3, #14]
 8000866:	039b      	lsls	r3, r3, #14
 8000868:	b21a      	sxth	r2, r3
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <gdc_businesslogic+0x250>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21b      	sxth	r3, r3
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <gdc_businesslogic+0x250>)
 8000878:	801a      	strh	r2, [r3, #0]
	{
		case 0:

		break;
	}*/
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010c00 	.word	0x40010c00
 8000884:	20000030 	.word	0x20000030
 8000888:	20000040 	.word	0x20000040

0800088c <ModbusFrame>:
#define NO_OF_WRITEDATA  0x0A

uint16_t Production;

void ModbusFrame(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	switch(Config)
 8000890:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <ModbusFrame+0x170>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <ModbusFrame+0x12>
 8000898:	2b01      	cmp	r3, #1
 800089a:	d02f      	beq.n	80008fc <ModbusFrame+0x70>
 800089c:	e0a8      	b.n	80009f0 <ModbusFrame+0x164>
	{
		case  ReadMultileReg:
			bufftx[0] = SalveId;
 800089e:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <ModbusFrame+0x174>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_READMULTIPLEREG;
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <ModbusFrame+0x174>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_READ & 0xff00)>>8;
 80008aa:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <ModbusFrame+0x174>)
 80008ac:	2230      	movs	r2, #48	; 0x30
 80008ae:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_READ & 0xff);
 80008b0:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <ModbusFrame+0x174>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	70da      	strb	r2, [r3, #3]
			bufftx[4] = (NO_OF_READDATA & 0xff00)>>8;
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <ModbusFrame+0x174>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_READDATA & 0xff);
 80008bc:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <ModbusFrame+0x174>)
 80008be:	220a      	movs	r2, #10
 80008c0:	715a      	strb	r2, [r3, #5]

			CRC_value = ASCChecksum(bufftx,6);
 80008c2:	2106      	movs	r1, #6
 80008c4:	484e      	ldr	r0, [pc, #312]	; (8000a00 <ModbusFrame+0x174>)
 80008c6:	f000 f8a5 	bl	8000a14 <ASCChecksum>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <ModbusFrame+0x178>)
 80008d0:	801a      	strh	r2, [r3, #0]

			bufftx[6] = (CRC_value & 0xff);
 80008d2:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <ModbusFrame+0x178>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <ModbusFrame+0x174>)
 80008da:	719a      	strb	r2, [r3, #6]
			bufftx[7] = (CRC_value & 0xff00)>>8;
 80008dc:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <ModbusFrame+0x178>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <ModbusFrame+0x174>)
 80008e8:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(&huart1,bufftx,8);
 80008ea:	2208      	movs	r2, #8
 80008ec:	4944      	ldr	r1, [pc, #272]	; (8000a00 <ModbusFrame+0x174>)
 80008ee:	4846      	ldr	r0, [pc, #280]	; (8000a08 <ModbusFrame+0x17c>)
 80008f0:	f003 fc8e 	bl	8004210 <HAL_UART_Transmit_IT>
			Config = WriteMultipleReg;
 80008f4:	4b41      	ldr	r3, [pc, #260]	; (80009fc <ModbusFrame+0x170>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
		break;
 80008fa:	e07d      	b.n	80009f8 <ModbusFrame+0x16c>
		case WriteMultipleReg:
			bufftx[0] = SalveId;
 80008fc:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <ModbusFrame+0x174>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_WRITEMULTIPLEREG;
 8000902:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <ModbusFrame+0x174>)
 8000904:	2210      	movs	r2, #16
 8000906:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_WRITE & 0xff00)>>8;
 8000908:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <ModbusFrame+0x174>)
 800090a:	2220      	movs	r2, #32
 800090c:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_WRITE & 0xff);
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <ModbusFrame+0x174>)
 8000910:	2200      	movs	r2, #0
 8000912:	70da      	strb	r2, [r3, #3]

			bufftx[4] = (NO_OF_WRITEDATA & 0xff00)>>8;
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <ModbusFrame+0x174>)
 8000916:	2200      	movs	r2, #0
 8000918:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_WRITEDATA & 0xff);
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <ModbusFrame+0x174>)
 800091c:	220a      	movs	r2, #10
 800091e:	715a      	strb	r2, [r3, #5]

			bufftx[6] = NO_OF_WRITEDATA*2;
 8000920:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <ModbusFrame+0x174>)
 8000922:	2214      	movs	r2, #20
 8000924:	719a      	strb	r2, [r3, #6]

			bufftx[7] = (Production & 0xff00)>>8;
 8000926:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <ModbusFrame+0x180>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <ModbusFrame+0x174>)
 8000932:	71da      	strb	r2, [r3, #7]
			bufftx[8] = (Production & 0xff);
 8000934:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <ModbusFrame+0x180>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <ModbusFrame+0x174>)
 800093c:	721a      	strb	r2, [r3, #8]

			bufftx[9] = (0 & 0xff00)>>8;
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <ModbusFrame+0x174>)
 8000940:	2200      	movs	r2, #0
 8000942:	725a      	strb	r2, [r3, #9]
			bufftx[10] = (0 & 0xff);
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <ModbusFrame+0x174>)
 8000946:	2200      	movs	r2, #0
 8000948:	729a      	strb	r2, [r3, #10]

			bufftx[11] = (0 & 0xff00)>>8;
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <ModbusFrame+0x174>)
 800094c:	2200      	movs	r2, #0
 800094e:	72da      	strb	r2, [r3, #11]
			bufftx[12] = (0 & 0xff);
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <ModbusFrame+0x174>)
 8000952:	2200      	movs	r2, #0
 8000954:	731a      	strb	r2, [r3, #12]

			bufftx[12] = (Inputs_Status & 0xff00)>>8;
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <ModbusFrame+0x184>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <ModbusFrame+0x174>)
 8000962:	731a      	strb	r2, [r3, #12]
			bufftx[14] = (Inputs_Status & 0xff);
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <ModbusFrame+0x184>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <ModbusFrame+0x174>)
 800096c:	739a      	strb	r2, [r3, #14]

			bufftx[15] = (0 & 0xff00)>>8;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <ModbusFrame+0x174>)
 8000970:	2200      	movs	r2, #0
 8000972:	73da      	strb	r2, [r3, #15]
			bufftx[16] = (0 & 0xff);
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <ModbusFrame+0x174>)
 8000976:	2200      	movs	r2, #0
 8000978:	741a      	strb	r2, [r3, #16]

			bufftx[17] = (0 & 0xff00)>>8;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <ModbusFrame+0x174>)
 800097c:	2200      	movs	r2, #0
 800097e:	745a      	strb	r2, [r3, #17]
			bufftx[18] = (0 & 0xff);
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <ModbusFrame+0x174>)
 8000982:	2200      	movs	r2, #0
 8000984:	749a      	strb	r2, [r3, #18]

			bufftx[19] = (0 & 0xff00)>>8;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <ModbusFrame+0x174>)
 8000988:	2200      	movs	r2, #0
 800098a:	74da      	strb	r2, [r3, #19]
			bufftx[20] = (0 & 0xff);
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <ModbusFrame+0x174>)
 800098e:	2200      	movs	r2, #0
 8000990:	751a      	strb	r2, [r3, #20]

			bufftx[21] = (0 & 0xff00)>>8;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <ModbusFrame+0x174>)
 8000994:	2200      	movs	r2, #0
 8000996:	755a      	strb	r2, [r3, #21]
			bufftx[22] = (0 & 0xff);
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <ModbusFrame+0x174>)
 800099a:	2200      	movs	r2, #0
 800099c:	759a      	strb	r2, [r3, #22]

			bufftx[23] = (0 & 0xff00)>>8;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <ModbusFrame+0x174>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	75da      	strb	r2, [r3, #23]
			bufftx[24] = (0 & 0xff);
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <ModbusFrame+0x174>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	761a      	strb	r2, [r3, #24]

			bufftx[25] = (0 & 0xff00)>>8;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <ModbusFrame+0x174>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	765a      	strb	r2, [r3, #25]
			bufftx[26] = (0 & 0xff);
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <ModbusFrame+0x174>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	769a      	strb	r2, [r3, #26]
			CRC_value = ASCChecksum(bufftx,27);
 80009b6:	211b      	movs	r1, #27
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <ModbusFrame+0x174>)
 80009ba:	f000 f82b 	bl	8000a14 <ASCChecksum>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <ModbusFrame+0x178>)
 80009c4:	801a      	strh	r2, [r3, #0]

			bufftx[27] = (CRC_value & 0xff);
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <ModbusFrame+0x178>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <ModbusFrame+0x174>)
 80009ce:	76da      	strb	r2, [r3, #27]
			bufftx[28] = (CRC_value & 0xff00)>>8;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <ModbusFrame+0x178>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <ModbusFrame+0x174>)
 80009dc:	771a      	strb	r2, [r3, #28]
			HAL_UART_Transmit_IT(&huart1,bufftx,29);
 80009de:	221d      	movs	r2, #29
 80009e0:	4907      	ldr	r1, [pc, #28]	; (8000a00 <ModbusFrame+0x174>)
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <ModbusFrame+0x17c>)
 80009e4:	f003 fc14 	bl	8004210 <HAL_UART_Transmit_IT>
			Config = ReadMultileReg;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <ModbusFrame+0x170>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		break;
 80009ee:	e003      	b.n	80009f8 <ModbusFrame+0x16c>
		default:
			Config = ReadMultileReg;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <ModbusFrame+0x170>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		break;
 80009f6:	bf00      	nop
	}
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000062 	.word	0x20000062
 8000a00:	20000044 	.word	0x20000044
 8000a04:	20000064 	.word	0x20000064
 8000a08:	20000150 	.word	0x20000150
 8000a0c:	20000066 	.word	0x20000066
 8000a10:	20000040 	.word	0x20000040

08000a14 <ASCChecksum>:

uint16_t ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8000a20:	23ff      	movs	r3, #255	; 0xff
 8000a22:	73bb      	strb	r3, [r7, #14]
	uint8_t CRCRegHigh = 0xff;
 8000a24:	23ff      	movs	r3, #255	; 0xff
 8000a26:	737b      	strb	r3, [r7, #13]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	733b      	strb	r3, [r7, #12]
   	for(i=0;i < CheckSumBytes;i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	e013      	b.n	8000a5a <ASCChecksum+0x46>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	4053      	eors	r3, r2
 8000a3e:	72fb      	strb	r3, [r7, #11]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <ASCChecksum+0x68>)
 8000a44:	5cd2      	ldrb	r2, [r2, r3]
 8000a46:	7b7b      	ldrb	r3, [r7, #13]
 8000a48:	4053      	eors	r3, r2
 8000a4a:	73bb      	strb	r3, [r7, #14]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <ASCChecksum+0x6c>)
 8000a50:	5cd3      	ldrb	r3, [r2, r3]
 8000a52:	737b      	strb	r3, [r7, #13]
   	for(i=0;i < CheckSumBytes;i++)
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	3301      	adds	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	7bfa      	ldrb	r2, [r7, #15]
 8000a5c:	7b3b      	ldrb	r3, [r7, #12]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d3e7      	bcc.n	8000a32 <ASCChecksum+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	b29b      	uxth	r3, r3
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	08004cb0 	.word	0x08004cb0
 8000a80:	08004db0 	.word	0x08004db0

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f001 f804 	bl	8001a94 <HAL_Init>
  /* USER CODE END WHILE */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f83e 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f000 f98a 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a94:	f000 f8c4 	bl	8000c20 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a98:	f000 f90e 	bl	8000cb8 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000a9c:	f000 f88a 	bl	8000bb4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f958 	bl	8000d54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerApplicationInit();
 8000aa4:	f7ff fd42 	bl	800052c <TimerApplicationInit>
  W25qxx_Init();
 8000aa8:	f000 fcf0 	bl	800148c <W25qxx_Init>

  W25qxx_ReadSector(writeFlashBuf,0,0,1);
 8000aac:	2301      	movs	r3, #1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <main+0x7c>)
 8000ab4:	f000 ff8c 	bl	80019d0 <W25qxx_ReadSector>

  writeFlashBuf[0] = writeFlashBuf[0]+1;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <main+0x7c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <main+0x7c>)
 8000ac2:	701a      	strb	r2, [r3, #0]
  W25qxx_EraseSector(0);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 fdb3 	bl	8001630 <W25qxx_EraseSector>
  W25qxx_WriteSector(writeFlashBuf,0,0,1);
 8000aca:	2301      	movs	r3, #1
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <main+0x7c>)
 8000ad2:	f000 fe9d 	bl	8001810 <W25qxx_WriteSector>


 // HAL_UART_Receive_IT(&huart1,serial_1_buff, 1);

  InputOutputTest();
 8000ad6:	f7ff fd85 	bl	80005e4 <InputOutputTest>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(Flag5msTM2)
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <main+0x80>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <main+0x68>
	  {
		  Flag5msTM2=0;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <main+0x80>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
		  gdc_businesslogic();
 8000ae8:	f7ff fda6 	bl	8000638 <gdc_businesslogic>
	  }
	  if(Flag1Sec)
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <main+0x84>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f2      	beq.n	8000ada <main+0x56>
	  {
		  Flag1Sec=0;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <main+0x84>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
		  ModbusFrame();
 8000afa:	f7ff fec7 	bl	800088c <ModbusFrame>
	  if(Flag5msTM2)
 8000afe:	e7ec      	b.n	8000ada <main+0x56>
 8000b00:	20000198 	.word	0x20000198
 8000b04:	2000002c 	.word	0x2000002c
 8000b08:	2000002b 	.word	0x2000002b

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2238      	movs	r2, #56	; 0x38
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 f8b4 	bl	8004c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV6;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL12;
 8000b5a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 8000b60:	2310      	movs	r3, #16
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fc1d 	bl	80023a8 <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b74:	f000 f9f0 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 ff1e 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b9e:	f000 f9db 	bl	8000f58 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SystemClock_Config+0xa4>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3750      	adds	r7, #80	; 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	42420070 	.word	0x42420070

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2218      	movs	r2, #24
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f002 f913 	bl	8002e30 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 f9a2 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000068 	.word	0x20000068
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c46:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c66:	f002 fe6b 	bl	8003940 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c70:	f000 f972 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c82:	f003 f80f 	bl	8003ca4 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f000 f964 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_TIM2_Init+0x94>)
 8000c9e:	f003 f9ef 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 f956 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000c0 	.word	0x200000c0

08000cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000cdc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000cfe:	f002 fe1f 	bl	8003940 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d08:	f000 f926 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000d1a:	f002 ffc3 	bl	8003ca4 <HAL_TIM_ConfigClockSource>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d24:	f000 f918 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_TIM3_Init+0x94>)
 8000d36:	f003 f9a3 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f000 f90a 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000108 	.word	0x20000108
 8000d50:	40000400 	.word	0x40000400

08000d54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART1_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d8c:	f003 f9f0 	bl	8004170 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 f8df 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000150 	.word	0x20000150
 8000da4:	40013800 	.word	0x40013800

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b5f      	ldr	r3, [pc, #380]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a5e      	ldr	r2, [pc, #376]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b5c      	ldr	r3, [pc, #368]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd4:	4b59      	ldr	r3, [pc, #356]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a58      	ldr	r2, [pc, #352]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b4a      	ldr	r3, [pc, #296]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a46      	ldr	r2, [pc, #280]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e34:	2200      	movs	r2, #0
 8000e36:	f641 7110 	movw	r1, #7952	; 0x1f10
 8000e3a:	4841      	ldr	r0, [pc, #260]	; (8000f40 <MX_GPIO_Init+0x198>)
 8000e3c:	f001 fa9b 	bl	8002376 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e46:	483f      	ldr	r0, [pc, #252]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000e48:	f001 fa95 	bl	8002376 <HAL_GPIO_WritePin>
                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000e52:	483d      	ldr	r0, [pc, #244]	; (8000f48 <MX_GPIO_Init+0x1a0>)
 8000e54:	f001 fa8f 	bl	8002376 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e58:	f641 7310 	movw	r3, #7952	; 0x1f10
 8000e5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_GPIO_Init+0x198>)
 8000e72:	f001 f8e5 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : CycleStart_Switch_Pin SliderIn_Switch_Pin SliderOut_Pin EjectionOut_Switch_Pin
                           EjectionIn_Switch_Pin TiltingDown_Switch_Pin TiltingUp_Switch_Pin RampClose_Switch_Pin
                           RampOpen_Switch_Pin */
  GPIO_InitStruct.Pin = CycleStart_Switch_Pin|SliderIn_Switch_Pin|SliderOut_Pin|EjectionOut_Switch_Pin
 8000e76:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e7a:	617b      	str	r3, [r7, #20]
                          |EjectionIn_Switch_Pin|TiltingDown_Switch_Pin|TiltingUp_Switch_Pin|RampClose_Switch_Pin
                          |RampOpen_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4830      	ldr	r0, [pc, #192]	; (8000f4c <MX_GPIO_Init+0x1a4>)
 8000e8c:	f001 f8d8 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : Emergency_Switch_Pin Auto_Manual_Switch_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Pin|Auto_Manual_Switch_Pin;
 8000e90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	482a      	ldr	r0, [pc, #168]	; (8000f50 <MX_GPIO_Init+0x1a8>)
 8000ea6:	f001 f8cb 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorOn_Pin MotorOff_Pin RampOpen_Pin RampCLose_Pin
                           TiltingUp_Pin TiltingDown_Pin SkiderOut_Pin SliderIn_Pin */
  GPIO_InitStruct.Pin = MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
 8000eaa:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000eae:	617b      	str	r3, [r7, #20]
                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4820      	ldr	r0, [pc, #128]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000ec4:	f001 f8bc 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : EjectionOn_Pin EjectionOff_Pin RoboRelay_Pin PC9 */
  GPIO_InitStruct.Pin = EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin|GPIO_PIN_9;
 8000ec8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4819      	ldr	r0, [pc, #100]	; (8000f48 <MX_GPIO_Init+0x1a0>)
 8000ee2:	f001 f8ad 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_485_Tx_2_Pin */
  GPIO_InitStruct.Pin = UART_485_Tx_2_Pin;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UART_485_Tx_2_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4812      	ldr	r0, [pc, #72]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000efa:	f001 f8a1 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_Rx_485_2_Pin */
  GPIO_InitStruct.Pin = USART_Rx_485_2_Pin;
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_Rx_485_2_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000f12:	f001 f895 	bl	8002040 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_USART2_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_GPIO_Init+0x1ac>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <MX_GPIO_Init+0x1ac>)
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	6053      	str	r3, [r2, #4]

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	40011400 	.word	0x40011400
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40011800 	.word	0x40011800
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40010000 	.word	0x40010000

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_MspInit+0x58>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_MspInit+0x58>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d12f      	bne.n	8001040 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_SPI_MspInit+0x90>)
 8001024:	f001 f80c 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_SPI_MspInit+0x90>)
 800103c:	f001 f800 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013000 	.word	0x40013000
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d114      	bne.n	8001090 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	201c      	movs	r0, #28
 8001084:	f000 fe63 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001088:	201c      	movs	r0, #28
 800108a:	f000 fe7c 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800108e:	e018      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d113      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201d      	movs	r0, #29
 80010b8:	f000 fe49 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010bc:	201d      	movs	r0, #29
 80010be:	f000 fe62 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40000400 	.word	0x40000400

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a26      	ldr	r2, [pc, #152]	; (8001188 <HAL_UART_MspInit+0xb4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d145      	bne.n	8001180 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_UART_MspInit+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_UART_MspInit+0xb8>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_UART_MspInit+0xb8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_UART_MspInit+0xb8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4816      	ldr	r0, [pc, #88]	; (8001190 <HAL_UART_MspInit+0xbc>)
 8001138:	f000 ff82 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4810      	ldr	r0, [pc, #64]	; (8001190 <HAL_UART_MspInit+0xbc>)
 8001150:	f000 ff76 	bl	8002040 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_UART_MspInit+0xc0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_UART_MspInit+0xc0>)
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2025      	movs	r0, #37	; 0x25
 8001176:	f000 fdea 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800117a:	2025      	movs	r0, #37	; 0x25
 800117c:	f000 fe03 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013800 	.word	0x40013800
 800118c:	40021000 	.word	0x40021000
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40010000 	.word	0x40010000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 fc9f 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM2_IRQHandler+0x10>)
 80011ee:	f002 fc51 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000c0 	.word	0x200000c0

080011fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM3_IRQHandler+0x10>)
 8001202:	f002 fc47 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000108 	.word	0x20000108

08001210 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <USART1_IRQHandler+0x10>)
 8001216:	f003 f831 	bl	800427c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000150 	.word	0x20000150

08001224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff fff8 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001236:	490c      	ldr	r1, [pc, #48]	; (8001268 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <LoopFillZerobss+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800124c:	4c09      	ldr	r4, [pc, #36]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800125a:	f003 fcf1 	bl	8004c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fc11 	bl	8000a84 <main>
  bx lr
 8001262:	4770      	bx	lr
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800126c:	08004ef8 	.word	0x08004ef8
  ldr r2, =_sbss
 8001270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001274:	200001d0 	.word	0x200001d0

08001278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>
	...

0800127c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001286:	f107 020f 	add.w	r2, r7, #15
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <W25qxx_Spi+0x28>)
 8001294:	f002 f8ab 	bl	80033ee <HAL_SPI_TransmitReceive>
	return ret;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000068 	.word	0x20000068

080012a8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	4813      	ldr	r0, [pc, #76]	; (8001310 <W25qxx_ReadID+0x68>)
 80012c4:	f001 f857 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80012c8:	209f      	movs	r0, #159	; 0x9f
 80012ca:	f7ff ffd7 	bl	800127c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80012ce:	20a5      	movs	r0, #165	; 0xa5
 80012d0:	f7ff ffd4 	bl	800127c <W25qxx_Spi>
 80012d4:	4603      	mov	r3, r0
 80012d6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80012d8:	20a5      	movs	r0, #165	; 0xa5
 80012da:	f7ff ffcf 	bl	800127c <W25qxx_Spi>
 80012de:	4603      	mov	r3, r0
 80012e0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80012e2:	20a5      	movs	r0, #165	; 0xa5
 80012e4:	f7ff ffca 	bl	800127c <W25qxx_Spi>
 80012e8:	4603      	mov	r3, r0
 80012ea:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2110      	movs	r1, #16
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <W25qxx_ReadID+0x68>)
 80012f2:	f001 f840 	bl	8002376 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40010800 	.word	0x40010800

08001314 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2110      	movs	r1, #16
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <W25qxx_ReadUniqID+0x64>)
 8001320:	f001 f829 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001324:	204b      	movs	r0, #75	; 0x4b
 8001326:	f7ff ffa9 	bl	800127c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e005      	b.n	800133c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001330:	20a5      	movs	r0, #165	; 0xa5
 8001332:	f7ff ffa3 	bl	800127c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3301      	adds	r3, #1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d9f6      	bls.n	8001330 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	71bb      	strb	r3, [r7, #6]
 8001346:	e00b      	b.n	8001360 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001348:	79bc      	ldrb	r4, [r7, #6]
 800134a:	20a5      	movs	r0, #165	; 0xa5
 800134c:	f7ff ff96 	bl	800127c <W25qxx_Spi>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <W25qxx_ReadUniqID+0x68>)
 8001356:	4423      	add	r3, r4
 8001358:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	3301      	adds	r3, #1
 800135e:	71bb      	strb	r3, [r7, #6]
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d9f0      	bls.n	8001348 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2110      	movs	r1, #16
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <W25qxx_ReadUniqID+0x64>)
 800136c:	f001 f803 	bl	8002376 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	40010800 	.word	0x40010800
 800137c:	200001a4 	.word	0x200001a4

08001380 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2110      	movs	r1, #16
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <W25qxx_WriteEnable+0x28>)
 800138a:	f000 fff4 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800138e:	2006      	movs	r0, #6
 8001390:	f7ff ff74 	bl	800127c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2110      	movs	r1, #16
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <W25qxx_WriteEnable+0x28>)
 800139a:	f000 ffec 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fbda 	bl	8001b58 <HAL_Delay>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010800 	.word	0x40010800

080013ac <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2110      	movs	r1, #16
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <W25qxx_ReadStatusRegister+0x84>)
 80013c0:	f000 ffd9 	bl	8002376 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d10c      	bne.n	80013e4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80013ca:	2005      	movs	r0, #5
 80013cc:	f7ff ff56 	bl	800127c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80013d0:	20a5      	movs	r0, #165	; 0xa5
 80013d2:	f7ff ff53 	bl	800127c <W25qxx_Spi>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <W25qxx_ReadStatusRegister+0x88>)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80013e2:	e01b      	b.n	800141c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d10c      	bne.n	8001404 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80013ea:	2035      	movs	r0, #53	; 0x35
 80013ec:	f7ff ff46 	bl	800127c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80013f0:	20a5      	movs	r0, #165	; 0xa5
 80013f2:	f7ff ff43 	bl	800127c <W25qxx_Spi>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <W25qxx_ReadStatusRegister+0x88>)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001402:	e00b      	b.n	800141c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001404:	2015      	movs	r0, #21
 8001406:	f7ff ff39 	bl	800127c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800140a:	20a5      	movs	r0, #165	; 0xa5
 800140c:	f7ff ff36 	bl	800127c <W25qxx_Spi>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <W25qxx_ReadStatusRegister+0x88>)
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2110      	movs	r1, #16
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <W25qxx_ReadStatusRegister+0x84>)
 8001422:	f000 ffa8 	bl	8002376 <HAL_GPIO_WritePin>
	return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010800 	.word	0x40010800
 8001434:	200001a4 	.word	0x200001a4

08001438 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f000 fb8b 	bl	8001b58 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2110      	movs	r1, #16
 8001446:	480f      	ldr	r0, [pc, #60]	; (8001484 <W25qxx_WaitForWriteEnd+0x4c>)
 8001448:	f000 ff95 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800144c:	2005      	movs	r0, #5
 800144e:	f7ff ff15 	bl	800127c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001452:	20a5      	movs	r0, #165	; 0xa5
 8001454:	f7ff ff12 	bl	800127c <W25qxx_Spi>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <W25qxx_WaitForWriteEnd+0x50>)
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f000 fb78 	bl	8001b58 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <W25qxx_WaitForWriteEnd+0x50>)
 800146a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ed      	bne.n	8001452 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2110      	movs	r1, #16
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <W25qxx_WaitForWriteEnd+0x4c>)
 800147c:	f000 ff7b 	bl	8002376 <HAL_GPIO_WritePin>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010800 	.word	0x40010800
 8001488:	200001a4 	.word	0x200001a4

0800148c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001492:	4b65      	ldr	r3, [pc, #404]	; (8001628 <W25qxx_Init+0x19c>)
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800149a:	e002      	b.n	80014a2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 fb5b 	bl	8001b58 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80014a2:	f000 fb4f 	bl	8001b44 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b63      	cmp	r3, #99	; 0x63
 80014aa:	d9f7      	bls.n	800149c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2110      	movs	r1, #16
 80014b0:	485e      	ldr	r0, [pc, #376]	; (800162c <W25qxx_Init+0x1a0>)
 80014b2:	f000 ff60 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80014b6:	2064      	movs	r0, #100	; 0x64
 80014b8:	f000 fb4e 	bl	8001b58 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80014bc:	f7ff fef4 	bl	80012a8 <W25qxx_ReadID>
 80014c0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3b11      	subs	r3, #17
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d86c      	bhi.n	80015a6 <W25qxx_Init+0x11a>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <W25qxx_Init+0x48>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	08001599 	.word	0x08001599
 80014d8:	0800158b 	.word	0x0800158b
 80014dc:	0800157d 	.word	0x0800157d
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	08001561 	.word	0x08001561
 80014e8:	08001553 	.word	0x08001553
 80014ec:	08001545 	.word	0x08001545
 80014f0:	08001535 	.word	0x08001535
 80014f4:	08001525 	.word	0x08001525
 80014f8:	080015a7 	.word	0x080015a7
 80014fc:	080015a7 	.word	0x080015a7
 8001500:	080015a7 	.word	0x080015a7
 8001504:	080015a7 	.word	0x080015a7
 8001508:	080015a7 	.word	0x080015a7
 800150c:	080015a7 	.word	0x080015a7
 8001510:	08001515 	.word	0x08001515
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001514:	4b44      	ldr	r3, [pc, #272]	; (8001628 <W25qxx_Init+0x19c>)
 8001516:	220a      	movs	r2, #10
 8001518:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <W25qxx_Init+0x19c>)
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001522:	e046      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001524:	4b40      	ldr	r3, [pc, #256]	; (8001628 <W25qxx_Init+0x19c>)
 8001526:	2209      	movs	r2, #9
 8001528:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <W25qxx_Init+0x19c>)
 800152c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001530:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001532:	e03e      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001534:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <W25qxx_Init+0x19c>)
 8001536:	2208      	movs	r2, #8
 8001538:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <W25qxx_Init+0x19c>)
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001542:	e036      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <W25qxx_Init+0x19c>)
 8001546:	2207      	movs	r2, #7
 8001548:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <W25qxx_Init+0x19c>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001550:	e02f      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <W25qxx_Init+0x19c>)
 8001554:	2206      	movs	r2, #6
 8001556:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <W25qxx_Init+0x19c>)
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800155e:	e028      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <W25qxx_Init+0x19c>)
 8001562:	2205      	movs	r2, #5
 8001564:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <W25qxx_Init+0x19c>)
 8001568:	2220      	movs	r2, #32
 800156a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800156c:	e021      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <W25qxx_Init+0x19c>)
 8001570:	2204      	movs	r2, #4
 8001572:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <W25qxx_Init+0x19c>)
 8001576:	2210      	movs	r2, #16
 8001578:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800157a:	e01a      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <W25qxx_Init+0x19c>)
 800157e:	2203      	movs	r2, #3
 8001580:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <W25qxx_Init+0x19c>)
 8001584:	2208      	movs	r2, #8
 8001586:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001588:	e013      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <W25qxx_Init+0x19c>)
 800158c:	2202      	movs	r2, #2
 800158e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <W25qxx_Init+0x19c>)
 8001592:	2204      	movs	r2, #4
 8001594:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8001596:	e00c      	b.n	80015b2 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <W25qxx_Init+0x19c>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <W25qxx_Init+0x19c>)
 80015a0:	2202      	movs	r2, #2
 80015a2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80015a4:	e005      	b.n	80015b2 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <W25qxx_Init+0x19c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e036      	b.n	8001620 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <W25qxx_Init+0x19c>)
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <W25qxx_Init+0x19c>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <W25qxx_Init+0x19c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <W25qxx_Init+0x19c>)
 80015ca:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <W25qxx_Init+0x19c>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <W25qxx_Init+0x19c>)
 80015d2:	6912      	ldr	r2, [r2, #16]
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	4a13      	ldr	r2, [pc, #76]	; (8001628 <W25qxx_Init+0x19c>)
 80015da:	8952      	ldrh	r2, [r2, #10]
 80015dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <W25qxx_Init+0x19c>)
 80015e2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <W25qxx_Init+0x19c>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <W25qxx_Init+0x19c>)
 80015ec:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <W25qxx_Init+0x19c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <W25qxx_Init+0x19c>)
 80015f4:	6912      	ldr	r2, [r2, #16]
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <W25qxx_Init+0x19c>)
 80015fe:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001600:	f7ff fe88 	bl	8001314 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fed1 	bl	80013ac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff fece 	bl	80013ac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001610:	2003      	movs	r0, #3
 8001612:	f7ff fecb 	bl	80013ac <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <W25qxx_Init+0x19c>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001a4 	.word	0x200001a4
 800162c:	40010800 	.word	0x40010800

08001630 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8001638:	e002      	b.n	8001640 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f000 fa8c 	bl	8001b58 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <W25qxx_EraseSector+0xa8>)
 8001642:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001646:	2b01      	cmp	r3, #1
 8001648:	d0f7      	beq.n	800163a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <W25qxx_EraseSector+0xa8>)
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8001652:	f7ff fef1 	bl	8001438 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <W25qxx_EraseSector+0xa8>)
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8001662:	f7ff fe8d 	bl	8001380 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	481c      	ldr	r0, [pc, #112]	; (80016dc <W25qxx_EraseSector+0xac>)
 800166c:	f000 fe83 	bl	8002376 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <W25qxx_EraseSector+0xa8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b08      	cmp	r3, #8
 8001676:	d909      	bls.n	800168c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8001678:	2021      	movs	r0, #33	; 0x21
 800167a:	f7ff fdff 	bl	800127c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	0e1b      	lsrs	r3, r3, #24
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fdf9 	bl	800127c <W25qxx_Spi>
 800168a:	e002      	b.n	8001692 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800168c:	2020      	movs	r0, #32
 800168e:	f7ff fdf5 	bl	800127c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fdef 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fde9 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fde4 	bl	800127c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2110      	movs	r1, #16
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <W25qxx_EraseSector+0xac>)
 80016ba:	f000 fe5c 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80016be:	f7ff febb 	bl	8001438 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fa48 	bl	8001b58 <HAL_Delay>
	w25qxx.Lock = 0;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <W25qxx_EraseSector+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200001a4 	.word	0x200001a4
 80016dc:	40010800 	.word	0x40010800

080016e0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <W25qxx_SectorToPage+0x24>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <W25qxx_SectorToPage+0x24>)
 80016f4:	8952      	ldrh	r2, [r2, #10]
 80016f6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	200001a4 	.word	0x200001a4

08001708 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001716:	e002      	b.n	800171e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f000 fa1d 	bl	8001b58 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <W25qxx_WritePage+0xfc>)
 8001720:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001724:	2b01      	cmp	r3, #1
 8001726:	d0f7      	beq.n	8001718 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <W25qxx_WritePage+0xfc>)
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a33      	ldr	r2, [pc, #204]	; (8001804 <W25qxx_WritePage+0xfc>)
 8001738:	8952      	ldrh	r2, [r2, #10]
 800173a:	4293      	cmp	r3, r2
 800173c:	d802      	bhi.n	8001744 <W25qxx_WritePage+0x3c>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <W25qxx_WritePage+0xfc>)
 8001746:	895b      	ldrh	r3, [r3, #10]
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	4413      	add	r3, r2
 8001756:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <W25qxx_WritePage+0xfc>)
 8001758:	8952      	ldrh	r2, [r2, #10]
 800175a:	4293      	cmp	r3, r2
 800175c:	d905      	bls.n	800176a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <W25qxx_WritePage+0xfc>)
 8001760:	895b      	ldrh	r3, [r3, #10]
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800176a:	f7ff fe65 	bl	8001438 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800176e:	f7ff fe07 	bl	8001380 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2110      	movs	r1, #16
 8001776:	4824      	ldr	r0, [pc, #144]	; (8001808 <W25qxx_WritePage+0x100>)
 8001778:	f000 fdfd 	bl	8002376 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <W25qxx_WritePage+0xfc>)
 800177e:	895b      	ldrh	r3, [r3, #10]
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <W25qxx_WritePage+0xfc>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d909      	bls.n	80017aa <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8001796:	2012      	movs	r0, #18
 8001798:	f7ff fd70 	bl	800127c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	0e1b      	lsrs	r3, r3, #24
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd6a 	bl	800127c <W25qxx_Spi>
 80017a8:	e002      	b.n	80017b0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff fd66 	bl	800127c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fd60 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fd5a 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fd55 	bl	800127c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <W25qxx_WritePage+0x104>)
 80017dc:	f001 fbac 	bl	8002f38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2110      	movs	r1, #16
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <W25qxx_WritePage+0x100>)
 80017e6:	f000 fdc6 	bl	8002376 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80017ea:	f7ff fe25 	bl	8001438 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 f9b2 	bl	8001b58 <HAL_Delay>
	w25qxx.Lock = 0;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <W25qxx_WritePage+0xfc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001a4 	.word	0x200001a4
 8001808:	40010800 	.word	0x40010800
 800180c:	20000068 	.word	0x20000068

08001810 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d802      	bhi.n	800182e <W25qxx_WriteSector+0x1e>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d243      	bcs.n	80018c6 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	441a      	add	r2, r3
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d905      	bls.n	8001858 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	e001      	b.n	800185c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800185c:	68b8      	ldr	r0, [r7, #8]
 800185e:	f7ff ff3f 	bl	80016e0 <W25qxx_SectorToPage>
 8001862:	4602      	mov	r2, r0
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 8001866:	895b      	ldrh	r3, [r3, #10]
 8001868:	4619      	mov	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001870:	4413      	add	r3, r2
 8001872:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 8001876:	895b      	ldrh	r3, [r3, #10]
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001880:	fb01 f202 	mul.w	r2, r1, r2
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	69f9      	ldr	r1, [r7, #28]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ff3a 	bl	8001708 <W25qxx_WritePage>
		StartPage++;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	3301      	adds	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 800189c:	895b      	ldrh	r3, [r3, #10]
 800189e:	461a      	mov	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1a9a      	subs	r2, r3, r2
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	4413      	add	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <W25qxx_WriteSector+0xc0>)
 80018ac:	895b      	ldrh	r3, [r3, #10]
 80018ae:	461a      	mov	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dce1      	bgt.n	8001888 <W25qxx_WriteSector+0x78>
 80018c4:	e000      	b.n	80018c8 <W25qxx_WriteSector+0xb8>
		return;
 80018c6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001a4 	.word	0x200001a4

080018d4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80018e2:	e002      	b.n	80018ea <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 f937 	bl	8001b58 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 80018ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d0f7      	beq.n	80018e4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 80018fe:	895b      	ldrh	r3, [r3, #10]
 8001900:	461a      	mov	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4293      	cmp	r3, r2
 8001906:	d802      	bhi.n	800190e <W25qxx_ReadPage+0x3a>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 8001910:	895b      	ldrh	r3, [r3, #10]
 8001912:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 800191c:	8952      	ldrh	r2, [r2, #10]
 800191e:	4293      	cmp	r3, r2
 8001920:	d905      	bls.n	800192e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 8001924:	895b      	ldrh	r3, [r3, #10]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 8001930:	895b      	ldrh	r3, [r3, #10]
 8001932:	461a      	mov	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2110      	movs	r1, #16
 8001944:	4820      	ldr	r0, [pc, #128]	; (80019c8 <W25qxx_ReadPage+0xf4>)
 8001946:	f000 fd16 	bl	8002376 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d909      	bls.n	8001966 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8001952:	200c      	movs	r0, #12
 8001954:	f7ff fc92 	bl	800127c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	0e1b      	lsrs	r3, r3, #24
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fc8c 	bl	800127c <W25qxx_Spi>
 8001964:	e002      	b.n	800196c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8001966:	200b      	movs	r0, #11
 8001968:	f7ff fc88 	bl	800127c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fc82 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fc7c 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc77 	bl	800127c <W25qxx_Spi>
	W25qxx_Spi(0);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fc74 	bl	800127c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	68f9      	ldr	r1, [r7, #12]
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <W25qxx_ReadPage+0xf8>)
 800199e:	f001 fc0e 	bl	80031be <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2110      	movs	r1, #16
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <W25qxx_ReadPage+0xf4>)
 80019a8:	f000 fce5 	bl	8002376 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f000 f8d3 	bl	8001b58 <HAL_Delay>
	w25qxx.Lock = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <W25qxx_ReadPage+0xf0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200001a4 	.word	0x200001a4
 80019c8:	40010800 	.word	0x40010800
 80019cc:	20000068 	.word	0x20000068

080019d0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d802      	bhi.n	80019ee <W25qxx_ReadSector+0x1e>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80019f4:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d243      	bcs.n	8001a86 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	441a      	add	r2, r3
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d905      	bls.n	8001a18 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e001      	b.n	8001a1c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f7ff fe5f 	bl	80016e0 <W25qxx_SectorToPage>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 8001a26:	895b      	ldrh	r3, [r3, #10]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a30:	4413      	add	r3, r2
 8001a32:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 8001a36:	895b      	ldrh	r3, [r3, #10]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a40:	fb01 f202 	mul.w	r2, r1, r2
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	69f9      	ldr	r1, [r7, #28]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff ff40 	bl	80018d4 <W25qxx_ReadPage>
		StartPage++;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	3301      	adds	r3, #1
 8001a58:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 8001a5c:	895b      	ldrh	r3, [r3, #10]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1a9a      	subs	r2, r3, r2
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	4413      	add	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <W25qxx_ReadSector+0xc0>)
 8001a6c:	895b      	ldrh	r3, [r3, #10]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dce1      	bgt.n	8001a48 <W25qxx_ReadSector+0x78>
 8001a84:	e000      	b.n	8001a88 <W25qxx_ReadSector+0xb8>
		return;
 8001a86:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001a4 	.word	0x200001a4

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_Init+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x28>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f947 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fa58 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f95f 	bl	8001da2 <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 f927 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x20>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <HAL_IncTick+0x20>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	200001cc 	.word	0x200001cc

08001b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_GetTick+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	200001cc 	.word	0x200001cc

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffe0 	bl	8001b44 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d008      	beq.n	8001de4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e020      	b.n	8001e26 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 020e 	bic.w	r2, r2, #14
 8001df2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d005      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e0d6      	b.n	8002002 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020e 	bic.w	r2, r2, #14
 8001e62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_DMA_Abort_IT+0x1dc>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d958      	bls.n	8001f32 <HAL_DMA_Abort_IT+0x102>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a62      	ldr	r2, [pc, #392]	; (8002010 <HAL_DMA_Abort_IT+0x1e0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d04f      	beq.n	8001f2a <HAL_DMA_Abort_IT+0xfa>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <HAL_DMA_Abort_IT+0x1e4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d048      	beq.n	8001f26 <HAL_DMA_Abort_IT+0xf6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5f      	ldr	r2, [pc, #380]	; (8002018 <HAL_DMA_Abort_IT+0x1e8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d040      	beq.n	8001f20 <HAL_DMA_Abort_IT+0xf0>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	; (800201c <HAL_DMA_Abort_IT+0x1ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d038      	beq.n	8001f1a <HAL_DMA_Abort_IT+0xea>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_DMA_Abort_IT+0x1f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d030      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xe4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5b      	ldr	r2, [pc, #364]	; (8002024 <HAL_DMA_Abort_IT+0x1f4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d028      	beq.n	8001f0e <HAL_DMA_Abort_IT+0xde>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_DMA_Abort_IT+0x1dc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d020      	beq.n	8001f08 <HAL_DMA_Abort_IT+0xd8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_DMA_Abort_IT+0x1f8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d019      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_DMA_Abort_IT+0x1fc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d012      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xd0>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_DMA_Abort_IT+0x200>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00a      	beq.n	8001efa <HAL_DMA_Abort_IT+0xca>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_DMA_Abort_IT+0x204>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d102      	bne.n	8001ef4 <HAL_DMA_Abort_IT+0xc4>
 8001eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef2:	e01b      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	e018      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	e015      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f00:	2310      	movs	r3, #16
 8001f02:	e013      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e011      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	e00e      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f12:	e00b      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f18:	e008      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1e:	e005      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f24:	e002      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f26:	2310      	movs	r3, #16
 8001f28:	e000      	b.n	8001f2c <HAL_DMA_Abort_IT+0xfc>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4a42      	ldr	r2, [pc, #264]	; (8002038 <HAL_DMA_Abort_IT+0x208>)
 8001f2e:	6053      	str	r3, [r2, #4]
 8001f30:	e057      	b.n	8001fe2 <HAL_DMA_Abort_IT+0x1b2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_DMA_Abort_IT+0x1e0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d04f      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x1ac>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a34      	ldr	r2, [pc, #208]	; (8002014 <HAL_DMA_Abort_IT+0x1e4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d048      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x1a8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a33      	ldr	r2, [pc, #204]	; (8002018 <HAL_DMA_Abort_IT+0x1e8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d040      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x1a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a31      	ldr	r2, [pc, #196]	; (800201c <HAL_DMA_Abort_IT+0x1ec>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d038      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x19c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a30      	ldr	r2, [pc, #192]	; (8002020 <HAL_DMA_Abort_IT+0x1f0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d030      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x196>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_DMA_Abort_IT+0x1f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d028      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x190>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_DMA_Abort_IT+0x1dc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d020      	beq.n	8001fba <HAL_DMA_Abort_IT+0x18a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_DMA_Abort_IT+0x1f8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x186>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_DMA_Abort_IT+0x1fc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d012      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x182>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_DMA_Abort_IT+0x200>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00a      	beq.n	8001fac <HAL_DMA_Abort_IT+0x17c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a26      	ldr	r2, [pc, #152]	; (8002034 <HAL_DMA_Abort_IT+0x204>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_DMA_Abort_IT+0x176>
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	e01b      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001faa:	e018      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb0:	e015      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	e013      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e011      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fbe:	e00e      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fc4:	e00b      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	e005      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd6:	e002      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fd8:	2310      	movs	r3, #16
 8001fda:	e000      	b.n	8001fde <HAL_DMA_Abort_IT+0x1ae>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_DMA_Abort_IT+0x20c>)
 8001fe0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    } 
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020080 	.word	0x40020080
 8002010:	40020008 	.word	0x40020008
 8002014:	4002001c 	.word	0x4002001c
 8002018:	40020030 	.word	0x40020030
 800201c:	40020044 	.word	0x40020044
 8002020:	40020058 	.word	0x40020058
 8002024:	4002006c 	.word	0x4002006c
 8002028:	40020408 	.word	0x40020408
 800202c:	4002041c 	.word	0x4002041c
 8002030:	40020430 	.word	0x40020430
 8002034:	40020444 	.word	0x40020444
 8002038:	40020400 	.word	0x40020400
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b08b      	sub	sp, #44	; 0x2c
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002052:	e169      	b.n	8002328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002054:	2201      	movs	r2, #1
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8158 	bne.w	8002322 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a9a      	ldr	r2, [pc, #616]	; (80022e0 <HAL_GPIO_Init+0x2a0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d05e      	beq.n	800213a <HAL_GPIO_Init+0xfa>
 800207c:	4a98      	ldr	r2, [pc, #608]	; (80022e0 <HAL_GPIO_Init+0x2a0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d875      	bhi.n	800216e <HAL_GPIO_Init+0x12e>
 8002082:	4a98      	ldr	r2, [pc, #608]	; (80022e4 <HAL_GPIO_Init+0x2a4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d058      	beq.n	800213a <HAL_GPIO_Init+0xfa>
 8002088:	4a96      	ldr	r2, [pc, #600]	; (80022e4 <HAL_GPIO_Init+0x2a4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d86f      	bhi.n	800216e <HAL_GPIO_Init+0x12e>
 800208e:	4a96      	ldr	r2, [pc, #600]	; (80022e8 <HAL_GPIO_Init+0x2a8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d052      	beq.n	800213a <HAL_GPIO_Init+0xfa>
 8002094:	4a94      	ldr	r2, [pc, #592]	; (80022e8 <HAL_GPIO_Init+0x2a8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d869      	bhi.n	800216e <HAL_GPIO_Init+0x12e>
 800209a:	4a94      	ldr	r2, [pc, #592]	; (80022ec <HAL_GPIO_Init+0x2ac>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d04c      	beq.n	800213a <HAL_GPIO_Init+0xfa>
 80020a0:	4a92      	ldr	r2, [pc, #584]	; (80022ec <HAL_GPIO_Init+0x2ac>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d863      	bhi.n	800216e <HAL_GPIO_Init+0x12e>
 80020a6:	4a92      	ldr	r2, [pc, #584]	; (80022f0 <HAL_GPIO_Init+0x2b0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d046      	beq.n	800213a <HAL_GPIO_Init+0xfa>
 80020ac:	4a90      	ldr	r2, [pc, #576]	; (80022f0 <HAL_GPIO_Init+0x2b0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d85d      	bhi.n	800216e <HAL_GPIO_Init+0x12e>
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d82a      	bhi.n	800210c <HAL_GPIO_Init+0xcc>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d859      	bhi.n	800216e <HAL_GPIO_Init+0x12e>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <HAL_GPIO_Init+0x80>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	0800213b 	.word	0x0800213b
 80020c4:	08002115 	.word	0x08002115
 80020c8:	08002127 	.word	0x08002127
 80020cc:	08002169 	.word	0x08002169
 80020d0:	0800216f 	.word	0x0800216f
 80020d4:	0800216f 	.word	0x0800216f
 80020d8:	0800216f 	.word	0x0800216f
 80020dc:	0800216f 	.word	0x0800216f
 80020e0:	0800216f 	.word	0x0800216f
 80020e4:	0800216f 	.word	0x0800216f
 80020e8:	0800216f 	.word	0x0800216f
 80020ec:	0800216f 	.word	0x0800216f
 80020f0:	0800216f 	.word	0x0800216f
 80020f4:	0800216f 	.word	0x0800216f
 80020f8:	0800216f 	.word	0x0800216f
 80020fc:	0800216f 	.word	0x0800216f
 8002100:	0800216f 	.word	0x0800216f
 8002104:	0800211d 	.word	0x0800211d
 8002108:	08002131 	.word	0x08002131
 800210c:	4a79      	ldr	r2, [pc, #484]	; (80022f4 <HAL_GPIO_Init+0x2b4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002112:	e02c      	b.n	800216e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	623b      	str	r3, [r7, #32]
          break;
 800211a:	e029      	b.n	8002170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	3304      	adds	r3, #4
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e024      	b.n	8002170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	3308      	adds	r3, #8
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e01f      	b.n	8002170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	330c      	adds	r3, #12
 8002136:	623b      	str	r3, [r7, #32]
          break;
 8002138:	e01a      	b.n	8002170 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002142:	2304      	movs	r3, #4
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e013      	b.n	8002170 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002150:	2308      	movs	r3, #8
 8002152:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	611a      	str	r2, [r3, #16]
          break;
 800215a:	e009      	b.n	8002170 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800215c:	2308      	movs	r3, #8
 800215e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	615a      	str	r2, [r3, #20]
          break;
 8002166:	e003      	b.n	8002170 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x130>
          break;
 800216e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2bff      	cmp	r3, #255	; 0xff
 8002174:	d801      	bhi.n	800217a <HAL_GPIO_Init+0x13a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	e001      	b.n	800217e <HAL_GPIO_Init+0x13e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2bff      	cmp	r3, #255	; 0xff
 8002184:	d802      	bhi.n	800218c <HAL_GPIO_Init+0x14c>
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	e002      	b.n	8002192 <HAL_GPIO_Init+0x152>
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	3b08      	subs	r3, #8
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	210f      	movs	r1, #15
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	6a39      	ldr	r1, [r7, #32]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80b1 	beq.w	8002322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c0:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d8:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_GPIO_Init+0x2bc>)
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a40      	ldr	r2, [pc, #256]	; (8002300 <HAL_GPIO_Init+0x2c0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_GPIO_Init+0x1ec>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3f      	ldr	r2, [pc, #252]	; (8002304 <HAL_GPIO_Init+0x2c4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00d      	beq.n	8002228 <HAL_GPIO_Init+0x1e8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3e      	ldr	r2, [pc, #248]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <HAL_GPIO_Init+0x1e4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3d      	ldr	r2, [pc, #244]	; (800230c <HAL_GPIO_Init+0x2cc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_GPIO_Init+0x1e0>
 800221c:	2303      	movs	r3, #3
 800221e:	e006      	b.n	800222e <HAL_GPIO_Init+0x1ee>
 8002220:	2304      	movs	r3, #4
 8002222:	e004      	b.n	800222e <HAL_GPIO_Init+0x1ee>
 8002224:	2302      	movs	r3, #2
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0x1ee>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_GPIO_Init+0x1ee>
 800222c:	2300      	movs	r3, #0
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800223e:	492f      	ldr	r1, [pc, #188]	; (80022fc <HAL_GPIO_Init+0x2bc>)
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	492c      	ldr	r1, [pc, #176]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4928      	ldr	r1, [pc, #160]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002270:	4013      	ands	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4922      	ldr	r1, [pc, #136]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	491e      	ldr	r1, [pc, #120]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4918      	ldr	r1, [pc, #96]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	4914      	ldr	r1, [pc, #80]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d021      	beq.n	8002314 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	490e      	ldr	r1, [pc, #56]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e021      	b.n	8002322 <HAL_GPIO_Init+0x2e2>
 80022de:	bf00      	nop
 80022e0:	10320000 	.word	0x10320000
 80022e4:	10310000 	.word	0x10310000
 80022e8:	10220000 	.word	0x10220000
 80022ec:	10210000 	.word	0x10210000
 80022f0:	10120000 	.word	0x10120000
 80022f4:	10110000 	.word	0x10110000
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000
 8002300:	40010800 	.word	0x40010800
 8002304:	40010c00 	.word	0x40010c00
 8002308:	40011000 	.word	0x40011000
 800230c:	40011400 	.word	0x40011400
 8002310:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	43db      	mvns	r3, r3
 800231c:	4909      	ldr	r1, [pc, #36]	; (8002344 <HAL_GPIO_Init+0x304>)
 800231e:	4013      	ands	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3301      	adds	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f ae8e 	bne.w	8002054 <HAL_GPIO_Init+0x14>
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	372c      	adds	r7, #44	; 0x2c
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e001      	b.n	800236a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	807b      	strh	r3, [r7, #2]
 8002382:	4613      	mov	r3, r2
 8002384:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002386:	787b      	ldrb	r3, [r7, #1]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002392:	e003      	b.n	800239c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e304      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8087 	beq.w	80024d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c8:	4b92      	ldr	r3, [pc, #584]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d00c      	beq.n	80023ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d4:	4b8f      	ldr	r3, [pc, #572]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d112      	bne.n	8002406 <HAL_RCC_OscConfig+0x5e>
 80023e0:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ec:	d10b      	bne.n	8002406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d06c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x12c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d168      	bne.n	80024d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e2de      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x76>
 8002410:	4b80      	ldr	r3, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7f      	ldr	r2, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e02e      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x98>
 8002426:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e01d      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0xbc>
 800244a:	4b72      	ldr	r3, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a71      	ldr	r2, [pc, #452]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6e      	ldr	r2, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 8002464:	4b6b      	ldr	r3, [pc, #428]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a67      	ldr	r2, [pc, #412]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fb5e 	bl	8001b44 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fb5a 	bl	8001b44 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e292      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0xe4>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff fb4a 	bl	8001b44 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fb46 	bl	8001b44 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e27e      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x10c>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d063      	beq.n	80025aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e2:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ee:	4b49      	ldr	r3, [pc, #292]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d11c      	bne.n	8002534 <HAL_RCC_OscConfig+0x18c>
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x176>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e252      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4939      	ldr	r1, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	e03a      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff faff 	bl	8001b44 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff fafb 	bl	8001b44 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e233      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4927      	ldr	r1, [pc, #156]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fade 	bl	8001b44 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258c:	f7ff fada 	bl	8001b44 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e212      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d03a      	beq.n	800262c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d019      	beq.n	80025f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_RCC_OscConfig+0x274>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7ff fabe 	bl	8001b44 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7ff faba 	bl	8001b44 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1f2      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f000 fc02 	bl	8002df4 <RCC_Delay>
 80025f0:	e01c      	b.n	800262c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_OscConfig+0x274>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7ff faa4 	bl	8001b44 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fe:	e00f      	b.n	8002620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff faa0 	bl	8001b44 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d908      	bls.n	8002620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1d8      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	42420000 	.word	0x42420000
 800261c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	4b9b      	ldr	r3, [pc, #620]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e9      	bne.n	8002600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a6 	beq.w	8002786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a90      	ldr	r2, [pc, #576]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b8e      	ldr	r3, [pc, #568]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a87      	ldr	r2, [pc, #540]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff fa61 	bl	8001b44 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff fa5d 	bl	8001b44 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e195      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x312>
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e02d      	b.n	8002716 <HAL_RCC_OscConfig+0x36e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x334>
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a72      	ldr	r2, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a6f      	ldr	r2, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6213      	str	r3, [r2, #32]
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x36e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x356>
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x36e>
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b61      	ldr	r3, [pc, #388]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a60      	ldr	r2, [pc, #384]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7ff fa11 	bl	8001b44 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff fa0d 	bl	8001b44 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e143      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b54      	ldr	r3, [pc, #336]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x37e>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff f9fb 	bl	8001b44 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff f9f7 	bl	8001b44 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e12d      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a44      	ldr	r2, [pc, #272]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 808c 	beq.w	80028a8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d10e      	bne.n	80027bc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e103      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d14e      	bne.n	8002862 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80027c4:	4b32      	ldr	r3, [pc, #200]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0ef      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_RCC_OscConfig+0x4f0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7ff f9ab 	bl	8001b44 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027f2:	f7ff f9a7 	bl	8001b44 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0df      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	491c      	ldr	r1, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4918      	ldr	r1, [pc, #96]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCC_OscConfig+0x4f0>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7ff f983 	bl	8001b44 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002842:	f7ff f97f 	bl	8001b44 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0b7      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x49a>
 8002860:	e022      	b.n	80028a8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_OscConfig+0x4f0>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff f966 	bl	8001b44 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800287a:	e00f      	b.n	800289c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800287c:	f7ff f962 	bl	8001b44 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d908      	bls.n	800289c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e09a      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e9      	bne.n	800287c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8088 	beq.w	80029c2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b2:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d068      	beq.n	8002990 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d14d      	bne.n	8002962 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_RCC_OscConfig+0x628>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff f93a 	bl	8001b44 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff f936 	bl	8001b44 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e06e      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d10f      	bne.n	800291c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4931      	ldr	r1, [pc, #196]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 8002906:	4313      	orrs	r3, r2
 8002908:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f023 020f 	bic.w	r2, r3, #15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	492d      	ldr	r1, [pc, #180]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 8002918:	4313      	orrs	r3, r2
 800291a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	430b      	orrs	r3, r1
 800292e:	4927      	ldr	r1, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_RCC_OscConfig+0x628>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff f903 	bl	8001b44 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7ff f8ff 	bl	8001b44 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e037      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x59a>
 8002960:	e02f      	b.n	80029c2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x628>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff f8ec 	bl	8001b44 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f8e8 	bl	8001b44 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e020      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c8>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	42420060 	.word	0x42420060

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4965      	ldr	r1, [pc, #404]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7ff f83e 	bl	8001b44 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7ff f83a 	bl	8001b44 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4922      	ldr	r1, [pc, #136]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe ff9c 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08004eb0 	.word	0x08004eb0
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b092      	sub	sp, #72	; 0x48
 8002bae:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb8:	2300      	movs	r3, #0
 8002bba:	647b      	str	r3, [r7, #68]	; 0x44
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d002      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d003      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002be0:	e0c3      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002be4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002be6:	e0c3      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bea:	0c9b      	lsrs	r3, r3, #18
 8002bec:	f003 020f 	and.w	r2, r3, #15
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80ac 	beq.w	8002d5a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002c0c:	5c9b      	ldrb	r3, [r3, r2]
 8002c0e:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002c10:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 808c 	beq.w	8002d36 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002c1e:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	3301      	adds	r3, #1
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3302      	adds	r3, #2
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	627a      	str	r2, [r7, #36]	; 0x24
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	2200      	movs	r2, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	4611      	mov	r1, r2
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	fb00 f203 	mul.w	r2, r0, r3
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	fb03 f301 	mul.w	r3, r3, r1
 8002c56:	4413      	add	r3, r2
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	fba2 4500 	umull	r4, r5, r2, r0
 8002c5e:	442b      	add	r3, r5
 8002c60:	461d      	mov	r5, r3
 8002c62:	4622      	mov	r2, r4
 8002c64:	462b      	mov	r3, r5
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	0159      	lsls	r1, r3, #5
 8002c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c74:	0150      	lsls	r0, r2, #5
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	ebb2 0a04 	subs.w	sl, r2, r4
 8002c7e:	eb63 0b05 	sbc.w	fp, r3, r5
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c8e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c92:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c96:	ebb2 080a 	subs.w	r8, r2, sl
 8002c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	eb18 0304 	adds.w	r3, r8, r4
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	eb49 0305 	adc.w	r3, r9, r5
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cce:	4629      	mov	r1, r5
 8002cd0:	024b      	lsls	r3, r1, #9
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002cdc:	4601      	mov	r1, r0
 8002cde:	024a      	lsls	r2, r1, #9
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	617a      	str	r2, [r7, #20]
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	60fa      	str	r2, [r7, #12]
 8002cf4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002cfe:	4645      	mov	r5, r8
 8002d00:	fb05 f202 	mul.w	r2, r5, r2
 8002d04:	46cc      	mov	ip, r9
 8002d06:	4625      	mov	r5, r4
 8002d08:	461c      	mov	r4, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	fb03 f30c 	mul.w	r3, r3, ip
 8002d10:	4413      	add	r3, r2
 8002d12:	4622      	mov	r2, r4
 8002d14:	4644      	mov	r4, r8
 8002d16:	fba2 2404 	umull	r2, r4, r2, r4
 8002d1a:	61fc      	str	r4, [r7, #28]
 8002d1c:	61ba      	str	r2, [r7, #24]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d28:	f7fd fa7c 	bl	8000224 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
 8002d34:	e007      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002d3a:	fb03 f202 	mul.w	r2, r3, r2
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002d48:	7b5b      	ldrb	r3, [r3, #13]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
 8002d58:	e004      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8002d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002d68:	e002      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002d6c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3748      	adds	r7, #72	; 0x48
 8002d76:	46bd      	mov	sp, r7
 8002d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	007a1200 	.word	0x007a1200
 8002d84:	08004ec8 	.word	0x08004ec8
 8002d88:	08004ed8 	.word	0x08004ed8
 8002d8c:	003d0900 	.word	0x003d0900

08002d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da8:	f7ff fff2 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08004ec0 	.word	0x08004ec0

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff ffde 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	0adb      	lsrs	r3, r3, #11
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08004ec0 	.word	0x08004ec0

08002df4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <RCC_Delay+0x34>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <RCC_Delay+0x38>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0a5b      	lsrs	r3, r3, #9
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e10:	bf00      	nop
  }
  while (Delay --);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1e5a      	subs	r2, r3, #1
 8002e16:	60fa      	str	r2, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <RCC_Delay+0x1c>
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	10624dd3 	.word	0x10624dd3

08002e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e076      	b.n	8002f30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e52:	d009      	beq.n	8002e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
 8002e5a:	e005      	b.n	8002e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe f89c 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	0c1a      	lsrs	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f002 0204 	and.w	r2, r2, #4
 8002f0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_SPI_Transmit+0x22>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e12d      	b.n	80031b6 <HAL_SPI_Transmit+0x27e>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f62:	f7fe fdef 	bl	8001b44 <HAL_GetTick>
 8002f66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d002      	beq.n	8002f7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f7c:	e116      	b.n	80031ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_SPI_Transmit+0x52>
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f8e:	e10d      	b.n	80031ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d007      	beq.n	8003016 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301e:	d14f      	bne.n	80030c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_SPI_Transmit+0xf6>
 8003028:	8afb      	ldrh	r3, [r7, #22]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d142      	bne.n	80030b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	1c9a      	adds	r2, r3, #2
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003052:	e02f      	b.n	80030b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d112      	bne.n	8003088 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	881a      	ldrh	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	1c9a      	adds	r2, r3, #2
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	86da      	strh	r2, [r3, #54]	; 0x36
 8003086:	e015      	b.n	80030b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003088:	f7fe fd5c 	bl	8001b44 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d803      	bhi.n	80030a0 <HAL_SPI_Transmit+0x168>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d102      	bne.n	80030a6 <HAL_SPI_Transmit+0x16e>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030b2:	e07b      	b.n	80031ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ca      	bne.n	8003054 <HAL_SPI_Transmit+0x11c>
 80030be:	e050      	b.n	8003162 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_SPI_Transmit+0x196>
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d144      	bne.n	8003158 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030f4:	e030      	b.n	8003158 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b02      	cmp	r3, #2
 8003102:	d113      	bne.n	800312c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	86da      	strh	r2, [r3, #54]	; 0x36
 800312a:	e015      	b.n	8003158 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312c:	f7fe fd0a 	bl	8001b44 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d803      	bhi.n	8003144 <HAL_SPI_Transmit+0x20c>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d102      	bne.n	800314a <HAL_SPI_Transmit+0x212>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003156:	e029      	b.n	80031ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1c9      	bne.n	80030f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fbcc 	bl	8003904 <SPI_EndRxTxTransaction>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e003      	b.n	80031ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b088      	sub	sp, #32
 80031c2:	af02      	add	r7, sp, #8
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d002      	beq.n	80031e4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031de:	2302      	movs	r3, #2
 80031e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031e2:	e0fb      	b.n	80033dc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ec:	d112      	bne.n	8003214 <HAL_SPI_Receive+0x56>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10e      	bne.n	8003214 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2204      	movs	r2, #4
 80031fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f8ef 	bl	80033ee <HAL_SPI_TransmitReceive>
 8003210:	4603      	mov	r3, r0
 8003212:	e0e8      	b.n	80033e6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Receive+0x64>
 800321e:	2302      	movs	r3, #2
 8003220:	e0e1      	b.n	80033e6 <HAL_SPI_Receive+0x228>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800322a:	f7fe fc8b 	bl	8001b44 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SPI_Receive+0x7e>
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003240:	e0cc      	b.n	80033dc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2204      	movs	r2, #4
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003288:	d10f      	bne.n	80032aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d007      	beq.n	80032c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d16a      	bne.n	80033a6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032d0:	e032      	b.n	8003338 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d115      	bne.n	800330c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f103 020c 	add.w	r2, r3, #12
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800330a:	e015      	b.n	8003338 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800330c:	f7fe fc1a 	bl	8001b44 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d803      	bhi.n	8003324 <HAL_SPI_Receive+0x166>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d102      	bne.n	800332a <HAL_SPI_Receive+0x16c>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003336:	e051      	b.n	80033dc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1c7      	bne.n	80032d2 <HAL_SPI_Receive+0x114>
 8003342:	e035      	b.n	80033b0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d113      	bne.n	800337a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	b292      	uxth	r2, r2
 800335e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003378:	e015      	b.n	80033a6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800337a:	f7fe fbe3 	bl	8001b44 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d803      	bhi.n	8003392 <HAL_SPI_Receive+0x1d4>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d102      	bne.n	8003398 <HAL_SPI_Receive+0x1da>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033a4:	e01a      	b.n	80033dc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1c9      	bne.n	8003344 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fa53 	bl	8003860 <SPI_EndRxTransaction>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
 80033d2:	e003      	b.n	80033dc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b08c      	sub	sp, #48	; 0x30
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x26>
 8003410:	2302      	movs	r3, #2
 8003412:	e198      	b.n	8003746 <HAL_SPI_TransmitReceive+0x358>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800341c:	f7fe fb92 	bl	8001b44 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800343a:	2b01      	cmp	r3, #1
 800343c:	d00f      	beq.n	800345e <HAL_SPI_TransmitReceive+0x70>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003444:	d107      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x68>
 800344e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003456:	2302      	movs	r3, #2
 8003458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800345c:	e16d      	b.n	800373a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x82>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x82>
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d103      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003476:	e160      	b.n	800373a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b04      	cmp	r3, #4
 8003482:	d003      	beq.n	800348c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2205      	movs	r2, #5
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	887a      	ldrh	r2, [r7, #2]
 80034a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	887a      	ldrh	r2, [r7, #2]
 80034ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d007      	beq.n	80034e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d17c      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_SPI_TransmitReceive+0x10a>
 80034f2:	8b7b      	ldrh	r3, [r7, #26]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d16a      	bne.n	80035ce <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351c:	e057      	b.n	80035ce <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d11b      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x176>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_SPI_TransmitReceive+0x176>
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d113      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d119      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x1b8>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d014      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	b292      	uxth	r2, r2
 8003588:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035a2:	2301      	movs	r3, #1
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035a6:	f7fe facd 	bl	8001b44 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d80b      	bhi.n	80035ce <HAL_SPI_TransmitReceive+0x1e0>
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d007      	beq.n	80035ce <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80035cc:	e0b5      	b.n	800373a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1a2      	bne.n	800351e <HAL_SPI_TransmitReceive+0x130>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d19d      	bne.n	800351e <HAL_SPI_TransmitReceive+0x130>
 80035e2:	e080      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_SPI_TransmitReceive+0x204>
 80035ec:	8b7b      	ldrh	r3, [r7, #26]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d16f      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003618:	e05b      	b.n	80036d2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d11c      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x274>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d017      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x274>
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d114      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d119      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x2b6>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d014      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036a0:	2301      	movs	r3, #1
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036a4:	f7fe fa4e 	bl	8001b44 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d803      	bhi.n	80036bc <HAL_SPI_TransmitReceive+0x2ce>
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x2d4>
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036d0:	e033      	b.n	800373a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d19e      	bne.n	800361a <HAL_SPI_TransmitReceive+0x22c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d199      	bne.n	800361a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f90a 	bl	8003904 <SPI_EndRxTxTransaction>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003702:	e01a      	b.n	800373a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003730:	e003      	b.n	800373a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003746:	4618      	mov	r0, r3
 8003748:	3730      	adds	r7, #48	; 0x30
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003760:	f7fe f9f0 	bl	8001b44 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	4413      	add	r3, r2
 800376e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003770:	f7fe f9e8 	bl	8001b44 <HAL_GetTick>
 8003774:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	0d1b      	lsrs	r3, r3, #20
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	e054      	b.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d050      	beq.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003790:	f7fe f9d8 	bl	8001b44 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	429a      	cmp	r2, r3
 800379e:	d902      	bls.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d13d      	bne.n	8003822 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037be:	d111      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	d004      	beq.n	80037d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d107      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ec:	d10f      	bne.n	800380e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800380c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e017      	b.n	8003852 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3b01      	subs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d19b      	bne.n	8003788 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003874:	d111      	bne.n	800389a <SPI_EndRxTransaction+0x3a>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387e:	d004      	beq.n	800388a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d107      	bne.n	800389a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003898:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a2:	d117      	bne.n	80038d4 <SPI_EndRxTransaction+0x74>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d112      	bne.n	80038d4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2101      	movs	r1, #1
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff ff49 	bl	8003750 <SPI_WaitFlagStateUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01a      	beq.n	80038fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e013      	b.n	80038fc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2200      	movs	r2, #0
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff ff36 	bl	8003750 <SPI_WaitFlagStateUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e000      	b.n	80038fc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff ff18 	bl	8003750 <SPI_WaitFlagStateUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e000      	b.n	8003938 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e041      	b.n	80039d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fb74 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fa7c 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d001      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e03f      	b.n	8003a78 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_TIM_Base_Start_IT+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIM_Base_Start_IT+0x62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <HAL_TIM_Base_Start_IT+0xa8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIM_Base_Start_IT+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_TIM_Base_Start_IT+0xac>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIM_Base_Start_IT+0x62>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d010      	beq.n	8003a76 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	e007      	b.n	8003a76 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00

08003a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0202 	mvn.w	r2, #2
 8003ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9b4 	bl	8003e44 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9a7 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9b6 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0204 	mvn.w	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f98a 	bl	8003e44 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f97d 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f98c 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0208 	mvn.w	r2, #8
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f960 	bl	8003e44 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f953 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f962 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f936 	bl	8003e44 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f929 	bl	8003e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f938 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0201 	mvn.w	r2, #1
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc fc98 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa8d 	bl	800415e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8fc 	bl	8003e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0220 	mvn.w	r2, #32
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa58 	bl	800414c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e0b4      	b.n	8003e2a <HAL_TIM_ConfigClockSource+0x186>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf8:	d03e      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0xd4>
 8003cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfe:	f200 8087 	bhi.w	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d06:	f000 8086 	beq.w	8003e16 <HAL_TIM_ConfigClockSource+0x172>
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	d87f      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d01a      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xa6>
 8003d14:	2b70      	cmp	r3, #112	; 0x70
 8003d16:	d87b      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b60      	cmp	r3, #96	; 0x60
 8003d1a:	d050      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x11a>
 8003d1c:	2b60      	cmp	r3, #96	; 0x60
 8003d1e:	d877      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b50      	cmp	r3, #80	; 0x50
 8003d22:	d03c      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xfa>
 8003d24:	2b50      	cmp	r3, #80	; 0x50
 8003d26:	d873      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d058      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x13a>
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d86f      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b30      	cmp	r3, #48	; 0x30
 8003d32:	d064      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b30      	cmp	r3, #48	; 0x30
 8003d36:	d86b      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d060      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x15a>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d867      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05c      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d05a      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x15a>
 8003d48:	e062      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 f972 	bl	8004042 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	609a      	str	r2, [r3, #8]
      break;
 8003d76:	e04f      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f000 f95b 	bl	8004042 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e03c      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f000 f8d2 	bl	8003f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2150      	movs	r1, #80	; 0x50
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f929 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e02c      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f000 f8f0 	bl	8003fb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2160      	movs	r1, #96	; 0x60
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f919 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e01c      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 f8b2 	bl	8003f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f909 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e00c      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f000 f900 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003e0e:	e003      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e000      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
	...

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <TIM_Base_SetConfig+0xc8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x38>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x38>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <TIM_Base_SetConfig+0xcc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x38>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <TIM_Base_SetConfig+0xd0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <TIM_Base_SetConfig+0xd4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <TIM_Base_SetConfig+0xc8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_Base_SetConfig+0x72>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d00b      	beq.n	8003eee <TIM_Base_SetConfig+0x72>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <TIM_Base_SetConfig+0xcc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_Base_SetConfig+0x72>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <TIM_Base_SetConfig+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_Base_SetConfig+0x72>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <TIM_Base_SetConfig+0xd4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a07      	ldr	r2, [pc, #28]	; (8003f44 <TIM_Base_SetConfig+0xc8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	615a      	str	r2, [r3, #20]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00

08003f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 030a 	bic.w	r3, r3, #10
 8003f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	031b      	lsls	r3, r3, #12
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	021a      	lsls	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	431a      	orrs	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	609a      	str	r2, [r3, #8]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e04b      	b.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d00e      	beq.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10c      	bne.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00

0800414c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e042      	b.n	8004208 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fc ff9c 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	; 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fcb5 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	d121      	bne.n	800426e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_Transmit_IT+0x26>
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e01a      	b.n	8004270 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	88fa      	ldrh	r2, [r7, #6]
 800424a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	; 0x21
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004268:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
	...

0800427c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b0ba      	sub	sp, #232	; 0xe8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_UART_IRQHandler+0x66>
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fb63 	bl	80049a6 <UART_Receive_IT>
      return;
 80042e0:	e25b      	b.n	800479a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80de 	beq.w	80044a8 <HAL_UART_IRQHandler+0x22c>
 80042ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80d1 	beq.w	80044a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_UART_IRQHandler+0xae>
 8004312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f043 0201 	orr.w	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xd2>
 8004336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_UART_IRQHandler+0xf6>
 800435a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d011      	beq.n	80043a2 <HAL_UART_IRQHandler+0x126>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800438a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f043 0208 	orr.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 81f2 	beq.w	8004790 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x14e>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 faee 	bl	80049a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <HAL_UART_IRQHandler+0x17a>
 80043ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d04f      	beq.n	8004496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9f8 	bl	80047ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d041      	beq.n	800448e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3314      	adds	r3, #20
 8004432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800443a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800444e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1d9      	bne.n	800440a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d013      	beq.n	8004486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	4a7e      	ldr	r2, [pc, #504]	; (800465c <HAL_UART_IRQHandler+0x3e0>)
 8004464:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fce0 	bl	8001e30 <HAL_DMA_Abort_IT>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004480:	4610      	mov	r0, r2
 8004482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e00e      	b.n	80044a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f99c 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	e00a      	b.n	80044a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f998 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	e006      	b.n	80044a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f994 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044a2:	e175      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	bf00      	nop
    return;
 80044a6:	e173      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	f040 814f 	bne.w	8004750 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8148 	beq.w	8004750 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8141 	beq.w	8004750 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80b6 	beq.w	8004660 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8145 	beq.w	8004794 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004512:	429a      	cmp	r2, r3
 8004514:	f080 813e 	bcs.w	8004794 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800451e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b20      	cmp	r3, #32
 8004528:	f000 8088 	beq.w	800463c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004542:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004558:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800455c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004564:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1d9      	bne.n	800452c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800459c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e1      	bne.n	8004578 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e3      	bne.n	80045b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	f023 0310 	bic.w	r3, r3, #16
 8004610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800461e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004620:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800462c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e3      	bne.n	80045fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fbbf 	bl	8001dba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800464a:	b29b      	uxth	r3, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8bf 	bl	80047d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004658:	e09c      	b.n	8004794 <HAL_UART_IRQHandler+0x518>
 800465a:	bf00      	nop
 800465c:	080048b1 	.word	0x080048b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004668:	b29b      	uxth	r3, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 808e 	beq.w	8004798 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800467c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8089 	beq.w	8004798 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800469c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046aa:	647a      	str	r2, [r7, #68]	; 0x44
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	623b      	str	r3, [r7, #32]
   return(result);
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046e2:	633a      	str	r2, [r7, #48]	; 0x30
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e3      	bne.n	80046be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	60fb      	str	r3, [r7, #12]
   return(result);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0310 	bic.w	r3, r3, #16
 800471a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004728:	61fa      	str	r2, [r7, #28]
 800472a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	617b      	str	r3, [r7, #20]
   return(result);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e3      	bne.n	8004704 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004742:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f844 	bl	80047d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800474e:	e023      	b.n	8004798 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <HAL_UART_IRQHandler+0x4f4>
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8b5 	bl	80048d8 <UART_Transmit_IT>
    return;
 800476e:	e014      	b.n	800479a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <HAL_UART_IRQHandler+0x51e>
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8f4 	bl	8004976 <UART_EndTransmit_IT>
    return;
 800478e:	e004      	b.n	800479a <HAL_UART_IRQHandler+0x51e>
    return;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <HAL_UART_IRQHandler+0x51e>
      return;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_UART_IRQHandler+0x51e>
      return;
 8004798:	bf00      	nop
  }
}
 800479a:	37e8      	adds	r7, #232	; 0xe8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b095      	sub	sp, #84	; 0x54
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004814:	643a      	str	r2, [r7, #64]	; 0x40
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800481a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e5      	bne.n	80047f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	61fb      	str	r3, [r7, #28]
   return(result);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	2b01      	cmp	r3, #1
 8004862:	d119      	bne.n	8004898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60bb      	str	r3, [r7, #8]
   return(result);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0310 	bic.w	r3, r3, #16
 800487a:	647b      	str	r3, [r7, #68]	; 0x44
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004884:	61ba      	str	r2, [r7, #24]
 8004886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	613b      	str	r3, [r7, #16]
   return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048a6:	bf00      	nop
 80048a8:	3754      	adds	r7, #84	; 0x54
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff ff7a 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b21      	cmp	r3, #33	; 0x21
 80048ea:	d13e      	bne.n	800496a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f4:	d114      	bne.n	8004920 <UART_Transmit_IT+0x48>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d110      	bne.n	8004920 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	621a      	str	r2, [r3, #32]
 800491e:	e008      	b.n	8004932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	1c59      	adds	r1, r3, #1
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6211      	str	r1, [r2, #32]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4619      	mov	r1, r3
 8004940:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ff02 	bl	80047a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b08c      	sub	sp, #48	; 0x30
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b22      	cmp	r3, #34	; 0x22
 80049b8:	f040 80ae 	bne.w	8004b18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d117      	bne.n	80049f6 <UART_Receive_IT+0x50>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d113      	bne.n	80049f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
 80049f4:	e026      	b.n	8004a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a08:	d007      	beq.n	8004a1a <UART_Receive_IT+0x74>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <UART_Receive_IT+0x82>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e008      	b.n	8004a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4619      	mov	r1, r3
 8004a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d15d      	bne.n	8004b14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0220 	bic.w	r2, r2, #32
 8004a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d135      	bne.n	8004b0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	623a      	str	r2, [r7, #32]
 8004ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69f9      	ldr	r1, [r7, #28]
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d10a      	bne.n	8004afc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fe67 	bl	80047d6 <HAL_UARTEx_RxEventCallback>
 8004b08:	e002      	b.n	8004b10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fe51 	bl	80047b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e002      	b.n	8004b1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3730      	adds	r7, #48	; 0x30
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b5e:	f023 030c 	bic.w	r3, r3, #12
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <UART_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe f91e 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	e002      	b.n	8004b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe f906 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8004b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <UART_SetConfig+0x118>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	0119      	lsls	r1, r3, #4
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <UART_SetConfig+0x118>)
 8004bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2064      	movs	r0, #100	; 0x64
 8004bda:	fb00 f303 	mul.w	r3, r0, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <UART_SetConfig+0x118>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	4419      	add	r1, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <UART_SetConfig+0x118>)
 8004c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2064      	movs	r0, #100	; 0x64
 8004c12:	fb00 f303 	mul.w	r3, r0, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <UART_SetConfig+0x118>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	51eb851f 	.word	0x51eb851f

08004c40 <__libc_init_array>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	2600      	movs	r6, #0
 8004c44:	4d0c      	ldr	r5, [pc, #48]	; (8004c78 <__libc_init_array+0x38>)
 8004c46:	4c0d      	ldr	r4, [pc, #52]	; (8004c7c <__libc_init_array+0x3c>)
 8004c48:	1b64      	subs	r4, r4, r5
 8004c4a:	10a4      	asrs	r4, r4, #2
 8004c4c:	42a6      	cmp	r6, r4
 8004c4e:	d109      	bne.n	8004c64 <__libc_init_array+0x24>
 8004c50:	f000 f822 	bl	8004c98 <_init>
 8004c54:	2600      	movs	r6, #0
 8004c56:	4d0a      	ldr	r5, [pc, #40]	; (8004c80 <__libc_init_array+0x40>)
 8004c58:	4c0a      	ldr	r4, [pc, #40]	; (8004c84 <__libc_init_array+0x44>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	42a6      	cmp	r6, r4
 8004c60:	d105      	bne.n	8004c6e <__libc_init_array+0x2e>
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c68:	4798      	blx	r3
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	e7ee      	b.n	8004c4c <__libc_init_array+0xc>
 8004c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c72:	4798      	blx	r3
 8004c74:	3601      	adds	r6, #1
 8004c76:	e7f2      	b.n	8004c5e <__libc_init_array+0x1e>
 8004c78:	08004ef0 	.word	0x08004ef0
 8004c7c:	08004ef0 	.word	0x08004ef0
 8004c80:	08004ef0 	.word	0x08004ef0
 8004c84:	08004ef4 	.word	0x08004ef4

08004c88 <memset>:
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4402      	add	r2, r0
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d100      	bne.n	8004c92 <memset+0xa>
 8004c90:	4770      	bx	lr
 8004c92:	f803 1b01 	strb.w	r1, [r3], #1
 8004c96:	e7f9      	b.n	8004c8c <memset+0x4>

08004c98 <_init>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr

08004ca4 <_fini>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	bf00      	nop
 8004ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004caa:	bc08      	pop	{r3}
 8004cac:	469e      	mov	lr, r3
 8004cae:	4770      	bx	lr
