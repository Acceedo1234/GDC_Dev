
STM32F107VCT7_GDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000582c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c48  08005c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c50  08005c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000000c  08005c64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005c64  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117c7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277a  00000000  00000000  000317fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00034f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f45f  00000000  00000000  00035e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dfc  00000000  00000000  00055297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9ed1  00000000  00000000  00068093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121f64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  00121fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080059f8 	.word	0x080059f8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080059f8 	.word	0x080059f8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <TimerApplicationInit>:
uint8_t Complete_Offset_Sliderout_Timer;
uint8_t Complete_Offset_EjectionIn_Timer;
uint8_t Complete_Offset_Ejectionout_Timer;

void TimerApplicationInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <TimerApplicationInit+0x14>)
 8000532:	f004 f85d 	bl	80045f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <TimerApplicationInit+0x18>)
 8000538:	f004 f85a 	bl	80045f0 <HAL_TIM_Base_Start_IT>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000015c 	.word	0x2000015c
 8000544:	200001a4 	.word	0x200001a4

08000548 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a9a      	ldr	r2, [pc, #616]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d11f      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(++Count5ms >= 5)
 8000558:	4b99      	ldr	r3, [pc, #612]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b97      	ldr	r3, [pc, #604]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	4b96      	ldr	r3, [pc, #600]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d905      	bls.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			Flag5msTM2 = 1;
 800056c:	4b95      	ldr	r3, [pc, #596]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
			Count5ms=0;
 8000572:	4b93      	ldr	r3, [pc, #588]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
		}
		if(++Count20ms >= 20){
 8000578:	4b93      	ldr	r3, [pc, #588]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b91      	ldr	r3, [pc, #580]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	4b90      	ldr	r3, [pc, #576]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b13      	cmp	r3, #19
 800058a:	d905      	bls.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x50>
			Flag200ms=1;
 800058c:	4b8f      	ldr	r3, [pc, #572]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
			Count20ms=0;
 8000592:	4b8d      	ldr	r3, [pc, #564]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim == &htim3)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a8d      	ldr	r2, [pc, #564]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800059c:	4293      	cmp	r3, r2
 800059e:	f040 8108 	bne.w	80007b2 <HAL_TIM_PeriodElapsedCallback+0x26a>
	{
		if(++Count1Sec >= 10)
 80005a2:	4b8c      	ldr	r3, [pc, #560]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b8a      	ldr	r3, [pc, #552]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	4b89      	ldr	r3, [pc, #548]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b09      	cmp	r3, #9
 80005b4:	f240 80ed 	bls.w	8000792 <HAL_TIM_PeriodElapsedCallback+0x24a>
		{
			//HAL_GPIO_TogglePin(GPIOD,Relay_1_Pin);
			Count1Sec=0;
 80005b8:	4b86      	ldr	r3, [pc, #536]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
			Flag1Sec = 1;
 80005be:	4b86      	ldr	r3, [pc, #536]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]

			if(Start_Offset_Slider_Timer)
 80005c4:	4b85      	ldr	r3, [pc, #532]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0xac>
			{
				if(++Start_Offset_Slider_Counter >= Set_Offset_Slider_Time)
 80005cc:	4b84      	ldr	r3, [pc, #528]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b82      	ldr	r3, [pc, #520]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80005d6:	801a      	strh	r2, [r3, #0]
 80005d8:	4b81      	ldr	r3, [pc, #516]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005e0:	d308      	bcc.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0xac>
				{
					Start_Offset_Slider_Counter=0;
 80005e2:	4b7f      	ldr	r3, [pc, #508]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
					Start_Offset_Slider_Timer=0;
 80005e8:	4b7c      	ldr	r3, [pc, #496]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Timer_Slider=1;
 80005ee:	4b7d      	ldr	r3, [pc, #500]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_RampClose_Timer)
 80005f4:	4b7c      	ldr	r3, [pc, #496]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d012      	beq.n	8000622 <HAL_TIM_PeriodElapsedCallback+0xda>
			{
				if(++Start_Offset_RampClose_Counter >= Set_Offset_RampClose_Timer)
 80005fc:	4b7b      	ldr	r3, [pc, #492]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b79      	ldr	r3, [pc, #484]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	4b78      	ldr	r3, [pc, #480]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2bc7      	cmp	r3, #199	; 0xc7
 800060e:	d908      	bls.n	8000622 <HAL_TIM_PeriodElapsedCallback+0xda>
				{
					Start_Offset_RampClose_Timer=0;
 8000610:	4b75      	ldr	r3, [pc, #468]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
					Start_Offset_RampClose_Counter=0;
 8000616:	4b75      	ldr	r3, [pc, #468]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
					Complete_Offset_RampClose_Timer=1;
 800061c:	4b74      	ldr	r3, [pc, #464]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Tiltingup_Timer)
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d012      	beq.n	8000650 <HAL_TIM_PeriodElapsedCallback+0x108>
			{
				if(++Start_Offset_Tiltingup_Counter >= Set_Offset_Tiltingup_Timer)
 800062a:	4b73      	ldr	r3, [pc, #460]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b71      	ldr	r3, [pc, #452]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	4b70      	ldr	r3, [pc, #448]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2bc7      	cmp	r3, #199	; 0xc7
 800063c:	d908      	bls.n	8000650 <HAL_TIM_PeriodElapsedCallback+0x108>
				{
					Start_Offset_Tiltingup_Timer=0;
 800063e:	4b6d      	ldr	r3, [pc, #436]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
					Start_Offset_Tiltingup_Counter=0;
 8000644:	4b6c      	ldr	r3, [pc, #432]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Tiltingup_Timer=1;
 800064a:	4b6c      	ldr	r3, [pc, #432]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Hold_Pouringwait_Timer)
 8000650:	4b6b      	ldr	r3, [pc, #428]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d012      	beq.n	800067e <HAL_TIM_PeriodElapsedCallback+0x136>
			{
				if(++Start_Hold_Poring_Counter >= Set_Hold_Pouringwait_Timer)
 8000658:	4b6a      	ldr	r3, [pc, #424]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b68      	ldr	r3, [pc, #416]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	4b67      	ldr	r3, [pc, #412]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2bc7      	cmp	r3, #199	; 0xc7
 800066a:	d908      	bls.n	800067e <HAL_TIM_PeriodElapsedCallback+0x136>
				{
					Start_Hold_Pouringwait_Timer=0;
 800066c:	4b64      	ldr	r3, [pc, #400]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
					Start_Hold_Poring_Counter=0;
 8000672:	4b64      	ldr	r3, [pc, #400]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
					Complete_Hold_Pouringwait_Timer=1;
 8000678:	4b63      	ldr	r3, [pc, #396]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Tilting_Timer)
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d012      	beq.n	80006ac <HAL_TIM_PeriodElapsedCallback+0x164>
			{
				if(++Start_Offset_Tilting_Counter >= Set_Offset_Tilting_Timer)
 8000686:	4b62      	ldr	r3, [pc, #392]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b60      	ldr	r3, [pc, #384]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	4b5f      	ldr	r3, [pc, #380]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2bc7      	cmp	r3, #199	; 0xc7
 8000698:	d908      	bls.n	80006ac <HAL_TIM_PeriodElapsedCallback+0x164>
				{
					Start_Offset_Tilting_Timer=0;
 800069a:	4b5c      	ldr	r3, [pc, #368]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
					Start_Offset_Tilting_Counter=0;
 80006a0:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Tilting_Timer=1;
 80006a6:	4b5b      	ldr	r3, [pc, #364]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Hold_Curing_Timer)
 80006ac:	4b5a      	ldr	r3, [pc, #360]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d012      	beq.n	80006da <HAL_TIM_PeriodElapsedCallback+0x192>
			{
				if(++Start_Hold_Curing_Counter >= Set_Hold_Curing_Timer)
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b57      	ldr	r3, [pc, #348]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2bc7      	cmp	r3, #199	; 0xc7
 80006c6:	d908      	bls.n	80006da <HAL_TIM_PeriodElapsedCallback+0x192>
				{
					Start_Hold_Curing_Timer=0;
 80006c8:	4b53      	ldr	r3, [pc, #332]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
					Start_Hold_Curing_Counter=0;
 80006ce:	4b53      	ldr	r3, [pc, #332]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
					Complete_Hold_Curing_Timer=1;
 80006d4:	4b52      	ldr	r3, [pc, #328]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Rampopen_Timer)
 80006da:	4b52      	ldr	r3, [pc, #328]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d012      	beq.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			{
				if(++Start_Offset_Rampopen_Counter >= Set_Hold_Curing_Timer)
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2bc7      	cmp	r3, #199	; 0xc7
 80006f4:	d908      	bls.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x1c0>
				{
					Start_Offset_Rampopen_Timer=0;
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
					Start_Offset_Rampopen_Counter=0;
 80006fc:	4b4a      	ldr	r3, [pc, #296]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Rampopen_Timer=1;
 8000702:	4b4a      	ldr	r3, [pc, #296]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Sliderout_Timer)
 8000708:	4b49      	ldr	r3, [pc, #292]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d012      	beq.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x1ee>
			{
				if(++Start_Offset_Sliderout_Counter >= Set_Offset_Sliderout_Timer)
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2bc7      	cmp	r3, #199	; 0xc7
 8000722:	d908      	bls.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x1ee>
				{
					Start_Offset_Sliderout_Timer=0;
 8000724:	4b42      	ldr	r3, [pc, #264]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
					Start_Offset_Sliderout_Counter=0;
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Sliderout_Timer=1;
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_EjectionIn_Timer)
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d012      	beq.n	8000764 <HAL_TIM_PeriodElapsedCallback+0x21c>
			{
				if(++Start_Offset_EjectionIn_Counter >= Set_Offset_EjectionIn_Timer)
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2bc7      	cmp	r3, #199	; 0xc7
 8000750:	d908      	bls.n	8000764 <HAL_TIM_PeriodElapsedCallback+0x21c>
				{
					Start_Offset_EjectionIn_Timer=0;
 8000752:	4b3a      	ldr	r3, [pc, #232]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
					Start_Offset_EjectionIn_Counter=0;
 8000758:	4b39      	ldr	r3, [pc, #228]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
					Complete_Offset_EjectionIn_Timer=1;
 800075e:	4b39      	ldr	r3, [pc, #228]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Ejectionout_Timer)
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d012      	beq.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x24a>
			{
				if(++Start_Offset_Ejectionout_Counter >= Set_Offset_Ejectionout_Timer)
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b35      	ldr	r3, [pc, #212]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	4b34      	ldr	r3, [pc, #208]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2bc7      	cmp	r3, #199	; 0xc7
 800077e:	d908      	bls.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x24a>
				{
					Start_Offset_Ejectionout_Timer=0;
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
					Start_Offset_Ejectionout_Counter=0;
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Ejectionout_Timer=1;
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(++Count500ms >= 4)
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d905      	bls.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x26a>
		{
			Count500ms=0;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
			Flag500ms = 1;
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	2000015c 	.word	0x2000015c
 80007c0:	20000028 	.word	0x20000028
 80007c4:	20000039 	.word	0x20000039
 80007c8:	2000002a 	.word	0x2000002a
 80007cc:	20000038 	.word	0x20000038
 80007d0:	200001a4 	.word	0x200001a4
 80007d4:	20000029 	.word	0x20000029
 80007d8:	20000037 	.word	0x20000037
 80007dc:	2000007b 	.word	0x2000007b
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	2000003b 	.word	0x2000003b
 80007e8:	2000007c 	.word	0x2000007c
 80007ec:	2000002e 	.word	0x2000002e
 80007f0:	2000003c 	.word	0x2000003c
 80007f4:	2000007d 	.word	0x2000007d
 80007f8:	2000002f 	.word	0x2000002f
 80007fc:	2000003d 	.word	0x2000003d
 8000800:	2000007e 	.word	0x2000007e
 8000804:	20000030 	.word	0x20000030
 8000808:	2000003e 	.word	0x2000003e
 800080c:	2000007f 	.word	0x2000007f
 8000810:	20000031 	.word	0x20000031
 8000814:	2000003f 	.word	0x2000003f
 8000818:	20000080 	.word	0x20000080
 800081c:	20000032 	.word	0x20000032
 8000820:	20000040 	.word	0x20000040
 8000824:	20000081 	.word	0x20000081
 8000828:	20000033 	.word	0x20000033
 800082c:	20000041 	.word	0x20000041
 8000830:	20000082 	.word	0x20000082
 8000834:	20000034 	.word	0x20000034
 8000838:	20000042 	.word	0x20000042
 800083c:	20000083 	.word	0x20000083
 8000840:	20000035 	.word	0x20000035
 8000844:	20000043 	.word	0x20000043
 8000848:	20000084 	.word	0x20000084
 800084c:	20000036 	.word	0x20000036
 8000850:	20000044 	.word	0x20000044
 8000854:	2000002b 	.word	0x2000002b
 8000858:	2000003a 	.word	0x2000003a

0800085c <InputOutputTest>:

void InputOutputTest(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
/*	HAL_GPIO_WritePin(GPIOD, MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
	                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin, GPIO_PIN_SET);*/

}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <HAL_UART_RxCpltCallback>:

uint16_t CuringTime_k1,TIltingup_k1,tinltingdown_k1,sliderin_k1,SLiderout_k1,Ejectionon_k1,Ejectionoff_k1;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if((DWINRxData[1] == 0x03)&&(DWINRxData[2] == 0x14))
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 8000872:	785b      	ldrb	r3, [r3, #1]
 8000874:	2b03      	cmp	r3, #3
 8000876:	f040 80be 	bne.w	80009f6 <HAL_UART_RxCpltCallback+0x18e>
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	2b14      	cmp	r3, #20
 8000880:	f040 80b9 	bne.w	80009f6 <HAL_UART_RxCpltCallback+0x18e>
	{
		CuringTime 		= (DWINRxData[3]<<8 | DWINRxData[4]);
 8000884:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 8000886:	78db      	ldrb	r3, [r3, #3]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <HAL_UART_RxCpltCallback+0x19c>)
 800089a:	801a      	strh	r2, [r3, #0]
		TIltingup 		= (DWINRxData[5]<<8 | DWINRxData[6]);
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21a      	sxth	r2, r3
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <HAL_UART_RxCpltCallback+0x1a0>)
 80008b2:	801a      	strh	r2, [r3, #0]
		tinltingdown 	= (DWINRxData[7]<<8 | DWINRxData[8]);
 80008b4:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008b6:	79db      	ldrb	r3, [r3, #7]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008be:	7a1b      	ldrb	r3, [r3, #8]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <HAL_UART_RxCpltCallback+0x1a4>)
 80008ca:	801a      	strh	r2, [r3, #0]
		sliderin 		= (DWINRxData[9]<<8 | DWINRxData[10]);
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008ce:	7a5b      	ldrb	r3, [r3, #9]
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008d6:	7a9b      	ldrb	r3, [r3, #10]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <HAL_UART_RxCpltCallback+0x1a8>)
 80008e2:	801a      	strh	r2, [r3, #0]
		SLiderout 		= (DWINRxData[11]<<8 | DWINRxData[12]);
 80008e4:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008e6:	7adb      	ldrb	r3, [r3, #11]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008ee:	7b1b      	ldrb	r3, [r3, #12]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <HAL_UART_RxCpltCallback+0x1ac>)
 80008fa:	801a      	strh	r2, [r3, #0]
		Ejectionon 		= (DWINRxData[13]<<8 | DWINRxData[14]);
 80008fc:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 80008fe:	7b5b      	ldrb	r3, [r3, #13]
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 8000906:	7b9b      	ldrb	r3, [r3, #14]
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21b      	sxth	r3, r3
 800090e:	b29a      	uxth	r2, r3
 8000910:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <HAL_UART_RxCpltCallback+0x1b0>)
 8000912:	801a      	strh	r2, [r3, #0]
		Ejectionoff 	= (DWINRxData[15]<<8 | DWINRxData[16]);
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 8000916:	7bdb      	ldrb	r3, [r3, #15]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <HAL_UART_RxCpltCallback+0x198>)
 800091e:	7c1b      	ldrb	r3, [r3, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21b      	sxth	r3, r3
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <HAL_UART_RxCpltCallback+0x1b4>)
 800092a:	801a      	strh	r2, [r3, #0]

		if(((CuringTime != CuringTime_k1)&&(CuringTime > 0))||((TIltingup != TIltingup_k1)&&(TIltingup>0))
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <HAL_UART_RxCpltCallback+0x19c>)
 800092e:	881a      	ldrh	r2, [r3, #0]
 8000930:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <HAL_UART_RxCpltCallback+0x1b8>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d003      	beq.n	8000940 <HAL_UART_RxCpltCallback+0xd8>
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <HAL_UART_RxCpltCallback+0x19c>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d13b      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x150>
 8000940:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <HAL_UART_RxCpltCallback+0x1a0>)
 8000942:	881a      	ldrh	r2, [r3, #0]
 8000944:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <HAL_UART_RxCpltCallback+0x1bc>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d003      	beq.n	8000954 <HAL_UART_RxCpltCallback+0xec>
 800094c:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <HAL_UART_RxCpltCallback+0x1a0>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d131      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x150>
		||((tinltingdown != tinltingdown_k1)&&(tinltingdown>0))||((sliderin != sliderin_k1)&&(sliderin>0))
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <HAL_UART_RxCpltCallback+0x1a4>)
 8000956:	881a      	ldrh	r2, [r3, #0]
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <HAL_UART_RxCpltCallback+0x1c0>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d003      	beq.n	8000968 <HAL_UART_RxCpltCallback+0x100>
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <HAL_UART_RxCpltCallback+0x1a4>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d127      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x150>
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <HAL_UART_RxCpltCallback+0x1a8>)
 800096a:	881a      	ldrh	r2, [r3, #0]
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <HAL_UART_RxCpltCallback+0x1c4>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d003      	beq.n	800097c <HAL_UART_RxCpltCallback+0x114>
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <HAL_UART_RxCpltCallback+0x1a8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d11d      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x150>
		||((SLiderout != SLiderout_k1)&&(SLiderout>0))||((Ejectionon != Ejectionon_k1)&&(Ejectionon>0))
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_UART_RxCpltCallback+0x1ac>)
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_UART_RxCpltCallback+0x1c8>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d003      	beq.n	8000990 <HAL_UART_RxCpltCallback+0x128>
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <HAL_UART_RxCpltCallback+0x1ac>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d113      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x150>
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_UART_RxCpltCallback+0x1b0>)
 8000992:	881a      	ldrh	r2, [r3, #0]
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <HAL_UART_RxCpltCallback+0x1cc>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d003      	beq.n	80009a4 <HAL_UART_RxCpltCallback+0x13c>
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_UART_RxCpltCallback+0x1b0>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d109      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x150>
		||((Ejectionoff != Ejectionoff_k1)&&(Ejectionoff>0)))
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_UART_RxCpltCallback+0x1b4>)
 80009a6:	881a      	ldrh	r2, [r3, #0]
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <HAL_UART_RxCpltCallback+0x1d0>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d006      	beq.n	80009be <HAL_UART_RxCpltCallback+0x156>
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_UART_RxCpltCallback+0x1b4>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <HAL_UART_RxCpltCallback+0x156>
		{
			Trigger_Hmi_Data_Save =1;
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <HAL_UART_RxCpltCallback+0x1d4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
		}

		CuringTime_k1 = CuringTime;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_RxCpltCallback+0x19c>)
 80009c0:	881a      	ldrh	r2, [r3, #0]
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_UART_RxCpltCallback+0x1b8>)
 80009c4:	801a      	strh	r2, [r3, #0]
		TIltingup_k1 = TIltingup;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_UART_RxCpltCallback+0x1a0>)
 80009c8:	881a      	ldrh	r2, [r3, #0]
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_UART_RxCpltCallback+0x1bc>)
 80009cc:	801a      	strh	r2, [r3, #0]
		tinltingdown_k1 = tinltingdown;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_UART_RxCpltCallback+0x1a4>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_RxCpltCallback+0x1c0>)
 80009d4:	801a      	strh	r2, [r3, #0]
		sliderin_k1 = sliderin;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_UART_RxCpltCallback+0x1a8>)
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_UART_RxCpltCallback+0x1c4>)
 80009dc:	801a      	strh	r2, [r3, #0]
		SLiderout_k1 = SLiderout;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_UART_RxCpltCallback+0x1ac>)
 80009e0:	881a      	ldrh	r2, [r3, #0]
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_UART_RxCpltCallback+0x1c8>)
 80009e4:	801a      	strh	r2, [r3, #0]
		Ejectionon_k1 = Ejectionon;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_UART_RxCpltCallback+0x1b0>)
 80009e8:	881a      	ldrh	r2, [r3, #0]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_UART_RxCpltCallback+0x1cc>)
 80009ec:	801a      	strh	r2, [r3, #0]
		Ejectionoff_k1 = Ejectionoff;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_UART_RxCpltCallback+0x1b4>)
 80009f0:	881a      	ldrh	r2, [r3, #0]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_RxCpltCallback+0x1d0>)
 80009f4:	801a      	strh	r2, [r3, #0]
	}

}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	20000070 	.word	0x20000070
 8000a08:	2000006c 	.word	0x2000006c
 8000a0c:	2000006e 	.word	0x2000006e
 8000a10:	20000072 	.word	0x20000072
 8000a14:	20000074 	.word	0x20000074
 8000a18:	20000076 	.word	0x20000076
 8000a1c:	20000078 	.word	0x20000078
 8000a20:	20000048 	.word	0x20000048
 8000a24:	2000004a 	.word	0x2000004a
 8000a28:	2000004c 	.word	0x2000004c
 8000a2c:	2000004e 	.word	0x2000004e
 8000a30:	20000050 	.word	0x20000050
 8000a34:	20000052 	.word	0x20000052
 8000a38:	20000054 	.word	0x20000054
 8000a3c:	20000046 	.word	0x20000046

08000a40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,DWINRxData,RxNoOfData);
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_UART_TxCpltCallback+0x20>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4905      	ldr	r1, [pc, #20]	; (8000a64 <HAL_UART_TxCpltCallback+0x24>)
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_TxCpltCallback+0x28>)
 8000a52:	f004 fa1a 	bl	8004e8a <HAL_UART_Receive_IT>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000ec 	.word	0x200000ec
 8000a64:	200000ac 	.word	0x200000ac
 8000a68:	200001ec 	.word	0x200001ec

08000a6c <gdc_businesslogic>:

void Auto_business_logic(const Hw_Inputs);
void Manual_business_logic(const Hw_Inputs);

void gdc_businesslogic(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af02      	add	r7, sp, #8
	/*Read the inputs*/
	input.Auto_Manual 			=	HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 8000a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a76:	4895      	ldr	r0, [pc, #596]	; (8000ccc <gdc_businesslogic+0x260>)
 8000a78:	f002 fa6e 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b93      	ldr	r3, [pc, #588]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000a82:	701a      	strb	r2, [r3, #0]
	if(input.Auto_Manual == GPIO_PIN_SET){
 8000a84:	4b92      	ldr	r3, [pc, #584]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d107      	bne.n	8000a9c <gdc_businesslogic+0x30>
		Inputs_Status = Inputs_Status & ~(1 << 0);
 8000a8c:	4b91      	ldr	r3, [pc, #580]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b8f      	ldr	r3, [pc, #572]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	e006      	b.n	8000aaa <gdc_businesslogic+0x3e>
	}else{
		Inputs_Status = Inputs_Status |(1 <<0);
 8000a9c:	4b8d      	ldr	r3, [pc, #564]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b8b      	ldr	r3, [pc, #556]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000aa8:	801a      	strh	r2, [r3, #0]
	}

	input.cycleStart 			=	HAL_GPIO_ReadPin(GPIOE,CycleStart_Switch_Pin);
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	488a      	ldr	r0, [pc, #552]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000aae:	f002 fa53 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b86      	ldr	r3, [pc, #536]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000ab8:	705a      	strb	r2, [r3, #1]
	if(input.cycleStart == GPIO_PIN_SET){
 8000aba:	4b85      	ldr	r3, [pc, #532]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d107      	bne.n	8000ad2 <gdc_businesslogic+0x66>
		Inputs_Status = Inputs_Status & ~(1 << 1);
 8000ac2:	4b84      	ldr	r3, [pc, #528]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	f023 0302 	bic.w	r3, r3, #2
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b81      	ldr	r3, [pc, #516]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000ace:	801a      	strh	r2, [r3, #0]
 8000ad0:	e006      	b.n	8000ae0 <gdc_businesslogic+0x74>
	}else{
		Inputs_Status = Inputs_Status |(1 <<1);
 8000ad2:	4b80      	ldr	r3, [pc, #512]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b7d      	ldr	r3, [pc, #500]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000ade:	801a      	strh	r2, [r3, #0]
	}
	input.Emergency 			=	HAL_GPIO_ReadPin(GPIOB,Emergency_Switch_Pin);
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	4879      	ldr	r0, [pc, #484]	; (8000ccc <gdc_businesslogic+0x260>)
 8000ae6:	f002 fa37 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b78      	ldr	r3, [pc, #480]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000af0:	709a      	strb	r2, [r3, #2]
	if(input.Emergency == GPIO_PIN_SET){
 8000af2:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d107      	bne.n	8000b0a <gdc_businesslogic+0x9e>
		Inputs_Status = Inputs_Status & ~(1 << 2);
 8000afa:	4b76      	ldr	r3, [pc, #472]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	f023 0304 	bic.w	r3, r3, #4
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b06:	801a      	strh	r2, [r3, #0]
 8000b08:	e006      	b.n	8000b18 <gdc_businesslogic+0xac>
	}else{
		Inputs_Status = Inputs_Status |(1 <<2);
 8000b0a:	4b72      	ldr	r3, [pc, #456]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b6f      	ldr	r3, [pc, #444]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b16:	801a      	strh	r2, [r3, #0]
	}

	input.Ram_close_switch 		=	HAL_GPIO_ReadPin(GPIOE,RampClose_Switch_Pin);
 8000b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1c:	486e      	ldr	r0, [pc, #440]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000b1e:	f002 fa1b 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b6a      	ldr	r3, [pc, #424]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000b28:	70da      	strb	r2, [r3, #3]
	if(input.Ram_close_switch == GPIO_PIN_SET){
 8000b2a:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000b2c:	78db      	ldrb	r3, [r3, #3]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d107      	bne.n	8000b42 <gdc_businesslogic+0xd6>
		Inputs_Status = Inputs_Status & ~(1 << 3);
 8000b32:	4b68      	ldr	r3, [pc, #416]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	f023 0308 	bic.w	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b3e:	801a      	strh	r2, [r3, #0]
 8000b40:	e006      	b.n	8000b50 <gdc_businesslogic+0xe4>
	}else{
		Inputs_Status = Inputs_Status |(1 <<3);
 8000b42:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b4e:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Open_Switch 		=	HAL_GPIO_ReadPin(GPIOE,RampOpen_Switch_Pin);
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	4860      	ldr	r0, [pc, #384]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000b56:	f002 f9ff 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b5c      	ldr	r3, [pc, #368]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000b60:	711a      	strb	r2, [r3, #4]
	if(input.Ram_Open_Switch == GPIO_PIN_SET){
 8000b62:	4b5b      	ldr	r3, [pc, #364]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d107      	bne.n	8000b7a <gdc_businesslogic+0x10e>
		Inputs_Status = Inputs_Status & ~(1 << 4);
 8000b6a:	4b5a      	ldr	r3, [pc, #360]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	f023 0310 	bic.w	r3, r3, #16
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b57      	ldr	r3, [pc, #348]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	e006      	b.n	8000b88 <gdc_businesslogic+0x11c>
	}else{
		Inputs_Status = Inputs_Status |(1 <<4);
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000b86:	801a      	strh	r2, [r3, #0]
	}
	input.Tilting_Up_Switch 	=	HAL_GPIO_ReadPin(GPIOE,TiltingUp_Switch_Pin);
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	4852      	ldr	r0, [pc, #328]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000b8e:	f002 f9e3 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b4e      	ldr	r3, [pc, #312]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000b98:	715a      	strb	r2, [r3, #5]
	if(input.Tilting_Up_Switch == GPIO_PIN_SET){
 8000b9a:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000b9c:	795b      	ldrb	r3, [r3, #5]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d107      	bne.n	8000bb2 <gdc_businesslogic+0x146>
		Inputs_Status = Inputs_Status & ~(1 << 5);
 8000ba2:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	f023 0320 	bic.w	r3, r3, #32
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	e006      	b.n	8000bc0 <gdc_businesslogic+0x154>
	}else{
		Inputs_Status = Inputs_Status |(1 <<5);
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000bbe:	801a      	strh	r2, [r3, #0]
	}
	input.Tilting_down_switch 	=	HAL_GPIO_ReadPin(GPIOE,TiltingDown_Switch_Pin);
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	4844      	ldr	r0, [pc, #272]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000bc6:	f002 f9c7 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000bd0:	719a      	strb	r2, [r3, #6]
	if(input.Tilting_down_switch == GPIO_PIN_SET){
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000bd4:	799b      	ldrb	r3, [r3, #6]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d107      	bne.n	8000bea <gdc_businesslogic+0x17e>
		Inputs_Status = Inputs_Status & ~(1 << 6);
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b3b      	ldr	r3, [pc, #236]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	e006      	b.n	8000bf8 <gdc_businesslogic+0x18c>
	}else{
		Inputs_Status = Inputs_Status |(1 <<6);
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	}
	input.Ejection_In 			=	HAL_GPIO_ReadPin(GPIOE,EjectionIn_Switch_Pin);
 8000bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfc:	4836      	ldr	r0, [pc, #216]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000bfe:	f002 f9ab 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000c08:	71da      	strb	r2, [r3, #7]
	if(input.Ejection_In == GPIO_PIN_SET){
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d107      	bne.n	8000c22 <gdc_businesslogic+0x1b6>
		Inputs_Status = Inputs_Status & ~(1 << 7);
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	e006      	b.n	8000c30 <gdc_businesslogic+0x1c4>
	}else{
		Inputs_Status = Inputs_Status |(1 <<7);
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c2e:	801a      	strh	r2, [r3, #0]
	}
	input.Ejection_Output 		=	HAL_GPIO_ReadPin(GPIOE,EjectionOut_Switch_Pin);
 8000c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c34:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000c36:	f002 f98f 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000c40:	721a      	strb	r2, [r3, #8]
	if(input.Ejection_Output == GPIO_PIN_SET){
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000c44:	7a1b      	ldrb	r3, [r3, #8]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d107      	bne.n	8000c5a <gdc_businesslogic+0x1ee>
		Inputs_Status = Inputs_Status & ~(1 << 8);
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c56:	801a      	strh	r2, [r3, #0]
 8000c58:	e006      	b.n	8000c68 <gdc_businesslogic+0x1fc>
	}else{
		Inputs_Status = Inputs_Status |(1 <<8);
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c66:	801a      	strh	r2, [r3, #0]
	}
	input.Slider_In_Switch 		=	HAL_GPIO_ReadPin(GPIOE,SliderIn_Switch_Pin);
 8000c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6c:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000c6e:	f002 f973 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000c78:	725a      	strb	r2, [r3, #9]
	if(input.Slider_In_Switch == GPIO_PIN_SET){
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000c7c:	7a5b      	ldrb	r3, [r3, #9]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d107      	bne.n	8000c92 <gdc_businesslogic+0x226>
		Inputs_Status = Inputs_Status & ~(1 << 9);
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	e006      	b.n	8000ca0 <gdc_businesslogic+0x234>
	}else{
		Inputs_Status = Inputs_Status |(1 <<9);
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000c9e:	801a      	strh	r2, [r3, #0]
	}
	input.Slider_Out_Switch 	=	HAL_GPIO_ReadPin(GPIOE,SliderOut_Switch_Pin);
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <gdc_businesslogic+0x26c>)
 8000ca6:	f002 f957 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000cb0:	729a      	strb	r2, [r3, #10]
	if(input.Slider_Out_Switch == GPIO_PIN_SET){
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <gdc_businesslogic+0x264>)
 8000cb4:	7a9b      	ldrb	r3, [r3, #10]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d110      	bne.n	8000cdc <gdc_businesslogic+0x270>
		Inputs_Status = Inputs_Status & ~(1 << 10);
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <gdc_businesslogic+0x268>)
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	e00f      	b.n	8000cea <gdc_businesslogic+0x27e>
 8000cca:	bf00      	nop
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	20000058 	.word	0x20000058
 8000cd4:	2000006a 	.word	0x2000006a
 8000cd8:	40011800 	.word	0x40011800

	}else{
		Inputs_Status = Inputs_Status |(1 <<10);
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b58      	ldr	r3, [pc, #352]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000ce8:	801a      	strh	r2, [r3, #0]
	}
	input.MotorOn_Switch 			=	HAL_GPIO_ReadPin(GPIOB,MotorON_Switch_Pin);
 8000cea:	2102      	movs	r1, #2
 8000cec:	4857      	ldr	r0, [pc, #348]	; (8000e4c <gdc_businesslogic+0x3e0>)
 8000cee:	f002 f933 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000cf8:	72da      	strb	r2, [r3, #11]
	if(input.MotorOn_Switch == GPIO_PIN_SET){
 8000cfa:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000cfc:	7adb      	ldrb	r3, [r3, #11]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d107      	bne.n	8000d12 <gdc_businesslogic+0x2a6>
		Inputs_Status = Inputs_Status & ~(1 << 11);
 8000d02:	4b51      	ldr	r3, [pc, #324]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d0e:	801a      	strh	r2, [r3, #0]
 8000d10:	e006      	b.n	8000d20 <gdc_businesslogic+0x2b4>

	}else{
		Inputs_Status = Inputs_Status |(1 <<11);
 8000d12:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d1e:	801a      	strh	r2, [r3, #0]
	}
	input.MotorOff_Switch 			=	HAL_GPIO_ReadPin(GPIOB,MotorOff_Switch_Pin);
 8000d20:	2101      	movs	r1, #1
 8000d22:	484a      	ldr	r0, [pc, #296]	; (8000e4c <gdc_businesslogic+0x3e0>)
 8000d24:	f002 f918 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000d2e:	731a      	strb	r2, [r3, #12]
	if(input.MotorOff_Switch == GPIO_PIN_SET){
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000d32:	7b1b      	ldrb	r3, [r3, #12]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d107      	bne.n	8000d48 <gdc_businesslogic+0x2dc>
		Inputs_Status = Inputs_Status & ~(1 << 12);
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d44:	801a      	strh	r2, [r3, #0]
 8000d46:	e006      	b.n	8000d56 <gdc_businesslogic+0x2ea>

	}else{
		Inputs_Status = Inputs_Status |(1 <<12);
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d54:	801a      	strh	r2, [r3, #0]
	}
	input.Station_Conformation 			=	HAL_GPIO_ReadPin(GPIOA,StationInfo_Sensor_Pin);
 8000d56:	2102      	movs	r1, #2
 8000d58:	483e      	ldr	r0, [pc, #248]	; (8000e54 <gdc_businesslogic+0x3e8>)
 8000d5a:	f002 f8fd 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000d64:	735a      	strb	r2, [r3, #13]
	if(input.Station_Conformation == GPIO_PIN_SET){
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000d68:	7b5b      	ldrb	r3, [r3, #13]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d107      	bne.n	8000d7e <gdc_businesslogic+0x312>
		Inputs_Status = Inputs_Status & ~(1 << 13);
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d7a:	801a      	strh	r2, [r3, #0]
 8000d7c:	e006      	b.n	8000d8c <gdc_businesslogic+0x320>

	}else{
		Inputs_Status = Inputs_Status |(1 <<13);
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000d8a:	801a      	strh	r2, [r3, #0]
	}
	input.Robo_Acknowledgment 			=	HAL_GPIO_ReadPin(GPIOA,Robo_Ack_Input_Pin);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4831      	ldr	r0, [pc, #196]	; (8000e54 <gdc_businesslogic+0x3e8>)
 8000d90:	f002 f8e2 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000d9a:	739a      	strb	r2, [r3, #14]
	if(input.Robo_Acknowledgment == GPIO_PIN_SET){
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000d9e:	7b9b      	ldrb	r3, [r3, #14]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d107      	bne.n	8000db4 <gdc_businesslogic+0x348>
		Inputs_Status = Inputs_Status & ~(1 << 14);
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000db0:	801a      	strh	r2, [r3, #0]
 8000db2:	e006      	b.n	8000dc2 <gdc_businesslogic+0x356>

	}else{
		Inputs_Status = Inputs_Status |(1 <<14);
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000dc0:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Open_Sensor 			=	HAL_GPIO_ReadPin(GPIOC,Rampopen_sensor_Pin);
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4824      	ldr	r0, [pc, #144]	; (8000e58 <gdc_businesslogic+0x3ec>)
 8000dc6:	f002 f8c7 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000dd0:	73da      	strb	r2, [r3, #15]
	if(input.Ram_Open_Sensor == GPIO_PIN_SET){
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000dd4:	7bdb      	ldrb	r3, [r3, #15]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d107      	bne.n	8000dea <gdc_businesslogic+0x37e>
		Inputs_Status = Inputs_Status & ~(1 << 15);
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	e008      	b.n	8000dfc <gdc_businesslogic+0x390>

	}else{
		Inputs_Status = Inputs_Status |(1 <<15);
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <gdc_businesslogic+0x3dc>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Close_Sensor 			=	HAL_GPIO_ReadPin(GPIOC,Rampclose_sensor_Pin);
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4816      	ldr	r0, [pc, #88]	; (8000e58 <gdc_businesslogic+0x3ec>)
 8000e00:	f002 f8aa 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000e0a:	741a      	strb	r2, [r3, #16]
	input.TiltingDown_Sensor 			=	HAL_GPIO_ReadPin(GPIOC,Tiltingdown_sensor_Pin);
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	4812      	ldr	r0, [pc, #72]	; (8000e58 <gdc_businesslogic+0x3ec>)
 8000e10:	f002 f8a2 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000e1a:	745a      	strb	r2, [r3, #17]
	if(input.Auto_Manual == GPIO_PIN_SET){//execute auto code
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d107      	bne.n	8000e34 <gdc_businesslogic+0x3c8>
		Auto_business_logic(input);
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000e26:	8a1a      	ldrh	r2, [r3, #16]
 8000e28:	f8ad 2000 	strh.w	r2, [sp]
 8000e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2e:	f000 f815 	bl	8000e5c <Auto_business_logic>
	}
	else{//execute manual code
		Manual_business_logic(input);
	}
}
 8000e32:	e006      	b.n	8000e42 <gdc_businesslogic+0x3d6>
		Manual_business_logic(input);
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <gdc_businesslogic+0x3e4>)
 8000e36:	8a1a      	ldrh	r2, [r3, #16]
 8000e38:	f8ad 2000 	strh.w	r2, [sp]
 8000e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3e:	f000 f9a5 	bl	800118c <Manual_business_logic>
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000006a 	.word	0x2000006a
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	20000058 	.word	0x20000058
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40011000 	.word	0x40011000

08000e5c <Auto_business_logic>:


void Auto_business_logic(const Hw_Inputs input_status)
{
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	f107 0c08 	add.w	ip, r7, #8
 8000e66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(current_state_auto)
 8000e6a:	4bb0      	ldr	r3, [pc, #704]	; (800112c <Auto_business_logic+0x2d0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b15      	cmp	r3, #21
 8000e70:	f200 813b 	bhi.w	80010ea <Auto_business_logic+0x28e>
 8000e74:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <Auto_business_logic+0x20>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000ed5 	.word	0x08000ed5
 8000e80:	08000eeb 	.word	0x08000eeb
 8000e84:	08000f05 	.word	0x08000f05
 8000e88:	08000f1d 	.word	0x08000f1d
 8000e8c:	08000f47 	.word	0x08000f47
 8000e90:	08000f5f 	.word	0x08000f5f
 8000e94:	08000f79 	.word	0x08000f79
 8000e98:	08000f91 	.word	0x08000f91
 8000e9c:	08000f9f 	.word	0x08000f9f
 8000ea0:	08000fb7 	.word	0x08000fb7
 8000ea4:	08000fdd 	.word	0x08000fdd
 8000ea8:	08000ff5 	.word	0x08000ff5
 8000eac:	08001003 	.word	0x08001003
 8000eb0:	0800101b 	.word	0x0800101b
 8000eb4:	08001035 	.word	0x08001035
 8000eb8:	0800104b 	.word	0x0800104b
 8000ebc:	08001065 	.word	0x08001065
 8000ec0:	0800107b 	.word	0x0800107b
 8000ec4:	08001093 	.word	0x08001093
 8000ec8:	080010a9 	.word	0x080010a9
 8000ecc:	080010c1 	.word	0x080010c1
 8000ed0:	080010d7 	.word	0x080010d7
	{
		case 0://wait for cycle start
			current_state_auto=0;
 8000ed4:	4b95      	ldr	r3, [pc, #596]	; (800112c <Auto_business_logic+0x2d0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			if(input_status.cycleStart == GPIO_PIN_RESET){
 8000eda:	7a7b      	ldrb	r3, [r7, #9]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 8108 	bne.w	80010f2 <Auto_business_logic+0x296>
				current_state_auto=1;
 8000ee2:	4b92      	ldr	r3, [pc, #584]	; (800112c <Auto_business_logic+0x2d0>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000ee8:	e103      	b.n	80010f2 <Auto_business_logic+0x296>
		case 1:
			if(SLIDERVALVE){
				HAL_GPIO_WritePin(GPIOD,RampOpen_valve_Pin,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	488f      	ldr	r0, [pc, #572]	; (8001130 <Auto_business_logic+0x2d4>)
 8000ef2:	f002 f848 	bl	8002f86 <HAL_GPIO_WritePin>
				Start_Offset_Slider_Timer = 1;
 8000ef6:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <Auto_business_logic+0x2d8>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
				current_state_auto=2;
 8000efc:	4b8b      	ldr	r3, [pc, #556]	; (800112c <Auto_business_logic+0x2d0>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				current_state_auto=3;
			}
		break;
 8000f02:	e10d      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 2://Offset timer for slider valve
			if(Complete_Offset_Timer_Slider==1)
 8000f04:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <Auto_business_logic+0x2dc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	f040 80f4 	bne.w	80010f6 <Auto_business_logic+0x29a>
			{
				Complete_Offset_Timer_Slider=0;
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <Auto_business_logic+0x2dc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
				current_state_auto=3;
 8000f14:	4b85      	ldr	r3, [pc, #532]	; (800112c <Auto_business_logic+0x2d0>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	701a      	strb	r2, [r3, #0]
			}
			if(SLIDERVALVE==0){
				current_state_auto=3;
			}
		break;
 8000f1a:	e0ec      	b.n	80010f6 <Auto_business_logic+0x29a>
		case 3://Check preconditions ramp close
			if((input_status.Ram_Close_Sensor== GPIO_PIN_SET)&&(input_status.Ram_Open_Sensor == GPIO_PIN_RESET))
 8000f1c:	7e3b      	ldrb	r3, [r7, #24]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f040 80eb 	bne.w	80010fa <Auto_business_logic+0x29e>
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 80e7 	bne.w	80010fa <Auto_business_logic+0x29e>
			{
				HAL_GPIO_WritePin(GPIOD,RampCLose_valve_Pin,GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f32:	487f      	ldr	r0, [pc, #508]	; (8001130 <Auto_business_logic+0x2d4>)
 8000f34:	f002 f827 	bl	8002f86 <HAL_GPIO_WritePin>
				current_state_auto=4;
 8000f38:	4b7c      	ldr	r3, [pc, #496]	; (800112c <Auto_business_logic+0x2d0>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	701a      	strb	r2, [r3, #0]
				Start_Offset_RampClose_Timer=1;
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	; (800113c <Auto_business_logic+0x2e0>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f44:	e0d9      	b.n	80010fa <Auto_business_logic+0x29e>
		case 4:
			if(Complete_Offset_RampClose_Timer==1)
 8000f46:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <Auto_business_logic+0x2e4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	f040 80d7 	bne.w	80010fe <Auto_business_logic+0x2a2>
			{
				Complete_Offset_RampClose_Timer=0;
 8000f50:	4b7b      	ldr	r3, [pc, #492]	; (8001140 <Auto_business_logic+0x2e4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
				current_state_auto=5;
 8000f56:	4b75      	ldr	r3, [pc, #468]	; (800112c <Auto_business_logic+0x2d0>)
 8000f58:	2205      	movs	r2, #5
 8000f5a:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f5c:	e0cf      	b.n	80010fe <Auto_business_logic+0x2a2>
		case 5://Tilting up pre-condiion
			HAL_GPIO_WritePin(GPIOD,TiltingUp_valve_Pin,GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	4872      	ldr	r0, [pc, #456]	; (8001130 <Auto_business_logic+0x2d4>)
 8000f66:	f002 f80e 	bl	8002f86 <HAL_GPIO_WritePin>
			Start_Offset_Tiltingup_Timer=1;
 8000f6a:	4b76      	ldr	r3, [pc, #472]	; (8001144 <Auto_business_logic+0x2e8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
			current_state_auto=6;
 8000f70:	4b6e      	ldr	r3, [pc, #440]	; (800112c <Auto_business_logic+0x2d0>)
 8000f72:	2206      	movs	r2, #6
 8000f74:	701a      	strb	r2, [r3, #0]
		break;
 8000f76:	e0d3      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 6:
			if(Complete_Offset_Tiltingup_Timer==1)
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <Auto_business_logic+0x2ec>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f040 80c0 	bne.w	8001102 <Auto_business_logic+0x2a6>
			{
				Complete_Offset_Tiltingup_Timer=0;
 8000f82:	4b71      	ldr	r3, [pc, #452]	; (8001148 <Auto_business_logic+0x2ec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
				current_state_auto=7;
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <Auto_business_logic+0x2d0>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f8e:	e0b8      	b.n	8001102 <Auto_business_logic+0x2a6>
			{
				current_state_auto=9;
			}
			else
			{
				Start_Hold_Pouringwait_Timer=1;
 8000f90:	4b6e      	ldr	r3, [pc, #440]	; (800114c <Auto_business_logic+0x2f0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
				current_state_auto=8;
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <Auto_business_logic+0x2d0>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f9c:	e0c0      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 8:
			if(Complete_Hold_Pouringwait_Timer==1)
 8000f9e:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <Auto_business_logic+0x2f4>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	f040 80af 	bne.w	8001106 <Auto_business_logic+0x2aa>
			{
				Complete_Hold_Pouringwait_Timer=0;
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <Auto_business_logic+0x2f4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
				current_state_auto=9;
 8000fae:	4b5f      	ldr	r3, [pc, #380]	; (800112c <Auto_business_logic+0x2d0>)
 8000fb0:	2209      	movs	r2, #9
 8000fb2:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000fb4:	e0a7      	b.n	8001106 <Auto_business_logic+0x2aa>
		case 9:
			HAL_GPIO_WritePin(GPIOD,TiltingUp_valve_Pin,GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbc:	485c      	ldr	r0, [pc, #368]	; (8001130 <Auto_business_logic+0x2d4>)
 8000fbe:	f001 ffe2 	bl	8002f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,TiltingDown_valve_Pin,GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4859      	ldr	r0, [pc, #356]	; (8001130 <Auto_business_logic+0x2d4>)
 8000fca:	f001 ffdc 	bl	8002f86 <HAL_GPIO_WritePin>
			Start_Offset_Tilting_Timer =1;
 8000fce:	4b61      	ldr	r3, [pc, #388]	; (8001154 <Auto_business_logic+0x2f8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
			current_state_auto=10;
 8000fd4:	4b55      	ldr	r3, [pc, #340]	; (800112c <Auto_business_logic+0x2d0>)
 8000fd6:	220a      	movs	r2, #10
 8000fd8:	701a      	strb	r2, [r3, #0]
		break;
 8000fda:	e0a1      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 10:
			if(Complete_Offset_Tilting_Timer==1)
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <Auto_business_logic+0x2fc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 8092 	bne.w	800110a <Auto_business_logic+0x2ae>
			{
				Complete_Offset_Tilting_Timer=0;
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <Auto_business_logic+0x2fc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
				current_state_auto=11;
 8000fec:	4b4f      	ldr	r3, [pc, #316]	; (800112c <Auto_business_logic+0x2d0>)
 8000fee:	220b      	movs	r2, #11
 8000ff0:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000ff2:	e08a      	b.n	800110a <Auto_business_logic+0x2ae>
		case 11:
			Start_Hold_Curing_Timer=1;
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <Auto_business_logic+0x300>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
			current_state_auto=12;
 8000ffa:	4b4c      	ldr	r3, [pc, #304]	; (800112c <Auto_business_logic+0x2d0>)
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	701a      	strb	r2, [r3, #0]
		break;
 8001000:	e08e      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 12:
			if(Complete_Hold_Curing_Timer==1)
 8001002:	4b57      	ldr	r3, [pc, #348]	; (8001160 <Auto_business_logic+0x304>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	f040 8081 	bne.w	800110e <Auto_business_logic+0x2b2>
			{
				Complete_Hold_Curing_Timer=0;
 800100c:	4b54      	ldr	r3, [pc, #336]	; (8001160 <Auto_business_logic+0x304>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
				current_state_auto=13;
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <Auto_business_logic+0x2d0>)
 8001014:	220d      	movs	r2, #13
 8001016:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001018:	e079      	b.n	800110e <Auto_business_logic+0x2b2>
		case 13://Ramp open
			HAL_GPIO_WritePin(GPIOD,RampOpen_valve_Pin,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001020:	4843      	ldr	r0, [pc, #268]	; (8001130 <Auto_business_logic+0x2d4>)
 8001022:	f001 ffb0 	bl	8002f86 <HAL_GPIO_WritePin>
			Start_Offset_Rampopen_Timer=1;
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <Auto_business_logic+0x308>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
			current_state_auto=14;
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <Auto_business_logic+0x2d0>)
 800102e:	220e      	movs	r2, #14
 8001030:	701a      	strb	r2, [r3, #0]
		break;
 8001032:	e075      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 14:
			if(Complete_Offset_Rampopen_Timer==1)
 8001034:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <Auto_business_logic+0x30c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d16a      	bne.n	8001112 <Auto_business_logic+0x2b6>
			{
				Complete_Offset_Rampopen_Timer=0;
 800103c:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <Auto_business_logic+0x30c>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
				current_state_auto=15;
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <Auto_business_logic+0x2d0>)
 8001044:	220f      	movs	r2, #15
 8001046:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001048:	e063      	b.n	8001112 <Auto_business_logic+0x2b6>
		case 15:
			if(SLIDERVALVE){
				HAL_GPIO_WritePin(GPIOD,SkiderOut_valve_Pin,GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	4837      	ldr	r0, [pc, #220]	; (8001130 <Auto_business_logic+0x2d4>)
 8001052:	f001 ff98 	bl	8002f86 <HAL_GPIO_WritePin>
				Start_Offset_Sliderout_Timer=1;
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <Auto_business_logic+0x310>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
				current_state_auto=16;
 800105c:	4b33      	ldr	r3, [pc, #204]	; (800112c <Auto_business_logic+0x2d0>)
 800105e:	2210      	movs	r2, #16
 8001060:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				current_state_auto=17;
			}
		break;
 8001062:	e05d      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 16:
			if(Complete_Offset_Sliderout_Timer==1)
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <Auto_business_logic+0x314>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d154      	bne.n	8001116 <Auto_business_logic+0x2ba>
			{
				Complete_Offset_Sliderout_Timer=0;
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <Auto_business_logic+0x314>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
				current_state_auto=17;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <Auto_business_logic+0x2d0>)
 8001074:	2211      	movs	r2, #17
 8001076:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001078:	e04d      	b.n	8001116 <Auto_business_logic+0x2ba>
		case 17:
			HAL_GPIO_WritePin(GPIOC,EjectionOn_valve_Pin,GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	483d      	ldr	r0, [pc, #244]	; (8001174 <Auto_business_logic+0x318>)
 8001080:	f001 ff81 	bl	8002f86 <HAL_GPIO_WritePin>
			Start_Offset_EjectionIn_Timer=1;
 8001084:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <Auto_business_logic+0x31c>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
			current_state_auto=18;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <Auto_business_logic+0x2d0>)
 800108c:	2212      	movs	r2, #18
 800108e:	701a      	strb	r2, [r3, #0]
		break;
 8001090:	e046      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 18:
			if(Complete_Offset_EjectionIn_Timer==1)
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <Auto_business_logic+0x320>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d13f      	bne.n	800111a <Auto_business_logic+0x2be>
			{
				Complete_Offset_EjectionIn_Timer=0;
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <Auto_business_logic+0x320>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				current_state_auto=19;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <Auto_business_logic+0x2d0>)
 80010a2:	2213      	movs	r2, #19
 80010a4:	701a      	strb	r2, [r3, #0]
			}
		break;
 80010a6:	e038      	b.n	800111a <Auto_business_logic+0x2be>
		case 19:
			HAL_GPIO_WritePin(GPIOC,EjectionOff_valve_Pin,GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	4831      	ldr	r0, [pc, #196]	; (8001174 <Auto_business_logic+0x318>)
 80010ae:	f001 ff6a 	bl	8002f86 <HAL_GPIO_WritePin>
			Start_Offset_Ejectionout_Timer=1;
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <Auto_business_logic+0x324>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
			current_state_auto=20;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <Auto_business_logic+0x2d0>)
 80010ba:	2214      	movs	r2, #20
 80010bc:	701a      	strb	r2, [r3, #0]
		break;
 80010be:	e02f      	b.n	8001120 <Auto_business_logic+0x2c4>
		case 20:
			if(Complete_Offset_Ejectionout_Timer==1)
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <Auto_business_logic+0x328>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d12a      	bne.n	800111e <Auto_business_logic+0x2c2>
			{
				Complete_Offset_Ejectionout_Timer=0;
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <Auto_business_logic+0x328>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
				current_state_auto=21;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <Auto_business_logic+0x2d0>)
 80010d0:	2215      	movs	r2, #21
 80010d2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80010d4:	e023      	b.n	800111e <Auto_business_logic+0x2c2>
		case 21:
			Production = Production+1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <Auto_business_logic+0x32c>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <Auto_business_logic+0x32c>)
 80010e0:	801a      	strh	r2, [r3, #0]
			current_state_auto=0;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <Auto_business_logic+0x2d0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
		break;
 80010e8:	e01a      	b.n	8001120 <Auto_business_logic+0x2c4>
		default:
			current_state_auto=0;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <Auto_business_logic+0x2d0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
		break;
 80010f0:	e016      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 80010f2:	bf00      	nop
 80010f4:	e014      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 80010f6:	bf00      	nop
 80010f8:	e012      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 80010fa:	bf00      	nop
 80010fc:	e010      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 80010fe:	bf00      	nop
 8001100:	e00e      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 8001102:	bf00      	nop
 8001104:	e00c      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 8001106:	bf00      	nop
 8001108:	e00a      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 800110a:	bf00      	nop
 800110c:	e008      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 800110e:	bf00      	nop
 8001110:	e006      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 8001112:	bf00      	nop
 8001114:	e004      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 8001116:	bf00      	nop
 8001118:	e002      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 800111a:	bf00      	nop
 800111c:	e000      	b.n	8001120 <Auto_business_logic+0x2c4>
		break;
 800111e:	bf00      	nop
	}
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr
 800112c:	2000007a 	.word	0x2000007a
 8001130:	40011400 	.word	0x40011400
 8001134:	2000007b 	.word	0x2000007b
 8001138:	2000003b 	.word	0x2000003b
 800113c:	2000007c 	.word	0x2000007c
 8001140:	2000003c 	.word	0x2000003c
 8001144:	2000007d 	.word	0x2000007d
 8001148:	2000003d 	.word	0x2000003d
 800114c:	2000007e 	.word	0x2000007e
 8001150:	2000003e 	.word	0x2000003e
 8001154:	2000007f 	.word	0x2000007f
 8001158:	2000003f 	.word	0x2000003f
 800115c:	20000080 	.word	0x20000080
 8001160:	20000040 	.word	0x20000040
 8001164:	20000081 	.word	0x20000081
 8001168:	20000041 	.word	0x20000041
 800116c:	20000082 	.word	0x20000082
 8001170:	20000042 	.word	0x20000042
 8001174:	40011000 	.word	0x40011000
 8001178:	20000083 	.word	0x20000083
 800117c:	20000043 	.word	0x20000043
 8001180:	20000084 	.word	0x20000084
 8001184:	20000044 	.word	0x20000044
 8001188:	20000086 	.word	0x20000086

0800118c <Manual_business_logic>:

void Manual_business_logic(const Hw_Inputs input_status)
{
 800118c:	b084      	sub	sp, #16
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
 8001192:	f107 0c08 	add.w	ip, r7, #8
 8001196:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(input_status.Ram_Open_Switch == GPIO_PIN_RESET){
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <Manual_business_logic+0x20>
		HAL_GPIO_WritePin(GPIOD,RampOpen_valve_Pin,GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <Manual_business_logic+0x2c>)
 80011a8:	f001 feed 	bl	8002f86 <HAL_GPIO_WritePin>
	}
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr
 80011b8:	40011400 	.word	0x40011400

080011bc <ModbusFrame>:

uint8_t DWINRxData[64];
uint16_t RxNoOfData;

void ModbusFrame(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	switch(Config)
 80011c0:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <ModbusFrame+0x1b8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <ModbusFrame+0x12>
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d032      	beq.n	8001232 <ModbusFrame+0x76>
 80011cc:	e0cc      	b.n	8001368 <ModbusFrame+0x1ac>
	{
		case  ReadMultileReg:
			bufftx[0] = SalveId;
 80011ce:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <ModbusFrame+0x1bc>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_READMULTIPLEREG;
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <ModbusFrame+0x1bc>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_READ & 0xff00)>>8;
 80011da:	4b67      	ldr	r3, [pc, #412]	; (8001378 <ModbusFrame+0x1bc>)
 80011dc:	2230      	movs	r2, #48	; 0x30
 80011de:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_READ & 0xff);
 80011e0:	4b65      	ldr	r3, [pc, #404]	; (8001378 <ModbusFrame+0x1bc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	70da      	strb	r2, [r3, #3]
			bufftx[4] = (NO_OF_READDATA & 0xff00)>>8;
 80011e6:	4b64      	ldr	r3, [pc, #400]	; (8001378 <ModbusFrame+0x1bc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_READDATA & 0xff);
 80011ec:	4b62      	ldr	r3, [pc, #392]	; (8001378 <ModbusFrame+0x1bc>)
 80011ee:	220a      	movs	r2, #10
 80011f0:	715a      	strb	r2, [r3, #5]

			CRC_value = ASCChecksum(bufftx,6);
 80011f2:	2106      	movs	r1, #6
 80011f4:	4860      	ldr	r0, [pc, #384]	; (8001378 <ModbusFrame+0x1bc>)
 80011f6:	f000 f8d5 	bl	80013a4 <ASCChecksum>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <ModbusFrame+0x1c0>)
 8001200:	801a      	strh	r2, [r3, #0]

			bufftx[6] = (CRC_value & 0xff);
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <ModbusFrame+0x1c0>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <ModbusFrame+0x1bc>)
 800120a:	719a      	strb	r2, [r3, #6]
			bufftx[7] = (CRC_value & 0xff00)>>8;
 800120c:	4b5b      	ldr	r3, [pc, #364]	; (800137c <ModbusFrame+0x1c0>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <ModbusFrame+0x1bc>)
 8001218:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(&huart1,bufftx,8);
 800121a:	2208      	movs	r2, #8
 800121c:	4956      	ldr	r1, [pc, #344]	; (8001378 <ModbusFrame+0x1bc>)
 800121e:	4858      	ldr	r0, [pc, #352]	; (8001380 <ModbusFrame+0x1c4>)
 8001220:	f003 fdfe 	bl	8004e20 <HAL_UART_Transmit_IT>
			RxNoOfData=(NO_OF_READDATA*2)+5;
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <ModbusFrame+0x1c8>)
 8001226:	2219      	movs	r2, #25
 8001228:	801a      	strh	r2, [r3, #0]
			Config = WriteMultipleReg;
 800122a:	4b52      	ldr	r3, [pc, #328]	; (8001374 <ModbusFrame+0x1b8>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
		break;
 8001230:	e09e      	b.n	8001370 <ModbusFrame+0x1b4>
		case WriteMultipleReg:
			bufftx[0] = SalveId;
 8001232:	4b51      	ldr	r3, [pc, #324]	; (8001378 <ModbusFrame+0x1bc>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_WRITEMULTIPLEREG;
 8001238:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <ModbusFrame+0x1bc>)
 800123a:	2210      	movs	r2, #16
 800123c:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_WRITE & 0xff00)>>8;
 800123e:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <ModbusFrame+0x1bc>)
 8001240:	2220      	movs	r2, #32
 8001242:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_WRITE & 0xff);
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <ModbusFrame+0x1bc>)
 8001246:	2200      	movs	r2, #0
 8001248:	70da      	strb	r2, [r3, #3]

			bufftx[4] = (NO_OF_WRITEDATA & 0xff00)>>8;
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <ModbusFrame+0x1bc>)
 800124c:	2200      	movs	r2, #0
 800124e:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_WRITEDATA & 0xff);
 8001250:	4b49      	ldr	r3, [pc, #292]	; (8001378 <ModbusFrame+0x1bc>)
 8001252:	220a      	movs	r2, #10
 8001254:	715a      	strb	r2, [r3, #5]

			bufftx[6] = NO_OF_WRITEDATA*2;
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <ModbusFrame+0x1bc>)
 8001258:	2214      	movs	r2, #20
 800125a:	719a      	strb	r2, [r3, #6]

			bufftx[7] = (Production & 0xff00)>>8;
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <ModbusFrame+0x1cc>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b29b      	uxth	r3, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <ModbusFrame+0x1bc>)
 8001268:	71da      	strb	r2, [r3, #7]
			bufftx[8] = (Production & 0xff);
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <ModbusFrame+0x1cc>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b41      	ldr	r3, [pc, #260]	; (8001378 <ModbusFrame+0x1bc>)
 8001272:	721a      	strb	r2, [r3, #8]

			bufftx[9] = (0 & 0xff00)>>8;
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <ModbusFrame+0x1bc>)
 8001276:	2200      	movs	r2, #0
 8001278:	725a      	strb	r2, [r3, #9]
			bufftx[10] = (0 & 0xff);
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <ModbusFrame+0x1bc>)
 800127c:	2200      	movs	r2, #0
 800127e:	729a      	strb	r2, [r3, #10]

			bufftx[11] = (0 & 0xff00)>>8;
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <ModbusFrame+0x1bc>)
 8001282:	2200      	movs	r2, #0
 8001284:	72da      	strb	r2, [r3, #11]
			bufftx[12] = (0 & 0xff);
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <ModbusFrame+0x1bc>)
 8001288:	2200      	movs	r2, #0
 800128a:	731a      	strb	r2, [r3, #12]

			bufftx[13] = (Inputs_Status & 0xff00)>>8;
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <ModbusFrame+0x1d0>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	b29b      	uxth	r3, r3
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <ModbusFrame+0x1bc>)
 8001298:	735a      	strb	r2, [r3, #13]
			bufftx[14] = (Inputs_Status & 0xff);
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <ModbusFrame+0x1d0>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <ModbusFrame+0x1bc>)
 80012a2:	739a      	strb	r2, [r3, #14]

			bufftx[15] = (0 & 0xff00)>>8;
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <ModbusFrame+0x1bc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	73da      	strb	r2, [r3, #15]
			bufftx[16] = (0 & 0xff);
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <ModbusFrame+0x1bc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	741a      	strb	r2, [r3, #16]

			bufftx[17] = (CuringTime & 0xff00)>>8;//2005
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <ModbusFrame+0x1d4>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <ModbusFrame+0x1bc>)
 80012bc:	745a      	strb	r2, [r3, #17]
			bufftx[18] = (CuringTime & 0xff);
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <ModbusFrame+0x1d4>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <ModbusFrame+0x1bc>)
 80012c6:	749a      	strb	r2, [r3, #18]

			bufftx[19] = (TIltingup & 0xff00)>>8;
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <ModbusFrame+0x1d8>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <ModbusFrame+0x1bc>)
 80012d4:	74da      	strb	r2, [r3, #19]
			bufftx[20] = (TIltingup & 0xff);
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <ModbusFrame+0x1d8>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <ModbusFrame+0x1bc>)
 80012de:	751a      	strb	r2, [r3, #20]

			bufftx[21] = (tinltingdown & 0xff00)>>8;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <ModbusFrame+0x1dc>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <ModbusFrame+0x1bc>)
 80012ec:	755a      	strb	r2, [r3, #21]
			bufftx[22] = (tinltingdown & 0xff);
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <ModbusFrame+0x1dc>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <ModbusFrame+0x1bc>)
 80012f6:	759a      	strb	r2, [r3, #22]

			bufftx[23] = (sliderin & 0xff00)>>8;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <ModbusFrame+0x1e0>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <ModbusFrame+0x1bc>)
 8001304:	75da      	strb	r2, [r3, #23]
			bufftx[24] = (sliderin & 0xff);
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <ModbusFrame+0x1e0>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <ModbusFrame+0x1bc>)
 800130e:	761a      	strb	r2, [r3, #24]

			bufftx[25] = (SLiderout & 0xff00)>>8;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <ModbusFrame+0x1e4>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <ModbusFrame+0x1bc>)
 800131c:	765a      	strb	r2, [r3, #25]
			bufftx[26] = (SLiderout & 0xff);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <ModbusFrame+0x1e4>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <ModbusFrame+0x1bc>)
 8001326:	769a      	strb	r2, [r3, #26]
			CRC_value = ASCChecksum(bufftx,27);
 8001328:	211b      	movs	r1, #27
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <ModbusFrame+0x1bc>)
 800132c:	f000 f83a 	bl	80013a4 <ASCChecksum>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <ModbusFrame+0x1c0>)
 8001336:	801a      	strh	r2, [r3, #0]

			bufftx[27] = (CRC_value & 0xff);
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <ModbusFrame+0x1c0>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <ModbusFrame+0x1bc>)
 8001340:	76da      	strb	r2, [r3, #27]
			bufftx[28] = (CRC_value & 0xff00)>>8;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <ModbusFrame+0x1c0>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b29b      	uxth	r3, r3
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <ModbusFrame+0x1bc>)
 800134e:	771a      	strb	r2, [r3, #28]
			RxNoOfData=8;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <ModbusFrame+0x1c8>)
 8001352:	2208      	movs	r2, #8
 8001354:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,bufftx,29);
 8001356:	221d      	movs	r2, #29
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <ModbusFrame+0x1bc>)
 800135a:	4809      	ldr	r0, [pc, #36]	; (8001380 <ModbusFrame+0x1c4>)
 800135c:	f003 fd60 	bl	8004e20 <HAL_UART_Transmit_IT>
			Config = ReadMultileReg;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <ModbusFrame+0x1b8>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
		break;
 8001366:	e003      	b.n	8001370 <ModbusFrame+0x1b4>
		default:
			Config = ReadMultileReg;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <ModbusFrame+0x1b8>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
		break;
 800136e:	bf00      	nop
	}
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000a6 	.word	0x200000a6
 8001378:	20000088 	.word	0x20000088
 800137c:	200000a8 	.word	0x200000a8
 8001380:	200001ec 	.word	0x200001ec
 8001384:	200000ec 	.word	0x200000ec
 8001388:	20000086 	.word	0x20000086
 800138c:	2000006a 	.word	0x2000006a
 8001390:	20000070 	.word	0x20000070
 8001394:	2000006c 	.word	0x2000006c
 8001398:	2000006e 	.word	0x2000006e
 800139c:	20000072 	.word	0x20000072
 80013a0:	20000074 	.word	0x20000074

080013a4 <ASCChecksum>:

uint16_t ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 80013b0:	23ff      	movs	r3, #255	; 0xff
 80013b2:	73bb      	strb	r3, [r7, #14]
	uint8_t CRCRegHigh = 0xff;
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	737b      	strb	r3, [r7, #13]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	733b      	strb	r3, [r7, #12]
   	for(i=0;i < CheckSumBytes;i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e013      	b.n	80013ea <ASCChecksum+0x46>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	4053      	eors	r3, r2
 80013ce:	72fb      	strb	r3, [r7, #11]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <ASCChecksum+0x68>)
 80013d4:	5cd2      	ldrb	r2, [r2, r3]
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	4053      	eors	r3, r2
 80013da:	73bb      	strb	r3, [r7, #14]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <ASCChecksum+0x6c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	737b      	strb	r3, [r7, #13]
   	for(i=0;i < CheckSumBytes;i++)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3e7      	bcc.n	80013c2 <ASCChecksum+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 80013f2:	7b7b      	ldrb	r3, [r7, #13]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b29b      	uxth	r3, r3
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	08005a10 	.word	0x08005a10
 8001410:	08005b10 	.word	0x08005b10

08001414 <ModbusInit>:


void ModbusInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DWINRxData, 64);
 8001418:	2240      	movs	r2, #64	; 0x40
 800141a:	4903      	ldr	r1, [pc, #12]	; (8001428 <ModbusInit+0x14>)
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <ModbusInit+0x18>)
 800141e:	f003 fd59 	bl	8004ed4 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000ac 	.word	0x200000ac
 800142c:	200001ec 	.word	0x200001ec

08001430 <Dwin_Rx_Decoder>:

void Dwin_Rx_Decoder(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
if(!dwin_rx_multipledata_completed){return;}
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <Dwin_Rx_Decoder+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <Dwin_Rx_Decoder+0x14>
dwin_rx_multipledata_completed=0;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <Dwin_Rx_Decoder+0x1c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e000      	b.n	8001446 <Dwin_Rx_Decoder+0x16>
if(!dwin_rx_multipledata_completed){return;}
 8001444:	bf00      	nop
}
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000045 	.word	0x20000045

08001450 <flashmemoryinit>:
uint8_t writeFlashBuf[10];

uint8_t databuffer_sector_zero[20];
void flashmemoryread(void);

void flashmemoryinit(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	W25qxx_Init();
 8001454:	f000 fe22 	bl	800209c <W25qxx_Init>
	flashmemoryread();
 8001458:	f000 f87c 	bl	8001554 <flashmemoryread>

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <flashmemoryroutine>:

void flashmemoryroutine(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	if(Trigger_Hmi_Data_Save)
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <flashmemoryroutine+0xd0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05f      	beq.n	800152c <flashmemoryroutine+0xcc>
	{
		Trigger_Hmi_Data_Save=0;
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <flashmemoryroutine+0xd0>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
		databuffer_sector_zero[0] = (CuringTime & 0xff00)>>8;
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <flashmemoryroutine+0xd4>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <flashmemoryroutine+0xd8>)
 800147e:	701a      	strb	r2, [r3, #0]
		databuffer_sector_zero[1] = (CuringTime & 0xff);
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <flashmemoryroutine+0xd4>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <flashmemoryroutine+0xd8>)
 8001488:	705a      	strb	r2, [r3, #1]
		databuffer_sector_zero[2] = (TIltingup & 0xff00)>>8;
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <flashmemoryroutine+0xdc>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b29b      	uxth	r3, r3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <flashmemoryroutine+0xd8>)
 8001496:	709a      	strb	r2, [r3, #2]
		databuffer_sector_zero[3] = (TIltingup & 0xff);
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <flashmemoryroutine+0xdc>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <flashmemoryroutine+0xd8>)
 80014a0:	70da      	strb	r2, [r3, #3]
		databuffer_sector_zero[4] = (tinltingdown & 0xff00)>>8;
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <flashmemoryroutine+0xe0>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <flashmemoryroutine+0xd8>)
 80014ae:	711a      	strb	r2, [r3, #4]
		databuffer_sector_zero[5] = (tinltingdown & 0xff);
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <flashmemoryroutine+0xe0>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <flashmemoryroutine+0xd8>)
 80014b8:	715a      	strb	r2, [r3, #5]
		databuffer_sector_zero[6] = (sliderin & 0xff00)>>8;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <flashmemoryroutine+0xe4>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <flashmemoryroutine+0xd8>)
 80014c6:	719a      	strb	r2, [r3, #6]
		databuffer_sector_zero[7] = (sliderin & 0xff);
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <flashmemoryroutine+0xe4>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <flashmemoryroutine+0xd8>)
 80014d0:	71da      	strb	r2, [r3, #7]
		databuffer_sector_zero[8] = (SLiderout & 0xff00)>>8;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <flashmemoryroutine+0xe8>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <flashmemoryroutine+0xd8>)
 80014de:	721a      	strb	r2, [r3, #8]
		databuffer_sector_zero[9] = (SLiderout & 0xff);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <flashmemoryroutine+0xe8>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <flashmemoryroutine+0xd8>)
 80014e8:	725a      	strb	r2, [r3, #9]
		databuffer_sector_zero[10] = (Ejectionon & 0xff00)>>8;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <flashmemoryroutine+0xec>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <flashmemoryroutine+0xd8>)
 80014f6:	729a      	strb	r2, [r3, #10]
		databuffer_sector_zero[11] = (Ejectionon & 0xff);
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <flashmemoryroutine+0xec>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <flashmemoryroutine+0xd8>)
 8001500:	72da      	strb	r2, [r3, #11]
		databuffer_sector_zero[12] = (Ejectionoff & 0xff00)>>8;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <flashmemoryroutine+0xf0>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <flashmemoryroutine+0xd8>)
 800150e:	731a      	strb	r2, [r3, #12]
		databuffer_sector_zero[13] = (Ejectionoff & 0xff);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <flashmemoryroutine+0xf0>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <flashmemoryroutine+0xd8>)
 8001518:	735a      	strb	r2, [r3, #13]
		W25qxx_EraseSector(0);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 fe90 	bl	8002240 <W25qxx_EraseSector>
		W25qxx_WriteSector(databuffer_sector_zero,HMIDATASECTOR,0,14);
 8001520:	230e      	movs	r3, #14
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	4804      	ldr	r0, [pc, #16]	; (8001538 <flashmemoryroutine+0xd8>)
 8001528:	f000 ff7a 	bl	8002420 <W25qxx_WriteSector>

	}
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000046 	.word	0x20000046
 8001534:	20000070 	.word	0x20000070
 8001538:	200000f0 	.word	0x200000f0
 800153c:	2000006c 	.word	0x2000006c
 8001540:	2000006e 	.word	0x2000006e
 8001544:	20000072 	.word	0x20000072
 8001548:	20000074 	.word	0x20000074
 800154c:	20000076 	.word	0x20000076
 8001550:	20000078 	.word	0x20000078

08001554 <flashmemoryread>:

void flashmemoryread(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	W25qxx_ReadSector(databuffer_sector_zero,HMIDATASECTOR,0,14);
 8001558:	230e      	movs	r3, #14
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	483a      	ldr	r0, [pc, #232]	; (8001648 <flashmemoryread+0xf4>)
 8001560:	f001 f83e 	bl	80025e0 <W25qxx_ReadSector>
	CuringTime 		= (databuffer_sector_zero[0]<<8 | databuffer_sector_zero[1]);
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <flashmemoryread+0xf4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <flashmemoryread+0xf4>)
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21b      	sxth	r3, r3
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <flashmemoryread+0xf8>)
 800157a:	801a      	strh	r2, [r3, #0]
	TIltingup 		= (databuffer_sector_zero[2]<<8 | databuffer_sector_zero[3]);
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <flashmemoryread+0xf4>)
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <flashmemoryread+0xf4>)
 8001586:	78db      	ldrb	r3, [r3, #3]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <flashmemoryread+0xfc>)
 8001592:	801a      	strh	r2, [r3, #0]
	tinltingdown 	= (databuffer_sector_zero[4]<<8 | databuffer_sector_zero[5]);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <flashmemoryread+0xf4>)
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <flashmemoryread+0xf4>)
 800159e:	795b      	ldrb	r3, [r3, #5]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <flashmemoryread+0x100>)
 80015aa:	801a      	strh	r2, [r3, #0]
	sliderin 		= (databuffer_sector_zero[6]<<8 | databuffer_sector_zero[7]);
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <flashmemoryread+0xf4>)
 80015ae:	799b      	ldrb	r3, [r3, #6]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <flashmemoryread+0xf4>)
 80015b6:	79db      	ldrb	r3, [r3, #7]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21b      	sxth	r3, r3
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <flashmemoryread+0x104>)
 80015c2:	801a      	strh	r2, [r3, #0]
	SLiderout 		= (databuffer_sector_zero[8]<<8 | databuffer_sector_zero[9]);
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <flashmemoryread+0xf4>)
 80015c6:	7a1b      	ldrb	r3, [r3, #8]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <flashmemoryread+0xf4>)
 80015ce:	7a5b      	ldrb	r3, [r3, #9]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <flashmemoryread+0x108>)
 80015da:	801a      	strh	r2, [r3, #0]
	Ejectionon 		= (databuffer_sector_zero[10]<<8 | databuffer_sector_zero[11]);
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <flashmemoryread+0xf4>)
 80015de:	7a9b      	ldrb	r3, [r3, #10]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <flashmemoryread+0xf4>)
 80015e6:	7adb      	ldrb	r3, [r3, #11]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <flashmemoryread+0x10c>)
 80015f2:	801a      	strh	r2, [r3, #0]
	Ejectionoff 	= (databuffer_sector_zero[12]<<8 | databuffer_sector_zero[13]);
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <flashmemoryread+0xf4>)
 80015f6:	7b1b      	ldrb	r3, [r3, #12]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <flashmemoryread+0xf4>)
 80015fe:	7b5b      	ldrb	r3, [r3, #13]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b21b      	sxth	r3, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <flashmemoryread+0x110>)
 800160a:	801a      	strh	r2, [r3, #0]
	CuringTime_k1 = CuringTime;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <flashmemoryread+0xf8>)
 800160e:	881a      	ldrh	r2, [r3, #0]
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <flashmemoryread+0x114>)
 8001612:	801a      	strh	r2, [r3, #0]
	TIltingup_k1 = TIltingup;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <flashmemoryread+0xfc>)
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <flashmemoryread+0x118>)
 800161a:	801a      	strh	r2, [r3, #0]
	tinltingdown_k1 = tinltingdown;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <flashmemoryread+0x100>)
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <flashmemoryread+0x11c>)
 8001622:	801a      	strh	r2, [r3, #0]
	SLiderout_k1 = SLiderout;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <flashmemoryread+0x108>)
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <flashmemoryread+0x120>)
 800162a:	801a      	strh	r2, [r3, #0]
	sliderin_k1=sliderin;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <flashmemoryread+0x104>)
 800162e:	881a      	ldrh	r2, [r3, #0]
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <flashmemoryread+0x124>)
 8001632:	801a      	strh	r2, [r3, #0]
	Ejectionon_k1 =Ejectionon;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <flashmemoryread+0x10c>)
 8001636:	881a      	ldrh	r2, [r3, #0]
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <flashmemoryread+0x128>)
 800163a:	801a      	strh	r2, [r3, #0]
	Ejectionoff_k1=Ejectionoff;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <flashmemoryread+0x110>)
 800163e:	881a      	ldrh	r2, [r3, #0]
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <flashmemoryread+0x12c>)
 8001642:	801a      	strh	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000f0 	.word	0x200000f0
 800164c:	20000070 	.word	0x20000070
 8001650:	2000006c 	.word	0x2000006c
 8001654:	2000006e 	.word	0x2000006e
 8001658:	20000072 	.word	0x20000072
 800165c:	20000074 	.word	0x20000074
 8001660:	20000076 	.word	0x20000076
 8001664:	20000078 	.word	0x20000078
 8001668:	20000048 	.word	0x20000048
 800166c:	2000004a 	.word	0x2000004a
 8001670:	2000004c 	.word	0x2000004c
 8001674:	20000050 	.word	0x20000050
 8001678:	2000004e 	.word	0x2000004e
 800167c:	20000052 	.word	0x20000052
 8001680:	20000054 	.word	0x20000054

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f001 f80c 	bl	80026a4 <HAL_Init>
  /* USER CODE END WHILE */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 f82e 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 f97a 	bl	8001988 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001694:	f000 f8b4 	bl	8001800 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001698:	f000 f8fe 	bl	8001898 <MX_TIM3_Init>
  MX_SPI1_Init();
 800169c:	f000 f87a 	bl	8001794 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016a0:	f000 f948 	bl	8001934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerApplicationInit();
 80016a4:	f7fe ff42 	bl	800052c <TimerApplicationInit>


  ModbusInit();
 80016a8:	f7ff feb4 	bl	8001414 <ModbusInit>
  flashmemoryinit();
 80016ac:	f7ff fed0 	bl	8001450 <flashmemoryinit>
 // HAL_UART_Receive_IT(&huart1,serial_1_buff, 1);

  InputOutputTest();
 80016b0:	f7ff f8d4 	bl	800085c <InputOutputTest>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Flag5msTM2)
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <main+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <main+0x42>
	  {
		  Flag5msTM2=0;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <main+0x60>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
		  gdc_businesslogic();
 80016c2:	f7ff f9d3 	bl	8000a6c <gdc_businesslogic>
	  }
	  if(Flag500ms)
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <main+0x64>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f2      	beq.n	80016b4 <main+0x30>
	  {
		  Flag500ms=0;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <main+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
		  ModbusFrame();
 80016d4:	f7ff fd72 	bl	80011bc <ModbusFrame>
		  Dwin_Rx_Decoder();
 80016d8:	f7ff feaa 	bl	8001430 <Dwin_Rx_Decoder>
		  flashmemoryroutine();
 80016dc:	f7ff fec0 	bl	8001460 <flashmemoryroutine>
	  if(Flag5msTM2)
 80016e0:	e7e8      	b.n	80016b4 <main+0x30>
 80016e2:	bf00      	nop
 80016e4:	20000039 	.word	0x20000039
 80016e8:	2000003a 	.word	0x2000003a

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	; 0x50
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0318 	add.w	r3, r7, #24
 80016f6:	2238      	movs	r2, #56	; 0x38
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 f974 	bl	80059e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV6;
 8001718:	2305      	movs	r3, #5
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001724:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001730:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL12;
 800173a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 8001740:	2310      	movs	r3, #16
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	4618      	mov	r0, r3
 800174a:	f001 fc35 	bl	8002fb8 <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001754:	f000 fa08 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f001 ff36 	bl	80035e4 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800177e:	f000 f9f3 	bl	8001b68 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <SystemClock_Config+0xa4>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3750      	adds	r7, #80	; 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	42420070 	.word	0x42420070

08001794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_SPI1_Init+0x64>)
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <MX_SPI1_Init+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017c8:	2218      	movs	r2, #24
 80017ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017e6:	f002 f92b 	bl	8003a40 <HAL_SPI_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017f0:	f000 f9ba 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000104 	.word	0x20000104
 80017fc:	40013000 	.word	0x40013000

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_TIM2_Init+0x94>)
 800181e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_TIM2_Init+0x94>)
 8001826:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800182a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_TIM2_Init+0x94>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_TIM2_Init+0x94>)
 8001834:	220a      	movs	r2, #10
 8001836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_TIM2_Init+0x94>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_TIM2_Init+0x94>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <MX_TIM2_Init+0x94>)
 8001846:	f002 fe83 	bl	8004550 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001850:	f000 f98a 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <MX_TIM2_Init+0x94>)
 8001862:	f003 f827 	bl	80048b4 <HAL_TIM_ConfigClockSource>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800186c:	f000 f97c 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_TIM2_Init+0x94>)
 800187e:	f003 fa07 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001888:	f000 f96e 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000015c 	.word	0x2000015c

08001898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_TIM3_Init+0x94>)
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <MX_TIM3_Init+0x98>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_TIM3_Init+0x94>)
 80018bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80018c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_TIM3_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_TIM3_Init+0x94>)
 80018ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM3_Init+0x94>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_TIM3_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <MX_TIM3_Init+0x94>)
 80018de:	f002 fe37 	bl	8004550 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018e8:	f000 f93e 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM3_Init+0x94>)
 80018fa:	f002 ffdb 	bl	80048b4 <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001904:	f000 f930 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM3_Init+0x94>)
 8001916:	f003 f9bb 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001920:	f000 f922 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200001a4 	.word	0x200001a4
 8001930:	40000400 	.word	0x40000400

08001934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART1_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 8001940:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART1_UART_Init+0x4c>)
 800196c:	f003 fa08 	bl	8004d80 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f000 f8f7 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200001ec 	.word	0x200001ec
 8001984:	40013800 	.word	0x40013800

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b4:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a64      	ldr	r2, [pc, #400]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a5e      	ldr	r2, [pc, #376]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e4:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <MX_GPIO_Init+0x1c4>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a14:	2200      	movs	r2, #0
 8001a16:	f641 7110 	movw	r1, #7952	; 0x1f10
 8001a1a:	484d      	ldr	r0, [pc, #308]	; (8001b50 <MX_GPIO_Init+0x1c8>)
 8001a1c:	f001 fab3 	bl	8002f86 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorOn_valve_Pin|MotorOff_valve_Pin|RampOpen_valve_Pin|RampCLose_valve_Pin
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001a26:	484b      	ldr	r0, [pc, #300]	; (8001b54 <MX_GPIO_Init+0x1cc>)
 8001a28:	f001 faad 	bl	8002f86 <HAL_GPIO_WritePin>
                          |TiltingUp_valve_Pin|TiltingDown_valve_Pin|SkiderOut_valve_Pin|SliderIn_valve_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EjectionOn_valve_Pin|EjectionOff_valve_Pin|RoboRelay_output_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001a32:	4849      	ldr	r0, [pc, #292]	; (8001b58 <MX_GPIO_Init+0x1d0>)
 8001a34:	f001 faa7 	bl	8002f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Robo_Ack_Input_Pin StationInfo_Sensor_Pin Tiltingdown_sensor_Pin */
  GPIO_InitStruct.Pin = Robo_Ack_Input_Pin|StationInfo_Sensor_Pin|Tiltingdown_sensor_Pin;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4841      	ldr	r0, [pc, #260]	; (8001b50 <MX_GPIO_Init+0x1c8>)
 8001a4c:	f001 f900 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a50:	f641 7310 	movw	r3, #7952	; 0x1f10
 8001a54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4839      	ldr	r0, [pc, #228]	; (8001b50 <MX_GPIO_Init+0x1c8>)
 8001a6a:	f001 f8f1 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rampclose_sensor_Pin Rampopen_sensor_Pin */
  GPIO_InitStruct.Pin = Rampclose_sensor_Pin|Rampopen_sensor_Pin;
 8001a6e:	2330      	movs	r3, #48	; 0x30
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4835      	ldr	r0, [pc, #212]	; (8001b58 <MX_GPIO_Init+0x1d0>)
 8001a82:	f001 f8e5 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorOff_Switch_Pin MotorON_Switch_Pin Emergency_Switch_Pin Auto_Manual_Switch_Pin */
  GPIO_InitStruct.Pin = MotorOff_Switch_Pin|MotorON_Switch_Pin|Emergency_Switch_Pin|Auto_Manual_Switch_Pin;
 8001a86:	f640 4303 	movw	r3, #3075	; 0xc03
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4830      	ldr	r0, [pc, #192]	; (8001b5c <MX_GPIO_Init+0x1d4>)
 8001a9c:	f001 f8d8 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CycleStart_Switch_Pin SliderIn_Switch_Pin SliderOut_Switch_Pin EjectionOut_Switch_Pin
                           EjectionIn_Switch_Pin TiltingDown_Switch_Pin TiltingUp_Switch_Pin RampClose_Switch_Pin
                           RampOpen_Switch_Pin */
  GPIO_InitStruct.Pin = CycleStart_Switch_Pin|SliderIn_Switch_Pin|SliderOut_Switch_Pin|EjectionOut_Switch_Pin
 8001aa0:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001aa4:	617b      	str	r3, [r7, #20]
                          |EjectionIn_Switch_Pin|TiltingDown_Switch_Pin|TiltingUp_Switch_Pin|RampClose_Switch_Pin
                          |RampOpen_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	482a      	ldr	r0, [pc, #168]	; (8001b60 <MX_GPIO_Init+0x1d8>)
 8001ab6:	f001 f8cb 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorOn_valve_Pin MotorOff_valve_Pin RampOpen_valve_Pin RampCLose_valve_Pin
                           TiltingUp_valve_Pin TiltingDown_valve_Pin SkiderOut_valve_Pin SliderIn_valve_Pin */
  GPIO_InitStruct.Pin = MotorOn_valve_Pin|MotorOff_valve_Pin|RampOpen_valve_Pin|RampCLose_valve_Pin
 8001aba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001abe:	617b      	str	r3, [r7, #20]
                          |TiltingUp_valve_Pin|TiltingDown_valve_Pin|SkiderOut_valve_Pin|SliderIn_valve_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4820      	ldr	r0, [pc, #128]	; (8001b54 <MX_GPIO_Init+0x1cc>)
 8001ad4:	f001 f8bc 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : EjectionOn_valve_Pin EjectionOff_valve_Pin RoboRelay_output_Pin PC9 */
  GPIO_InitStruct.Pin = EjectionOn_valve_Pin|EjectionOff_valve_Pin|RoboRelay_output_Pin|GPIO_PIN_9;
 8001ad8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <MX_GPIO_Init+0x1d0>)
 8001af2:	f001 f8ad 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_485_Tx_2_Pin */
  GPIO_InitStruct.Pin = UART_485_Tx_2_Pin;
 8001af6:	2320      	movs	r3, #32
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UART_485_Tx_2_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_GPIO_Init+0x1cc>)
 8001b0a:	f001 f8a1 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_Rx_485_2_Pin */
  GPIO_InitStruct.Pin = USART_Rx_485_2_Pin;
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_Rx_485_2_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_GPIO_Init+0x1cc>)
 8001b22:	f001 f895 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_USART2_ENABLE();
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_GPIO_Init+0x1dc>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <MX_GPIO_Init+0x1dc>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	6053      	str	r3, [r2, #4]

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40011000 	.word	0x40011000
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40011800 	.word	0x40011800
 8001b64:	40010000 	.word	0x40010000

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>
	...

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_MspInit+0x54>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_MspInit+0x54>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_MspInit+0x54>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_MspInit+0x54>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_MspInit+0x54>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_MspInit+0x54>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_MspInit+0x58>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_MspInit+0x58>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d12f      	bne.n	8001c50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c20:	23a0      	movs	r3, #160	; 0xa0
 8001c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_SPI_MspInit+0x90>)
 8001c34:	f001 f80c 	bl	8002c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_SPI_MspInit+0x90>)
 8001c4c:	f001 f800 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010800 	.word	0x40010800

08001c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d114      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_TIM_Base_MspInit+0x78>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_TIM_Base_MspInit+0x78>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_TIM_Base_MspInit+0x78>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	201c      	movs	r0, #28
 8001c94:	f000 fe63 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c98:	201c      	movs	r0, #28
 8001c9a:	f000 fe7c 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c9e:	e018      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_TIM_Base_MspInit+0x7c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d113      	bne.n	8001cd2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_Base_MspInit+0x78>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_TIM_Base_MspInit+0x78>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_TIM_Base_MspInit+0x78>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	201d      	movs	r0, #29
 8001cc8:	f000 fe49 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ccc:	201d      	movs	r0, #29
 8001cce:	f000 fe62 	bl	8002996 <HAL_NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <HAL_UART_MspInit+0xb4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d145      	bne.n	8001d90 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_UART_MspInit+0xb8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_UART_MspInit+0xb8>)
 8001d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_UART_MspInit+0xb8>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_UART_MspInit+0xb8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_UART_MspInit+0xb8>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_UART_MspInit+0xb8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4816      	ldr	r0, [pc, #88]	; (8001da0 <HAL_UART_MspInit+0xbc>)
 8001d48:	f000 ff82 	bl	8002c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4810      	ldr	r0, [pc, #64]	; (8001da0 <HAL_UART_MspInit+0xbc>)
 8001d60:	f000 ff76 	bl	8002c50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_UART_MspInit+0xc0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_UART_MspInit+0xc0>)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2025      	movs	r0, #37	; 0x25
 8001d86:	f000 fdea 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d8a:	2025      	movs	r0, #37	; 0x25
 8001d8c:	f000 fe03 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010c00 	.word	0x40010c00
 8001da4:	40010000 	.word	0x40010000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>

08001dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dee:	f000 fc9f 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <TIM2_IRQHandler+0x10>)
 8001dfe:	f002 fc51 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000015c 	.word	0x2000015c

08001e0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM3_IRQHandler+0x10>)
 8001e12:	f002 fc47 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200001a4 	.word	0x200001a4

08001e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <USART1_IRQHandler+0x10>)
 8001e26:	f003 f8b3 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200001ec 	.word	0x200001ec

08001e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e40:	f7ff fff8 	bl	8001e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e46:	490c      	ldr	r1, [pc, #48]	; (8001e78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e5c:	4c09      	ldr	r4, [pc, #36]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f003 fd99 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e6e:	f7ff fc09 	bl	8001684 <main>
  bx lr
 8001e72:	4770      	bx	lr
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e7c:	08005c58 	.word	0x08005c58
  ldr r2, =_sbss
 8001e80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e84:	20000260 	.word	0x20000260

08001e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC1_2_IRQHandler>
	...

08001e8c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001e96:	f107 020f 	add.w	r2, r7, #15
 8001e9a:	1df9      	adds	r1, r7, #7
 8001e9c:	2364      	movs	r3, #100	; 0x64
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <W25qxx_Spi+0x28>)
 8001ea4:	f002 f8ab 	bl	8003ffe <HAL_SPI_TransmitReceive>
	return ret;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000104 	.word	0x20000104

08001eb8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <W25qxx_ReadID+0x68>)
 8001ed4:	f001 f857 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001ed8:	209f      	movs	r0, #159	; 0x9f
 8001eda:	f7ff ffd7 	bl	8001e8c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ede:	20a5      	movs	r0, #165	; 0xa5
 8001ee0:	f7ff ffd4 	bl	8001e8c <W25qxx_Spi>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ee8:	20a5      	movs	r0, #165	; 0xa5
 8001eea:	f7ff ffcf 	bl	8001e8c <W25qxx_Spi>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ef2:	20a5      	movs	r0, #165	; 0xa5
 8001ef4:	f7ff ffca 	bl	8001e8c <W25qxx_Spi>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2110      	movs	r1, #16
 8001f00:	4807      	ldr	r0, [pc, #28]	; (8001f20 <W25qxx_ReadID+0x68>)
 8001f02:	f001 f840 	bl	8002f86 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40010800 	.word	0x40010800

08001f24 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	4816      	ldr	r0, [pc, #88]	; (8001f88 <W25qxx_ReadUniqID+0x64>)
 8001f30:	f001 f829 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001f34:	204b      	movs	r0, #75	; 0x4b
 8001f36:	f7ff ffa9 	bl	8001e8c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	e005      	b.n	8001f4c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f40:	20a5      	movs	r0, #165	; 0xa5
 8001f42:	f7ff ffa3 	bl	8001e8c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d9f6      	bls.n	8001f40 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	71bb      	strb	r3, [r7, #6]
 8001f56:	e00b      	b.n	8001f70 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f58:	79bc      	ldrb	r4, [r7, #6]
 8001f5a:	20a5      	movs	r0, #165	; 0xa5
 8001f5c:	f7ff ff96 	bl	8001e8c <W25qxx_Spi>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <W25qxx_ReadUniqID+0x68>)
 8001f66:	4423      	add	r3, r4
 8001f68:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	71bb      	strb	r3, [r7, #6]
 8001f70:	79bb      	ldrb	r3, [r7, #6]
 8001f72:	2b07      	cmp	r3, #7
 8001f74:	d9f0      	bls.n	8001f58 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2110      	movs	r1, #16
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <W25qxx_ReadUniqID+0x64>)
 8001f7c:	f001 f803 	bl	8002f86 <HAL_GPIO_WritePin>
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	40010800 	.word	0x40010800
 8001f8c:	20000234 	.word	0x20000234

08001f90 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2110      	movs	r1, #16
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <W25qxx_WriteEnable+0x28>)
 8001f9a:	f000 fff4 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001f9e:	2006      	movs	r0, #6
 8001fa0:	f7ff ff74 	bl	8001e8c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <W25qxx_WriteEnable+0x28>)
 8001faa:	f000 ffec 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f000 fbda 	bl	8002768 <HAL_Delay>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010800 	.word	0x40010800

08001fbc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2110      	movs	r1, #16
 8001fce:	481c      	ldr	r0, [pc, #112]	; (8002040 <W25qxx_ReadStatusRegister+0x84>)
 8001fd0:	f000 ffd9 	bl	8002f86 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10c      	bne.n	8001ff4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001fda:	2005      	movs	r0, #5
 8001fdc:	f7ff ff56 	bl	8001e8c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fe0:	20a5      	movs	r0, #165	; 0xa5
 8001fe2:	f7ff ff53 	bl	8001e8c <W25qxx_Spi>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001fea:	4a16      	ldr	r2, [pc, #88]	; (8002044 <W25qxx_ReadStatusRegister+0x88>)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001ff2:	e01b      	b.n	800202c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d10c      	bne.n	8002014 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001ffa:	2035      	movs	r0, #53	; 0x35
 8001ffc:	f7ff ff46 	bl	8001e8c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002000:	20a5      	movs	r0, #165	; 0xa5
 8002002:	f7ff ff43 	bl	8001e8c <W25qxx_Spi>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <W25qxx_ReadStatusRegister+0x88>)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002012:	e00b      	b.n	800202c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002014:	2015      	movs	r0, #21
 8002016:	f7ff ff39 	bl	8001e8c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800201a:	20a5      	movs	r0, #165	; 0xa5
 800201c:	f7ff ff36 	bl	8001e8c <W25qxx_Spi>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <W25qxx_ReadStatusRegister+0x88>)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	2110      	movs	r1, #16
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <W25qxx_ReadStatusRegister+0x84>)
 8002032:	f000 ffa8 	bl	8002f86 <HAL_GPIO_WritePin>
	return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010800 	.word	0x40010800
 8002044:	20000234 	.word	0x20000234

08002048 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800204c:	2001      	movs	r0, #1
 800204e:	f000 fb8b 	bl	8002768 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2110      	movs	r1, #16
 8002056:	480f      	ldr	r0, [pc, #60]	; (8002094 <W25qxx_WaitForWriteEnd+0x4c>)
 8002058:	f000 ff95 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800205c:	2005      	movs	r0, #5
 800205e:	f7ff ff15 	bl	8001e8c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002062:	20a5      	movs	r0, #165	; 0xa5
 8002064:	f7ff ff12 	bl	8001e8c <W25qxx_Spi>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <W25qxx_WaitForWriteEnd+0x50>)
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002072:	2001      	movs	r0, #1
 8002074:	f000 fb78 	bl	8002768 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <W25qxx_WaitForWriteEnd+0x50>)
 800207a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ed      	bne.n	8002062 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	2110      	movs	r1, #16
 800208a:	4802      	ldr	r0, [pc, #8]	; (8002094 <W25qxx_WaitForWriteEnd+0x4c>)
 800208c:	f000 ff7b 	bl	8002f86 <HAL_GPIO_WritePin>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010800 	.word	0x40010800
 8002098:	20000234 	.word	0x20000234

0800209c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80020a2:	4b65      	ldr	r3, [pc, #404]	; (8002238 <W25qxx_Init+0x19c>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80020aa:	e002      	b.n	80020b2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 fb5b 	bl	8002768 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80020b2:	f000 fb4f 	bl	8002754 <HAL_GetTick>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b63      	cmp	r3, #99	; 0x63
 80020ba:	d9f7      	bls.n	80020ac <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	2110      	movs	r1, #16
 80020c0:	485e      	ldr	r0, [pc, #376]	; (800223c <W25qxx_Init+0x1a0>)
 80020c2:	f000 ff60 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80020c6:	2064      	movs	r0, #100	; 0x64
 80020c8:	f000 fb4e 	bl	8002768 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80020cc:	f7ff fef4 	bl	8001eb8 <W25qxx_ReadID>
 80020d0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b11      	subs	r3, #17
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d86c      	bhi.n	80021b6 <W25qxx_Init+0x11a>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <W25qxx_Init+0x48>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080021a9 	.word	0x080021a9
 80020e8:	0800219b 	.word	0x0800219b
 80020ec:	0800218d 	.word	0x0800218d
 80020f0:	0800217f 	.word	0x0800217f
 80020f4:	08002171 	.word	0x08002171
 80020f8:	08002163 	.word	0x08002163
 80020fc:	08002155 	.word	0x08002155
 8002100:	08002145 	.word	0x08002145
 8002104:	08002135 	.word	0x08002135
 8002108:	080021b7 	.word	0x080021b7
 800210c:	080021b7 	.word	0x080021b7
 8002110:	080021b7 	.word	0x080021b7
 8002114:	080021b7 	.word	0x080021b7
 8002118:	080021b7 	.word	0x080021b7
 800211c:	080021b7 	.word	0x080021b7
 8002120:	08002125 	.word	0x08002125
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <W25qxx_Init+0x19c>)
 8002126:	220a      	movs	r2, #10
 8002128:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <W25qxx_Init+0x19c>)
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8002132:	e046      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002134:	4b40      	ldr	r3, [pc, #256]	; (8002238 <W25qxx_Init+0x19c>)
 8002136:	2209      	movs	r2, #9
 8002138:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <W25qxx_Init+0x19c>)
 800213c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002140:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002142:	e03e      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <W25qxx_Init+0x19c>)
 8002146:	2208      	movs	r2, #8
 8002148:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <W25qxx_Init+0x19c>)
 800214c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002150:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002152:	e036      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002154:	4b38      	ldr	r3, [pc, #224]	; (8002238 <W25qxx_Init+0x19c>)
 8002156:	2207      	movs	r2, #7
 8002158:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <W25qxx_Init+0x19c>)
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002160:	e02f      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <W25qxx_Init+0x19c>)
 8002164:	2206      	movs	r2, #6
 8002166:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <W25qxx_Init+0x19c>)
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800216e:	e028      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <W25qxx_Init+0x19c>)
 8002172:	2205      	movs	r2, #5
 8002174:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <W25qxx_Init+0x19c>)
 8002178:	2220      	movs	r2, #32
 800217a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800217c:	e021      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <W25qxx_Init+0x19c>)
 8002180:	2204      	movs	r2, #4
 8002182:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <W25qxx_Init+0x19c>)
 8002186:	2210      	movs	r2, #16
 8002188:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800218a:	e01a      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <W25qxx_Init+0x19c>)
 800218e:	2203      	movs	r2, #3
 8002190:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <W25qxx_Init+0x19c>)
 8002194:	2208      	movs	r2, #8
 8002196:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002198:	e013      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800219a:	4b27      	ldr	r3, [pc, #156]	; (8002238 <W25qxx_Init+0x19c>)
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <W25qxx_Init+0x19c>)
 80021a2:	2204      	movs	r2, #4
 80021a4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80021a6:	e00c      	b.n	80021c2 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <W25qxx_Init+0x19c>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <W25qxx_Init+0x19c>)
 80021b0:	2202      	movs	r2, #2
 80021b2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80021b4:	e005      	b.n	80021c2 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <W25qxx_Init+0x19c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80021be:	2300      	movs	r3, #0
 80021c0:	e036      	b.n	8002230 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <W25qxx_Init+0x19c>)
 80021c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <W25qxx_Init+0x19c>)
 80021cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <W25qxx_Init+0x19c>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4a17      	ldr	r2, [pc, #92]	; (8002238 <W25qxx_Init+0x19c>)
 80021da:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <W25qxx_Init+0x19c>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <W25qxx_Init+0x19c>)
 80021e2:	6912      	ldr	r2, [r2, #16]
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <W25qxx_Init+0x19c>)
 80021ea:	8952      	ldrh	r2, [r2, #10]
 80021ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <W25qxx_Init+0x19c>)
 80021f2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <W25qxx_Init+0x19c>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <W25qxx_Init+0x19c>)
 80021fc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <W25qxx_Init+0x19c>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <W25qxx_Init+0x19c>)
 8002204:	6912      	ldr	r2, [r2, #16]
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <W25qxx_Init+0x19c>)
 800220e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002210:	f7ff fe88 	bl	8001f24 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff fed1 	bl	8001fbc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff fece 	bl	8001fbc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002220:	2003      	movs	r0, #3
 8002222:	f7ff fecb 	bl	8001fbc <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <W25qxx_Init+0x19c>)
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000234 	.word	0x20000234
 800223c:	40010800 	.word	0x40010800

08002240 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002248:	e002      	b.n	8002250 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fa8c 	bl	8002768 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <W25qxx_EraseSector+0xa8>)
 8002252:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002256:	2b01      	cmp	r3, #1
 8002258:	d0f7      	beq.n	800224a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <W25qxx_EraseSector+0xa8>)
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8002262:	f7ff fef1 	bl	8002048 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <W25qxx_EraseSector+0xa8>)
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8002272:	f7ff fe8d 	bl	8001f90 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2110      	movs	r1, #16
 800227a:	481c      	ldr	r0, [pc, #112]	; (80022ec <W25qxx_EraseSector+0xac>)
 800227c:	f000 fe83 	bl	8002f86 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <W25qxx_EraseSector+0xa8>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d909      	bls.n	800229c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8002288:	2021      	movs	r0, #33	; 0x21
 800228a:	f7ff fdff 	bl	8001e8c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0e1b      	lsrs	r3, r3, #24
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fdf9 	bl	8001e8c <W25qxx_Spi>
 800229a:	e002      	b.n	80022a2 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800229c:	2020      	movs	r0, #32
 800229e:	f7ff fdf5 	bl	8001e8c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fdef 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fde9 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fde4 	bl	8001e8c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2110      	movs	r1, #16
 80022c8:	4808      	ldr	r0, [pc, #32]	; (80022ec <W25qxx_EraseSector+0xac>)
 80022ca:	f000 fe5c 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80022ce:	f7ff febb 	bl	8002048 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 fa48 	bl	8002768 <HAL_Delay>
	w25qxx.Lock = 0;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <W25qxx_EraseSector+0xa8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000234 	.word	0x20000234
 80022ec:	40010800 	.word	0x40010800

080022f0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <W25qxx_SectorToPage+0x24>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <W25qxx_SectorToPage+0x24>)
 8002304:	8952      	ldrh	r2, [r2, #10]
 8002306:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	20000234 	.word	0x20000234

08002318 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002326:	e002      	b.n	800232e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002328:	2001      	movs	r0, #1
 800232a:	f000 fa1d 	bl	8002768 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <W25qxx_WritePage+0xfc>)
 8002330:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002334:	2b01      	cmp	r3, #1
 8002336:	d0f7      	beq.n	8002328 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <W25qxx_WritePage+0xfc>)
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a33      	ldr	r2, [pc, #204]	; (8002414 <W25qxx_WritePage+0xfc>)
 8002348:	8952      	ldrh	r2, [r2, #10]
 800234a:	4293      	cmp	r3, r2
 800234c:	d802      	bhi.n	8002354 <W25qxx_WritePage+0x3c>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <W25qxx_WritePage+0xfc>)
 8002356:	895b      	ldrh	r3, [r3, #10]
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <W25qxx_WritePage+0xfc>)
 8002368:	8952      	ldrh	r2, [r2, #10]
 800236a:	4293      	cmp	r3, r2
 800236c:	d905      	bls.n	800237a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <W25qxx_WritePage+0xfc>)
 8002370:	895b      	ldrh	r3, [r3, #10]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800237a:	f7ff fe65 	bl	8002048 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800237e:	f7ff fe07 	bl	8001f90 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	2110      	movs	r1, #16
 8002386:	4824      	ldr	r0, [pc, #144]	; (8002418 <W25qxx_WritePage+0x100>)
 8002388:	f000 fdfd 	bl	8002f86 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <W25qxx_WritePage+0xfc>)
 800238e:	895b      	ldrh	r3, [r3, #10]
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <W25qxx_WritePage+0xfc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d909      	bls.n	80023ba <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80023a6:	2012      	movs	r0, #18
 80023a8:	f7ff fd70 	bl	8001e8c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	0e1b      	lsrs	r3, r3, #24
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fd6a 	bl	8001e8c <W25qxx_Spi>
 80023b8:	e002      	b.n	80023c0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80023ba:	2002      	movs	r0, #2
 80023bc:	f7ff fd66 	bl	8001e8c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fd60 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fd5a 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fd55 	bl	8001e8c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	2364      	movs	r3, #100	; 0x64
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	480c      	ldr	r0, [pc, #48]	; (800241c <W25qxx_WritePage+0x104>)
 80023ec:	f001 fbac 	bl	8003b48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2110      	movs	r1, #16
 80023f4:	4808      	ldr	r0, [pc, #32]	; (8002418 <W25qxx_WritePage+0x100>)
 80023f6:	f000 fdc6 	bl	8002f86 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80023fa:	f7ff fe25 	bl	8002048 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 f9b2 	bl	8002768 <HAL_Delay>
	w25qxx.Lock = 0;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <W25qxx_WritePage+0xfc>)
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000234 	.word	0x20000234
 8002418:	40010800 	.word	0x40010800
 800241c:	20000104 	.word	0x20000104

08002420 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d802      	bhi.n	800243e <W25qxx_WriteSector+0x1e>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d243      	bcs.n	80024d6 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	441a      	add	r2, r3
 8002454:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d905      	bls.n	8002468 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	e001      	b.n	800246c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800246c:	68b8      	ldr	r0, [r7, #8]
 800246e:	f7ff ff3f 	bl	80022f0 <W25qxx_SectorToPage>
 8002472:	4602      	mov	r2, r0
 8002474:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 8002476:	895b      	ldrh	r3, [r3, #10]
 8002478:	4619      	mov	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002480:	4413      	add	r3, r2
 8002482:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 8002486:	895b      	ldrh	r3, [r3, #10]
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002490:	fb01 f202 	mul.w	r2, r1, r2
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	69f9      	ldr	r1, [r7, #28]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff3a 	bl	8002318 <W25qxx_WritePage>
		StartPage++;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3301      	adds	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 80024ac:	895b      	ldrh	r3, [r3, #10]
 80024ae:	461a      	mov	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	1a9a      	subs	r2, r3, r2
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <W25qxx_WriteSector+0xc0>)
 80024bc:	895b      	ldrh	r3, [r3, #10]
 80024be:	461a      	mov	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	dce1      	bgt.n	8002498 <W25qxx_WriteSector+0x78>
 80024d4:	e000      	b.n	80024d8 <W25qxx_WriteSector+0xb8>
		return;
 80024d6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000234 	.word	0x20000234

080024e4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80024f2:	e002      	b.n	80024fa <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f000 f937 	bl	8002768 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80024fa:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 80024fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002500:	2b01      	cmp	r3, #1
 8002502:	d0f7      	beq.n	80024f4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8002504:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800250c:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 800250e:	895b      	ldrh	r3, [r3, #10]
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4293      	cmp	r3, r2
 8002516:	d802      	bhi.n	800251e <W25qxx_ReadPage+0x3a>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 8002520:	895b      	ldrh	r3, [r3, #10]
 8002522:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 800252c:	8952      	ldrh	r2, [r2, #10]
 800252e:	4293      	cmp	r3, r2
 8002530:	d905      	bls.n	800253e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 8002534:	895b      	ldrh	r3, [r3, #10]
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 8002540:	895b      	ldrh	r3, [r3, #10]
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	2110      	movs	r1, #16
 8002554:	4820      	ldr	r0, [pc, #128]	; (80025d8 <W25qxx_ReadPage+0xf4>)
 8002556:	f000 fd16 	bl	8002f86 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d909      	bls.n	8002576 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8002562:	200c      	movs	r0, #12
 8002564:	f7ff fc92 	bl	8001e8c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0e1b      	lsrs	r3, r3, #24
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc8c 	bl	8001e8c <W25qxx_Spi>
 8002574:	e002      	b.n	800257c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002576:	200b      	movs	r0, #11
 8002578:	f7ff fc88 	bl	8001e8c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fc82 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fc7c 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fc77 	bl	8001e8c <W25qxx_Spi>
	W25qxx_Spi(0);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7ff fc74 	bl	8001e8c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	2364      	movs	r3, #100	; 0x64
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <W25qxx_ReadPage+0xf8>)
 80025ae:	f001 fc0e 	bl	8003dce <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2110      	movs	r1, #16
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <W25qxx_ReadPage+0xf4>)
 80025b8:	f000 fce5 	bl	8002f86 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80025bc:	2001      	movs	r0, #1
 80025be:	f000 f8d3 	bl	8002768 <HAL_Delay>
	w25qxx.Lock = 0;
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <W25qxx_ReadPage+0xf0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000234 	.word	0x20000234
 80025d8:	40010800 	.word	0x40010800
 80025dc:	20000104 	.word	0x20000104

080025e0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80025ee:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d802      	bhi.n	80025fe <W25qxx_ReadSector+0x1e>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80025fe:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d243      	bcs.n	8002696 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	441a      	add	r2, r3
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d905      	bls.n	8002628 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	e001      	b.n	800262c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800262c:	68b8      	ldr	r0, [r7, #8]
 800262e:	f7ff fe5f 	bl	80022f0 <W25qxx_SectorToPage>
 8002632:	4602      	mov	r2, r0
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 8002636:	895b      	ldrh	r3, [r3, #10]
 8002638:	4619      	mov	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002640:	4413      	add	r3, r2
 8002642:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 8002646:	895b      	ldrh	r3, [r3, #10]
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002650:	fb01 f202 	mul.w	r2, r1, r2
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	69f9      	ldr	r1, [r7, #28]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ff40 	bl	80024e4 <W25qxx_ReadPage>
		StartPage++;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3301      	adds	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 800266c:	895b      	ldrh	r3, [r3, #10]
 800266e:	461a      	mov	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1a9a      	subs	r2, r3, r2
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <W25qxx_ReadSector+0xc0>)
 800267c:	895b      	ldrh	r3, [r3, #10]
 800267e:	461a      	mov	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	dce1      	bgt.n	8002658 <W25qxx_ReadSector+0x78>
 8002694:	e000      	b.n	8002698 <W25qxx_ReadSector+0xb8>
		return;
 8002696:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000234 	.word	0x20000234

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_Init+0x28>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_Init+0x28>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 f947 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ba:	200f      	movs	r0, #15
 80026bc:	f000 f808 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c0:	f7ff fa58 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x54>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_InitTick+0x58>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f95f 	bl	80029b2 <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f000 f927 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x5c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000000 	.word	0x20000000
 8002728:	20000008 	.word	0x20000008
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_IncTick+0x1c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_IncTick+0x20>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_IncTick+0x20>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000008 	.word	0x20000008
 8002750:	2000025c 	.word	0x2000025c

08002754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b02      	ldr	r3, [pc, #8]	; (8002764 <HAL_GetTick+0x10>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	2000025c 	.word	0x2000025c

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff fff0 	bl	8002754 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffe0 	bl	8002754 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000008 	.word	0x20000008

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4906      	ldr	r1, [pc, #24]	; (8002848 <__NVIC_EnableIRQ+0x34>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db0a      	blt.n	8002876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	490c      	ldr	r1, [pc, #48]	; (8002898 <__NVIC_SetPriority+0x4c>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	440b      	add	r3, r1
 8002870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002874:	e00a      	b.n	800288c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <__NVIC_SetPriority+0x50>)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	3b04      	subs	r3, #4
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	440b      	add	r3, r1
 800288a:	761a      	strb	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f1c3 0307 	rsb	r3, r3, #7
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	bf28      	it	cs
 80028be:	2304      	movcs	r3, #4
 80028c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d902      	bls.n	80028d0 <NVIC_EncodePriority+0x30>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3b03      	subs	r3, #3
 80028ce:	e000      	b.n	80028d2 <NVIC_EncodePriority+0x32>
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	4313      	orrs	r3, r2
         );
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff90 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff2d 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff42 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff90 	bl	80028a0 <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5f 	bl	800284c <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff35 	bl	8002814 <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d008      	beq.n	80029f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e020      	b.n	8002a36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 020e 	bic.w	r2, r2, #14
 8002a02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d005      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e0d6      	b.n	8002c12 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 020e 	bic.w	r2, r2, #14
 8002a72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_DMA_Abort_IT+0x1dc>)
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d958      	bls.n	8002b42 <HAL_DMA_Abort_IT+0x102>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a62      	ldr	r2, [pc, #392]	; (8002c20 <HAL_DMA_Abort_IT+0x1e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04f      	beq.n	8002b3a <HAL_DMA_Abort_IT+0xfa>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <HAL_DMA_Abort_IT+0x1e4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d048      	beq.n	8002b36 <HAL_DMA_Abort_IT+0xf6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <HAL_DMA_Abort_IT+0x1e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_Abort_IT+0xf0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	; (8002c2c <HAL_DMA_Abort_IT+0x1ec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d038      	beq.n	8002b2a <HAL_DMA_Abort_IT+0xea>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_DMA_Abort_IT+0x1f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d030      	beq.n	8002b24 <HAL_DMA_Abort_IT+0xe4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5b      	ldr	r2, [pc, #364]	; (8002c34 <HAL_DMA_Abort_IT+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d028      	beq.n	8002b1e <HAL_DMA_Abort_IT+0xde>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_DMA_Abort_IT+0x1dc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d020      	beq.n	8002b18 <HAL_DMA_Abort_IT+0xd8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a57      	ldr	r2, [pc, #348]	; (8002c38 <HAL_DMA_Abort_IT+0x1f8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d019      	beq.n	8002b14 <HAL_DMA_Abort_IT+0xd4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a55      	ldr	r2, [pc, #340]	; (8002c3c <HAL_DMA_Abort_IT+0x1fc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d012      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xd0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_DMA_Abort_IT+0x200>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00a      	beq.n	8002b0a <HAL_DMA_Abort_IT+0xca>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_DMA_Abort_IT+0x204>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d102      	bne.n	8002b04 <HAL_DMA_Abort_IT+0xc4>
 8002afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b02:	e01b      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b08:	e018      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0e:	e015      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b10:	2310      	movs	r3, #16
 8002b12:	e013      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e011      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b1c:	e00e      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b22:	e00b      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b28:	e008      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	e005      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b34:	e002      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b36:	2310      	movs	r3, #16
 8002b38:	e000      	b.n	8002b3c <HAL_DMA_Abort_IT+0xfc>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_DMA_Abort_IT+0x208>)
 8002b3e:	6053      	str	r3, [r2, #4]
 8002b40:	e057      	b.n	8002bf2 <HAL_DMA_Abort_IT+0x1b2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <HAL_DMA_Abort_IT+0x1e0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04f      	beq.n	8002bec <HAL_DMA_Abort_IT+0x1ac>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <HAL_DMA_Abort_IT+0x1e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d048      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x1a8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a33      	ldr	r2, [pc, #204]	; (8002c28 <HAL_DMA_Abort_IT+0x1e8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d040      	beq.n	8002be2 <HAL_DMA_Abort_IT+0x1a2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_DMA_Abort_IT+0x1ec>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d038      	beq.n	8002bdc <HAL_DMA_Abort_IT+0x19c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_DMA_Abort_IT+0x1f0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d030      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x196>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <HAL_DMA_Abort_IT+0x1f4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d028      	beq.n	8002bd0 <HAL_DMA_Abort_IT+0x190>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_DMA_Abort_IT+0x1dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d020      	beq.n	8002bca <HAL_DMA_Abort_IT+0x18a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <HAL_DMA_Abort_IT+0x1f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d019      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x186>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_DMA_Abort_IT+0x1fc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d012      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x182>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_DMA_Abort_IT+0x200>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00a      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <HAL_DMA_Abort_IT+0x204>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_DMA_Abort_IT+0x176>
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	e01b      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bba:	e018      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc0:	e015      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	e013      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e011      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bce:	e00e      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd4:	e00b      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bda:	e008      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be0:	e005      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be6:	e002      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002be8:	2310      	movs	r3, #16
 8002bea:	e000      	b.n	8002bee <HAL_DMA_Abort_IT+0x1ae>
 8002bec:	2301      	movs	r3, #1
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_DMA_Abort_IT+0x20c>)
 8002bf0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
    } 
  }
  return status;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40020080 	.word	0x40020080
 8002c20:	40020008 	.word	0x40020008
 8002c24:	4002001c 	.word	0x4002001c
 8002c28:	40020030 	.word	0x40020030
 8002c2c:	40020044 	.word	0x40020044
 8002c30:	40020058 	.word	0x40020058
 8002c34:	4002006c 	.word	0x4002006c
 8002c38:	40020408 	.word	0x40020408
 8002c3c:	4002041c 	.word	0x4002041c
 8002c40:	40020430 	.word	0x40020430
 8002c44:	40020444 	.word	0x40020444
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020000 	.word	0x40020000

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e169      	b.n	8002f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c64:	2201      	movs	r2, #1
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8158 	bne.w	8002f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a9a      	ldr	r2, [pc, #616]	; (8002ef0 <HAL_GPIO_Init+0x2a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d05e      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002c8c:	4a98      	ldr	r2, [pc, #608]	; (8002ef0 <HAL_GPIO_Init+0x2a0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d875      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002c92:	4a98      	ldr	r2, [pc, #608]	; (8002ef4 <HAL_GPIO_Init+0x2a4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d058      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002c98:	4a96      	ldr	r2, [pc, #600]	; (8002ef4 <HAL_GPIO_Init+0x2a4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d86f      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002c9e:	4a96      	ldr	r2, [pc, #600]	; (8002ef8 <HAL_GPIO_Init+0x2a8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d052      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002ca4:	4a94      	ldr	r2, [pc, #592]	; (8002ef8 <HAL_GPIO_Init+0x2a8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d869      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002caa:	4a94      	ldr	r2, [pc, #592]	; (8002efc <HAL_GPIO_Init+0x2ac>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04c      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002cb0:	4a92      	ldr	r2, [pc, #584]	; (8002efc <HAL_GPIO_Init+0x2ac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d863      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002cb6:	4a92      	ldr	r2, [pc, #584]	; (8002f00 <HAL_GPIO_Init+0x2b0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d046      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002cbc:	4a90      	ldr	r2, [pc, #576]	; (8002f00 <HAL_GPIO_Init+0x2b0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d85d      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002cc2:	2b12      	cmp	r3, #18
 8002cc4:	d82a      	bhi.n	8002d1c <HAL_GPIO_Init+0xcc>
 8002cc6:	2b12      	cmp	r3, #18
 8002cc8:	d859      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_GPIO_Init+0x80>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002d4b 	.word	0x08002d4b
 8002cd4:	08002d25 	.word	0x08002d25
 8002cd8:	08002d37 	.word	0x08002d37
 8002cdc:	08002d79 	.word	0x08002d79
 8002ce0:	08002d7f 	.word	0x08002d7f
 8002ce4:	08002d7f 	.word	0x08002d7f
 8002ce8:	08002d7f 	.word	0x08002d7f
 8002cec:	08002d7f 	.word	0x08002d7f
 8002cf0:	08002d7f 	.word	0x08002d7f
 8002cf4:	08002d7f 	.word	0x08002d7f
 8002cf8:	08002d7f 	.word	0x08002d7f
 8002cfc:	08002d7f 	.word	0x08002d7f
 8002d00:	08002d7f 	.word	0x08002d7f
 8002d04:	08002d7f 	.word	0x08002d7f
 8002d08:	08002d7f 	.word	0x08002d7f
 8002d0c:	08002d7f 	.word	0x08002d7f
 8002d10:	08002d7f 	.word	0x08002d7f
 8002d14:	08002d2d 	.word	0x08002d2d
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_GPIO_Init+0x2b4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d22:	e02c      	b.n	8002d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	623b      	str	r3, [r7, #32]
          break;
 8002d2a:	e029      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	3304      	adds	r3, #4
 8002d32:	623b      	str	r3, [r7, #32]
          break;
 8002d34:	e024      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e01f      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	330c      	adds	r3, #12
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e01a      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d52:	2304      	movs	r3, #4
 8002d54:	623b      	str	r3, [r7, #32]
          break;
 8002d56:	e013      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d60:	2308      	movs	r3, #8
 8002d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	611a      	str	r2, [r3, #16]
          break;
 8002d6a:	e009      	b.n	8002d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	615a      	str	r2, [r3, #20]
          break;
 8002d76:	e003      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
          break;
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          break;
 8002d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d801      	bhi.n	8002d8a <HAL_GPIO_Init+0x13a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	e001      	b.n	8002d8e <HAL_GPIO_Init+0x13e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2bff      	cmp	r3, #255	; 0xff
 8002d94:	d802      	bhi.n	8002d9c <HAL_GPIO_Init+0x14c>
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	e002      	b.n	8002da2 <HAL_GPIO_Init+0x152>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	3b08      	subs	r3, #8
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	210f      	movs	r1, #15
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80b1 	beq.w	8002f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_GPIO_Init+0x2b8>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6193      	str	r3, [r2, #24]
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_GPIO_Init+0x2b8>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de8:	4a48      	ldr	r2, [pc, #288]	; (8002f0c <HAL_GPIO_Init+0x2bc>)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <HAL_GPIO_Init+0x2c0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <HAL_GPIO_Init+0x1ec>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3f      	ldr	r2, [pc, #252]	; (8002f14 <HAL_GPIO_Init+0x2c4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00d      	beq.n	8002e38 <HAL_GPIO_Init+0x1e8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3e      	ldr	r2, [pc, #248]	; (8002f18 <HAL_GPIO_Init+0x2c8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <HAL_GPIO_Init+0x1e4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <HAL_GPIO_Init+0x2cc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_GPIO_Init+0x1e0>
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e006      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e004      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e4e:	492f      	ldr	r1, [pc, #188]	; (8002f0c <HAL_GPIO_Init+0x2bc>)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	492c      	ldr	r1, [pc, #176]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4928      	ldr	r1, [pc, #160]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4922      	ldr	r1, [pc, #136]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	491e      	ldr	r1, [pc, #120]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4918      	ldr	r1, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4914      	ldr	r1, [pc, #80]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d021      	beq.n	8002f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e021      	b.n	8002f32 <HAL_GPIO_Init+0x2e2>
 8002eee:	bf00      	nop
 8002ef0:	10320000 	.word	0x10320000
 8002ef4:	10310000 	.word	0x10310000
 8002ef8:	10220000 	.word	0x10220000
 8002efc:	10210000 	.word	0x10210000
 8002f00:	10120000 	.word	0x10120000
 8002f04:	10110000 	.word	0x10110000
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40010800 	.word	0x40010800
 8002f14:	40010c00 	.word	0x40010c00
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	3301      	adds	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f47f ae8e 	bne.w	8002c64 <HAL_GPIO_Init+0x14>
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	372c      	adds	r7, #44	; 0x2c
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e001      	b.n	8002f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	807b      	strh	r3, [r7, #2]
 8002f92:	4613      	mov	r3, r2
 8002f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f96:	787b      	ldrb	r3, [r7, #1]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9c:	887a      	ldrh	r2, [r7, #2]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fa2:	e003      	b.n	8002fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	041a      	lsls	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e304      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8087 	beq.w	80030e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd8:	4b92      	ldr	r3, [pc, #584]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d00c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d112      	bne.n	8003016 <HAL_RCC_OscConfig+0x5e>
 8002ff0:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d06c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x12c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d168      	bne.n	80030e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e2de      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x76>
 8003020:	4b80      	ldr	r3, [pc, #512]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a7f      	ldr	r2, [pc, #508]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e02e      	b.n	800308c <HAL_RCC_OscConfig+0xd4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x98>
 8003036:	4b7b      	ldr	r3, [pc, #492]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7a      	ldr	r2, [pc, #488]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800303c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b78      	ldr	r3, [pc, #480]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xd4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0xbc>
 800305a:	4b72      	ldr	r3, [pc, #456]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a71      	ldr	r2, [pc, #452]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6e      	ldr	r2, [pc, #440]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xd4>
 8003074:	4b6b      	ldr	r3, [pc, #428]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a67      	ldr	r2, [pc, #412]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7ff fb5e 	bl	8002754 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff fb5a 	bl	8002754 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e292      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b5d      	ldr	r3, [pc, #372]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xe4>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7ff fb4a 	bl	8002754 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7ff fb46 	bl	8002754 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e27e      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x10c>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f2:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x18c>
 800310a:	4b46      	ldr	r3, [pc, #280]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x176>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e252      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4939      	ldr	r1, [pc, #228]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e03a      	b.n	80031ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x270>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7ff faff 	bl	8002754 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7ff fafb 	bl	8002754 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e233      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4927      	ldr	r1, [pc, #156]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0x270>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fade 	bl	8002754 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319c:	f7ff fada 	bl	8002754 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e212      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03a      	beq.n	800323c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x274>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7ff fabe 	bl	8002754 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7ff faba 	bl	8002754 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1f2      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f000 fc02 	bl	8003a04 <RCC_Delay>
 8003200:	e01c      	b.n	800323c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_OscConfig+0x274>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7ff faa4 	bl	8002754 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320e:	e00f      	b.n	8003230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7ff faa0 	bl	8002754 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d908      	bls.n	8003230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1d8      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	42420000 	.word	0x42420000
 800322c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	4b9b      	ldr	r3, [pc, #620]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e9      	bne.n	8003210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a6 	beq.w	8003396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b94      	ldr	r3, [pc, #592]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4b91      	ldr	r3, [pc, #580]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a90      	ldr	r2, [pc, #576]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]
 8003266:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d118      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b88      	ldr	r3, [pc, #544]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a87      	ldr	r2, [pc, #540]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7ff fa61 	bl	8002754 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7ff fa5d 	bl	8002754 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	; 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e195      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b7e      	ldr	r3, [pc, #504]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x312>
 80032bc:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4a77      	ldr	r2, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6213      	str	r3, [r2, #32]
 80032c8:	e02d      	b.n	8003326 <HAL_RCC_OscConfig+0x36e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x334>
 80032d2:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a72      	ldr	r2, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6213      	str	r3, [r2, #32]
 80032de:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a6f      	ldr	r2, [pc, #444]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	6213      	str	r3, [r2, #32]
 80032ea:	e01c      	b.n	8003326 <HAL_RCC_OscConfig+0x36e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b05      	cmp	r3, #5
 80032f2:	d10c      	bne.n	800330e <HAL_RCC_OscConfig+0x356>
 80032f4:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4a69      	ldr	r2, [pc, #420]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	6213      	str	r3, [r2, #32]
 8003300:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a66      	ldr	r2, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e00b      	b.n	8003326 <HAL_RCC_OscConfig+0x36e>
 800330e:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6213      	str	r3, [r2, #32]
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a60      	ldr	r2, [pc, #384]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d015      	beq.n	800335a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7ff fa11 	bl	8002754 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7ff fa0d 	bl	8002754 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e143      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	4b54      	ldr	r3, [pc, #336]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ee      	beq.n	8003336 <HAL_RCC_OscConfig+0x37e>
 8003358:	e014      	b.n	8003384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7ff f9fb 	bl	8002754 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7ff f9f7 	bl	8002754 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e12d      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003378:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ee      	bne.n	8003362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4a44      	ldr	r2, [pc, #272]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 808c 	beq.w	80034b8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d10e      	bne.n	80033cc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80033ae:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d108      	bne.n	80033cc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e103      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d14e      	bne.n	8003472 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80033d4:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80033e0:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0ef      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCC_OscConfig+0x4f0>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7ff f9ab 	bl	8002754 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003402:	f7ff f9a7 	bl	8002754 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b64      	cmp	r3, #100	; 0x64
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0df      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003420:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	491c      	ldr	r1, [pc, #112]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800342e:	4313      	orrs	r3, r2
 8003430:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4918      	ldr	r1, [pc, #96]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	4313      	orrs	r3, r2
 8003442:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_RCC_OscConfig+0x4f0>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7ff f983 	bl	8002754 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003452:	f7ff f97f 	bl	8002754 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b64      	cmp	r3, #100	; 0x64
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0b7      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x49a>
 8003470:	e022      	b.n	80034b8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_OscConfig+0x4f0>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7ff f966 	bl	8002754 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800348c:	f7ff f962 	bl	8002754 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d908      	bls.n	80034ac <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e09a      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80034ac:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e9      	bne.n	800348c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8088 	beq.w	80035d2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d068      	beq.n	80035a0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d14d      	bne.n	8003572 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0x628>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7ff f93a 	bl	8002754 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7ff f936 	bl	8002754 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e06e      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350a:	d10f      	bne.n	800352c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800350c:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4931      	ldr	r1, [pc, #196]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 8003516:	4313      	orrs	r3, r2
 8003518:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800351a:	4b30      	ldr	r3, [pc, #192]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f023 020f 	bic.w	r2, r3, #15
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	492d      	ldr	r1, [pc, #180]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 8003528:	4313      	orrs	r3, r2
 800352a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	430b      	orrs	r3, r1
 800353e:	4927      	ldr	r1, [pc, #156]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x628>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7ff f903 	bl	8002754 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7ff f8ff 	bl	8002754 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e037      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x59a>
 8003570:	e02f      	b.n	80035d2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x628>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7ff f8ec 	bl	8002754 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7ff f8e8 	bl	8002754 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e020      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c8>
 800359e:	e018      	b.n	80035d2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e013      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_OscConfig+0x624>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	429a      	cmp	r2, r3
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	42420060 	.word	0x42420060

080035e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0d0      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d910      	bls.n	8003628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0207 	bic.w	r2, r3, #7
 800360e:	4965      	ldr	r1, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800364a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d040      	beq.n	8003704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d115      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e073      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06b      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f023 0203 	bic.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4936      	ldr	r1, [pc, #216]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d4:	f7ff f83e 	bl	8002754 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036dc:	f7ff f83a 	bl	8002754 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e053      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 020c 	and.w	r2, r3, #12
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	429a      	cmp	r2, r3
 8003702:	d1eb      	bne.n	80036dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003704:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d210      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 0207 	bic.w	r2, r3, #7
 800371a:	4922      	ldr	r1, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f821 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003776:	4602      	mov	r2, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490a      	ldr	r1, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1cc>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe ff9c 	bl	80026d0 <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08005c10 	.word	0x08005c10
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004

080037b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037bc:	b092      	sub	sp, #72	; 0x48
 80037be:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c4:	2300      	movs	r3, #0
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c8:	2300      	movs	r3, #0
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
 80037cc:	2300      	movs	r3, #0
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
 80037d8:	2300      	movs	r3, #0
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037dc:	4b6b      	ldr	r3, [pc, #428]	; (800398c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d002      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d003      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x40>
 80037f0:	e0c3      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037f2:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037f6:	e0c3      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4b64      	ldr	r3, [pc, #400]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80ac 	beq.w	800396a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003812:	4b5e      	ldr	r3, [pc, #376]	; (800398c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <HAL_RCC_GetSysClockFreq+0x1e0>)
 800381c:	5c9b      	ldrb	r3, [r3, r2]
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003820:	4b5a      	ldr	r3, [pc, #360]	; (800398c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 808c 	beq.w	8003946 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	3301      	adds	r3, #1
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3302      	adds	r3, #2
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	2200      	movs	r2, #0
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	627a      	str	r2, [r7, #36]	; 0x24
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	2200      	movs	r2, #0
 8003856:	4618      	mov	r0, r3
 8003858:	4611      	mov	r1, r2
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	fb00 f203 	mul.w	r2, r0, r3
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	fb03 f301 	mul.w	r3, r3, r1
 8003866:	4413      	add	r3, r2
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	fba2 4500 	umull	r4, r5, r2, r0
 800386e:	442b      	add	r3, r5
 8003870:	461d      	mov	r5, r3
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003884:	0150      	lsls	r0, r2, #5
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	ebb2 0a04 	subs.w	sl, r2, r4
 800388e:	eb63 0b05 	sbc.w	fp, r3, r5
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800389e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038a6:	ebb2 080a 	subs.w	r8, r2, sl
 80038aa:	eb63 090b 	sbc.w	r9, r3, fp
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c2:	4690      	mov	r8, r2
 80038c4:	4699      	mov	r9, r3
 80038c6:	eb18 0304 	adds.w	r3, r8, r4
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	eb49 0305 	adc.w	r3, r9, r5
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038de:	4629      	mov	r1, r5
 80038e0:	024b      	lsls	r3, r1, #9
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	4604      	mov	r4, r0
 80038e8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80038ec:	4601      	mov	r1, r0
 80038ee:	024a      	lsls	r2, r1, #9
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	2200      	movs	r2, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	617a      	str	r2, [r7, #20]
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	2200      	movs	r2, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	60fa      	str	r2, [r7, #12]
 8003904:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003908:	4622      	mov	r2, r4
 800390a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800390e:	4645      	mov	r5, r8
 8003910:	fb05 f202 	mul.w	r2, r5, r2
 8003914:	46cc      	mov	ip, r9
 8003916:	4625      	mov	r5, r4
 8003918:	461c      	mov	r4, r3
 800391a:	4623      	mov	r3, r4
 800391c:	fb03 f30c 	mul.w	r3, r3, ip
 8003920:	4413      	add	r3, r2
 8003922:	4622      	mov	r2, r4
 8003924:	4644      	mov	r4, r8
 8003926:	fba2 2404 	umull	r2, r4, r2, r4
 800392a:	61fc      	str	r4, [r7, #28]
 800392c:	61ba      	str	r2, [r7, #24]
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003938:	f7fc fc74 	bl	8000224 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
 8003944:	e007      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003958:	7b5b      	ldrb	r3, [r3, #13]
 800395a:	461a      	mov	r2, r3
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8003962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	647b      	str	r3, [r7, #68]	; 0x44
 8003968:	e004      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <HAL_RCC_GetSysClockFreq+0x1e4>)
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003978:	e002      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800397c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800397e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003982:	4618      	mov	r0, r3
 8003984:	3748      	adds	r7, #72	; 0x48
 8003986:	46bd      	mov	sp, r7
 8003988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	007a1200 	.word	0x007a1200
 8003994:	08005c28 	.word	0x08005c28
 8003998:	08005c38 	.word	0x08005c38
 800399c:	003d0900 	.word	0x003d0900

080039a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	20000000 	.word	0x20000000

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff2 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08005c20 	.word	0x08005c20

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffde 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	0adb      	lsrs	r3, r3, #11
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08005c20 	.word	0x08005c20

08003a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <RCC_Delay+0x34>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <RCC_Delay+0x38>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0a5b      	lsrs	r3, r3, #9
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a20:	bf00      	nop
  }
  while (Delay --);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e5a      	subs	r2, r3, #1
 8003a26:	60fa      	str	r2, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f9      	bne.n	8003a20 <RCC_Delay+0x1c>
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	10624dd3 	.word	0x10624dd3

08003a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e076      	b.n	8003b40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d009      	beq.n	8003a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe f89c 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	ea42 0103 	orr.w	r1, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1a      	lsrs	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f002 0204 	and.w	r2, r2, #4
 8003b1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_SPI_Transmit+0x22>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e12d      	b.n	8003dc6 <HAL_SPI_Transmit+0x27e>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b72:	f7fe fdef 	bl	8002754 <HAL_GetTick>
 8003b76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b8c:	e116      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Transmit+0x52>
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b9e:	e10d      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be6:	d10f      	bne.n	8003c08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d007      	beq.n	8003c26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d14f      	bne.n	8003cd0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_Transmit+0xf6>
 8003c38:	8afb      	ldrh	r3, [r7, #22]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d142      	bne.n	8003cc4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c62:	e02f      	b.n	8003cc4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d112      	bne.n	8003c98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	881a      	ldrh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c96:	e015      	b.n	8003cc4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c98:	f7fe fd5c 	bl	8002754 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d803      	bhi.n	8003cb0 <HAL_SPI_Transmit+0x168>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Transmit+0x16e>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003cc2:	e07b      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ca      	bne.n	8003c64 <HAL_SPI_Transmit+0x11c>
 8003cce:	e050      	b.n	8003d72 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_Transmit+0x196>
 8003cd8:	8afb      	ldrh	r3, [r7, #22]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d144      	bne.n	8003d68 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d04:	e030      	b.n	8003d68 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d113      	bne.n	8003d3c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d3a:	e015      	b.n	8003d68 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d3c:	f7fe fd0a 	bl	8002754 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d803      	bhi.n	8003d54 <HAL_SPI_Transmit+0x20c>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d102      	bne.n	8003d5a <HAL_SPI_Transmit+0x212>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d66:	e029      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1c9      	bne.n	8003d06 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fbcc 	bl	8004514 <SPI_EndRxTxTransaction>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e003      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	af02      	add	r7, sp, #8
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003df2:	e0fb      	b.n	8003fec <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfc:	d112      	bne.n	8003e24 <HAL_SPI_Receive+0x56>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8ef 	bl	8003ffe <HAL_SPI_TransmitReceive>
 8003e20:	4603      	mov	r3, r0
 8003e22:	e0e8      	b.n	8003ff6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_SPI_Receive+0x64>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e0e1      	b.n	8003ff6 <HAL_SPI_Receive+0x228>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e3a:	f7fe fc8b 	bl	8002754 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_SPI_Receive+0x7e>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e50:	e0cc      	b.n	8003fec <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2204      	movs	r2, #4
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e98:	d10f      	bne.n	8003eba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d007      	beq.n	8003ed8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d16a      	bne.n	8003fb6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ee0:	e032      	b.n	8003f48 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d115      	bne.n	8003f1c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f103 020c 	add.w	r2, r3, #12
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f1a:	e015      	b.n	8003f48 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f1c:	f7fe fc1a 	bl	8002754 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d803      	bhi.n	8003f34 <HAL_SPI_Receive+0x166>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d102      	bne.n	8003f3a <HAL_SPI_Receive+0x16c>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f46:	e051      	b.n	8003fec <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1c7      	bne.n	8003ee2 <HAL_SPI_Receive+0x114>
 8003f52:	e035      	b.n	8003fc0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d113      	bne.n	8003f8a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	1c9a      	adds	r2, r3, #2
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f88:	e015      	b.n	8003fb6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8a:	f7fe fbe3 	bl	8002754 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d803      	bhi.n	8003fa2 <HAL_SPI_Receive+0x1d4>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Receive+0x1da>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003fb4:	e01a      	b.n	8003fec <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1c9      	bne.n	8003f54 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fa53 	bl	8004470 <SPI_EndRxTransaction>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
 8003fe2:	e003      	b.n	8003fec <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b08c      	sub	sp, #48	; 0x30
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800400c:	2301      	movs	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x26>
 8004020:	2302      	movs	r3, #2
 8004022:	e198      	b.n	8004356 <HAL_SPI_TransmitReceive+0x358>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800402c:	f7fe fb92 	bl	8002754 <HAL_GetTick>
 8004030:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800404a:	2b01      	cmp	r3, #1
 800404c:	d00f      	beq.n	800406e <HAL_SPI_TransmitReceive+0x70>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004054:	d107      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x68>
 800405e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004062:	2b04      	cmp	r3, #4
 8004064:	d003      	beq.n	800406e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004066:	2302      	movs	r3, #2
 8004068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800406c:	e16d      	b.n	800434a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x82>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x82>
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004086:	e160      	b.n	800434a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b04      	cmp	r3, #4
 8004092:	d003      	beq.n	800409c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2205      	movs	r2, #5
 8004098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	887a      	ldrh	r2, [r7, #2]
 80040b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d007      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f8:	d17c      	bne.n	80041f4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x10a>
 8004102:	8b7b      	ldrh	r3, [r7, #26]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d16a      	bne.n	80041de <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	1c9a      	adds	r2, r3, #2
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412c:	e057      	b.n	80041de <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d11b      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x176>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x176>
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d113      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d119      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x1b8>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d014      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	b292      	uxth	r2, r2
 8004198:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041b2:	2301      	movs	r3, #1
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041b6:	f7fe facd 	bl	8002754 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d80b      	bhi.n	80041de <HAL_SPI_TransmitReceive+0x1e0>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d007      	beq.n	80041de <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80041dc:	e0b5      	b.n	800434a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1a2      	bne.n	800412e <HAL_SPI_TransmitReceive+0x130>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d19d      	bne.n	800412e <HAL_SPI_TransmitReceive+0x130>
 80041f2:	e080      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x204>
 80041fc:	8b7b      	ldrh	r3, [r7, #26]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d16f      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004228:	e05b      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	d11c      	bne.n	8004272 <HAL_SPI_TransmitReceive+0x274>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x274>
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d114      	bne.n	8004272 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d119      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x2b6>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d014      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b0:	2301      	movs	r3, #1
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042b4:	f7fe fa4e 	bl	8002754 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d803      	bhi.n	80042cc <HAL_SPI_TransmitReceive+0x2ce>
 80042c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d102      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x2d4>
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042e0:	e033      	b.n	800434a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d19e      	bne.n	800422a <HAL_SPI_TransmitReceive+0x22c>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d199      	bne.n	800422a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f90a 	bl	8004514 <SPI_EndRxTxTransaction>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004312:	e01a      	b.n	800434a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004340:	e003      	b.n	800434a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004356:	4618      	mov	r0, r3
 8004358:	3730      	adds	r7, #48	; 0x30
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004370:	f7fe f9f0 	bl	8002754 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	4413      	add	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004380:	f7fe f9e8 	bl	8002754 <HAL_GetTick>
 8004384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004386:	4b39      	ldr	r3, [pc, #228]	; (800446c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	015b      	lsls	r3, r3, #5
 800438c:	0d1b      	lsrs	r3, r3, #20
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004396:	e054      	b.n	8004442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d050      	beq.n	8004442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043a0:	f7fe f9d8 	bl	8002754 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d902      	bls.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d13d      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ce:	d111      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d8:	d004      	beq.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d107      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fc:	d10f      	bne.n	800441e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800441c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e017      	b.n	8004462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	429a      	cmp	r2, r3
 800445e:	d19b      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000000 	.word	0x20000000

08004470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004484:	d111      	bne.n	80044aa <SPI_EndRxTransaction+0x3a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448e:	d004      	beq.n	800449a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d107      	bne.n	80044aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d117      	bne.n	80044e4 <SPI_EndRxTransaction+0x74>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d112      	bne.n	80044e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2101      	movs	r1, #1
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff ff49 	bl	8004360 <SPI_WaitFlagStateUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01a      	beq.n	800450a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e013      	b.n	800450c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ff36 	bl	8004360 <SPI_WaitFlagStateUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e000      	b.n	800450c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff18 	bl	8004360 <SPI_WaitFlagStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e000      	b.n	8004548 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e041      	b.n	80045e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fb74 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 fa7c 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e03f      	b.n	8004688 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_TIM_Base_Start_IT+0xa4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_TIM_Base_Start_IT+0x62>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d00e      	beq.n	8004652 <HAL_TIM_Base_Start_IT+0x62>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_TIM_Base_Start_IT+0xa8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIM_Base_Start_IT+0x62>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a16      	ldr	r2, [pc, #88]	; (800469c <HAL_TIM_Base_Start_IT+0xac>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIM_Base_Start_IT+0x62>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <HAL_TIM_Base_Start_IT+0xb0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d111      	bne.n	8004676 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b06      	cmp	r3, #6
 8004662:	d010      	beq.n	8004686 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	e007      	b.n	8004686 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00

080046a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0202 	mvn.w	r2, #2
 80046d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9b4 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9a7 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f9b6 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0204 	mvn.w	r2, #4
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f98a 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f97d 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f98c 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b08      	cmp	r3, #8
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0208 	mvn.w	r2, #8
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f960 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f953 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f962 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2208      	movs	r2, #8
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f936 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f929 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f938 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0201 	mvn.w	r2, #1
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fb fe90 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d107      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa8d 	bl	8004d6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8fc 	bl	8004a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b20      	cmp	r3, #32
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b20      	cmp	r3, #32
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0220 	mvn.w	r2, #32
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa58 	bl	8004d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_ConfigClockSource+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0b4      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x186>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004908:	d03e      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0xd4>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490e:	f200 8087 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	f000 8086 	beq.w	8004a26 <HAL_TIM_ConfigClockSource+0x172>
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d87f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d01a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xa6>
 8004924:	2b70      	cmp	r3, #112	; 0x70
 8004926:	d87b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b60      	cmp	r3, #96	; 0x60
 800492a:	d050      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x11a>
 800492c:	2b60      	cmp	r3, #96	; 0x60
 800492e:	d877      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b50      	cmp	r3, #80	; 0x50
 8004932:	d03c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0xfa>
 8004934:	2b50      	cmp	r3, #80	; 0x50
 8004936:	d873      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d058      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x13a>
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d86f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d064      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004944:	2b30      	cmp	r3, #48	; 0x30
 8004946:	d86b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d060      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 800494c:	2b20      	cmp	r3, #32
 800494e:	d867      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05c      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004954:	2b10      	cmp	r3, #16
 8004956:	d05a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004958:	e062      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6899      	ldr	r1, [r3, #8]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f000 f972 	bl	8004c52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800497c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
      break;
 8004986:	e04f      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6899      	ldr	r1, [r3, #8]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f000 f95b 	bl	8004c52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049aa:	609a      	str	r2, [r3, #8]
      break;
 80049ac:	e03c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 f8d2 	bl	8004b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2150      	movs	r1, #80	; 0x50
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f929 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 80049cc:	e02c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 f8f0 	bl	8004bc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2160      	movs	r1, #96	; 0x60
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f919 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 80049ec:	e01c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 f8b2 	bl	8004b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2140      	movs	r1, #64	; 0x40
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f909 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e00c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f000 f900 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 8004a1e:	e003      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
	...

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <TIM_Base_SetConfig+0xc8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x38>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x38>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <TIM_Base_SetConfig+0xcc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x38>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	; (8004b5c <TIM_Base_SetConfig+0xd0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x38>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <TIM_Base_SetConfig+0xd4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <TIM_Base_SetConfig+0xc8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00f      	beq.n	8004afe <TIM_Base_SetConfig+0x72>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d00b      	beq.n	8004afe <TIM_Base_SetConfig+0x72>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <TIM_Base_SetConfig+0xcc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_Base_SetConfig+0x72>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <TIM_Base_SetConfig+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_Base_SetConfig+0x72>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <TIM_Base_SetConfig+0xd4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d108      	bne.n	8004b10 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <TIM_Base_SetConfig+0xc8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d103      	bne.n	8004b44 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	615a      	str	r2, [r3, #20]
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00

08004b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 030a 	bic.w	r3, r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0210 	bic.w	r2, r3, #16
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	031b      	lsls	r3, r3, #12
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	621a      	str	r2, [r3, #32]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f043 0307 	orr.w	r3, r3, #7
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b087      	sub	sp, #28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	021a      	lsls	r2, r3, #8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	609a      	str	r2, [r3, #8]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e04b      	b.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10c      	bne.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00

08004d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e042      	b.n	8004e18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc ff9c 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fd5d 	bl	8005884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d121      	bne.n	8004e7e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_UART_Transmit_IT+0x26>
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01a      	b.n	8004e80 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2221      	movs	r2, #33	; 0x21
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr

08004e8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	4613      	mov	r3, r2
 8004e96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d112      	bne.n	8004eca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Receive_IT+0x26>
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e00b      	b.n	8004ecc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fb0b 	bl	80054dc <UART_Start_Receive_IT>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08c      	sub	sp, #48	; 0x30
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d14a      	bne.n	8004f84 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e043      	b.n	8004f86 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fae3 	bl	80054dc <UART_Start_Receive_IT>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d12c      	bne.n	8004f7e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d125      	bne.n	8004f78 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	617b      	str	r3, [r7, #20]
   return(result);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f043 0310 	orr.w	r3, r3, #16
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f62:	627a      	str	r2, [r7, #36]	; 0x24
 8004f64:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6a39      	ldr	r1, [r7, #32]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e5      	bne.n	8004f42 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004f76:	e002      	b.n	8004f7e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f82:	e000      	b.n	8004f86 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3730      	adds	r7, #48	; 0x30
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0ba      	sub	sp, #232	; 0xe8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fb8a 	bl	8005708 <UART_Receive_IT>
      return;
 8004ff4:	e25b      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80de 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80d1 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
 800506e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f043 0204 	orr.w	r2, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800509e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f043 0208 	orr.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 81f2 	beq.w	80054a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb15 	bl	8005708 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_UART_IRQHandler+0x17a>
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa1f 	bl	800554e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d041      	beq.n	80051a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3314      	adds	r3, #20
 8005146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800514a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800514e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1d9      	bne.n	800511e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	4a7e      	ldr	r2, [pc, #504]	; (8005370 <HAL_UART_IRQHandler+0x3e0>)
 8005178:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd fc5e 	bl	8002a40 <HAL_DMA_Abort_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e00e      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f98a 	bl	80054b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00a      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f986 	bl	80054b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e006      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f982 	bl	80054b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80051b6:	e175      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	bf00      	nop
    return;
 80051ba:	e173      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 814f 	bne.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8148 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8141 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80b6 	beq.w	8005374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8145 	beq.w	80054a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005226:	429a      	cmp	r2, r3
 8005228:	f080 813e 	bcs.w	80054a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b20      	cmp	r3, #32
 800523c:	f000 8088 	beq.w	8005350 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800525a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800526c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1d9      	bne.n	8005240 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800529c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e1      	bne.n	800528c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e3      	bne.n	80052c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005332:	65ba      	str	r2, [r7, #88]	; 0x58
 8005334:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	4618      	mov	r0, r3
 800534c:	f7fd fb3d 	bl	80029ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535e:	b29b      	uxth	r3, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8ad 	bl	80054c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800536c:	e09c      	b.n	80054a8 <HAL_UART_IRQHandler+0x518>
 800536e:	bf00      	nop
 8005370:	08005613 	.word	0x08005613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 808e 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8089 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053be:	647a      	str	r2, [r7, #68]	; 0x44
 80053c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e3      	bne.n	800539a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053f6:	633a      	str	r2, [r7, #48]	; 0x30
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60fb      	str	r3, [r7, #12]
   return(result);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800543c:	61fa      	str	r2, [r7, #28]
 800543e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f832 	bl	80054c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005462:	e023      	b.n	80054ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8dc 	bl	800563a <UART_Transmit_IT>
    return;
 8005482:	e014      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f91b 	bl	80056d8 <UART_EndTransmit_IT>
    return;
 80054a2:	e004      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    return;
 80054a4:	bf00      	nop
 80054a6:	e002      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054ac:	bf00      	nop
  }
}
 80054ae:	37e8      	adds	r7, #232	; 0xe8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2222      	movs	r2, #34	; 0x22
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005520:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0220 	orr.w	r2, r2, #32
 8005540:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800554e:	b480      	push	{r7}
 8005550:	b095      	sub	sp, #84	; 0x54
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800556c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005576:	643a      	str	r2, [r7, #64]	; 0x40
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800557c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e5      	bne.n	8005556 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	61fb      	str	r3, [r7, #28]
   return(result);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d119      	bne.n	80055fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0310 	bic.w	r3, r3, #16
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055e6:	61ba      	str	r2, [r7, #24]
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6979      	ldr	r1, [r7, #20]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	613b      	str	r3, [r7, #16]
   return(result);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005608:	bf00      	nop
 800560a:	3754      	adds	r7, #84	; 0x54
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ff41 	bl	80054b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b21      	cmp	r3, #33	; 0x21
 800564c:	d13e      	bne.n	80056cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005656:	d114      	bne.n	8005682 <UART_Transmit_IT+0x48>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d110      	bne.n	8005682 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005674:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	1c9a      	adds	r2, r3, #2
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]
 8005680:	e008      	b.n	8005694 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6211      	str	r1, [r2, #32]
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4619      	mov	r1, r3
 80056a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10f      	bne.n	80056c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fb f9a1 	bl	8000a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08c      	sub	sp, #48	; 0x30
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b22      	cmp	r3, #34	; 0x22
 800571a:	f040 80ae 	bne.w	800587a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005726:	d117      	bne.n	8005758 <UART_Receive_IT+0x50>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d113      	bne.n	8005758 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	b29a      	uxth	r2, r3
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	1c9a      	adds	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	629a      	str	r2, [r3, #40]	; 0x28
 8005756:	e026      	b.n	80057a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	d007      	beq.n	800577c <UART_Receive_IT+0x74>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <UART_Receive_IT+0x82>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	e008      	b.n	800579c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005796:	b2da      	uxtb	r2, r3
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4619      	mov	r1, r3
 80057b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d15d      	bne.n	8005876 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0220 	bic.w	r2, r2, #32
 80057c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d135      	bne.n	800586c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	613b      	str	r3, [r7, #16]
   return(result);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f023 0310 	bic.w	r3, r3, #16
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	623a      	str	r2, [r7, #32]
 8005828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	69f9      	ldr	r1, [r7, #28]
 800582c:	6a3a      	ldr	r2, [r7, #32]
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	61bb      	str	r3, [r7, #24]
   return(result);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d10a      	bne.n	800585e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fe2e 	bl	80054c6 <HAL_UARTEx_RxEventCallback>
 800586a:	e002      	b.n	8005872 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fa fffb 	bl	8000868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e002      	b.n	800587c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800587a:	2302      	movs	r3, #2
  }
}
 800587c:	4618      	mov	r0, r3
 800587e:	3730      	adds	r7, #48	; 0x30
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058be:	f023 030c 	bic.w	r3, r3, #12
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2c      	ldr	r2, [pc, #176]	; (8005998 <UART_SetConfig+0x114>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d103      	bne.n	80058f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7fe f876 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	e002      	b.n	80058fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7fe f85e 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 80058f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <UART_SetConfig+0x118>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	0119      	lsls	r1, r3, #4
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009a      	lsls	r2, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <UART_SetConfig+0x118>)
 8005932:	fba3 0302 	umull	r0, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2064      	movs	r0, #100	; 0x64
 800593a:	fb00 f303 	mul.w	r3, r0, r3
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	3332      	adds	r3, #50	; 0x32
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <UART_SetConfig+0x118>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005950:	4419      	add	r1, r3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009a      	lsls	r2, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	fbb2 f2f3 	udiv	r2, r2, r3
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <UART_SetConfig+0x118>)
 800596a:	fba3 0302 	umull	r0, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2064      	movs	r0, #100	; 0x64
 8005972:	fb00 f303 	mul.w	r3, r0, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a07      	ldr	r2, [pc, #28]	; (800599c <UART_SetConfig+0x118>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	440a      	add	r2, r1
 800598e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40013800 	.word	0x40013800
 800599c:	51eb851f 	.word	0x51eb851f

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	2600      	movs	r6, #0
 80059a4:	4d0c      	ldr	r5, [pc, #48]	; (80059d8 <__libc_init_array+0x38>)
 80059a6:	4c0d      	ldr	r4, [pc, #52]	; (80059dc <__libc_init_array+0x3c>)
 80059a8:	1b64      	subs	r4, r4, r5
 80059aa:	10a4      	asrs	r4, r4, #2
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	f000 f822 	bl	80059f8 <_init>
 80059b4:	2600      	movs	r6, #0
 80059b6:	4d0a      	ldr	r5, [pc, #40]	; (80059e0 <__libc_init_array+0x40>)
 80059b8:	4c0a      	ldr	r4, [pc, #40]	; (80059e4 <__libc_init_array+0x44>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	08005c50 	.word	0x08005c50
 80059dc:	08005c50 	.word	0x08005c50
 80059e0:	08005c50 	.word	0x08005c50
 80059e4:	08005c54 	.word	0x08005c54

080059e8 <memset>:
 80059e8:	4603      	mov	r3, r0
 80059ea:	4402      	add	r2, r0
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d100      	bne.n	80059f2 <memset+0xa>
 80059f0:	4770      	bx	lr
 80059f2:	f803 1b01 	strb.w	r1, [r3], #1
 80059f6:	e7f9      	b.n	80059ec <memset+0x4>

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
