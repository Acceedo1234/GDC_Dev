
STM32F107VCT7_GDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005928  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005b0c  08005b0c  00015b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d44  08005d44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d4c  08005d4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08005d60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005d60  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001184e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277a  00000000  00000000  00031883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00034000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f46b  00000000  00000000  00035ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012edf  00000000  00000000  0005532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9f4f  00000000  00000000  0006820a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  001221ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005af4 	.word	0x08005af4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08005af4 	.word	0x08005af4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <TimerApplicationInit>:
uint8_t Complete_Offset_Sliderout_Timer;
uint8_t Complete_Offset_EjectionIn_Timer;
uint8_t Complete_Offset_Ejectionout_Timer;

void TimerApplicationInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <TimerApplicationInit+0x14>)
 8000532:	f004 f8db 	bl	80046ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <TimerApplicationInit+0x18>)
 8000538:	f004 f8d8 	bl	80046ec <HAL_TIM_Base_Start_IT>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000160 	.word	0x20000160
 8000544:	200001a8 	.word	0x200001a8

08000548 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a97      	ldr	r2, [pc, #604]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d11f      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(++Count5ms >= 5)
 8000558:	4b96      	ldr	r3, [pc, #600]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b94      	ldr	r3, [pc, #592]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	4b93      	ldr	r3, [pc, #588]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d905      	bls.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			Flag5msTM2 = 1;
 800056c:	4b92      	ldr	r3, [pc, #584]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
			Count5ms=0;
 8000572:	4b90      	ldr	r3, [pc, #576]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
		}
		if(++Count20ms >= 20){
 8000578:	4b90      	ldr	r3, [pc, #576]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b8e      	ldr	r3, [pc, #568]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	4b8d      	ldr	r3, [pc, #564]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b13      	cmp	r3, #19
 800058a:	d905      	bls.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x50>
			Flag200ms=1;
 800058c:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
			Count20ms=0;
 8000592:	4b8a      	ldr	r3, [pc, #552]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim == &htim3)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a8a      	ldr	r2, [pc, #552]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	f040 8175 	bne.w	800088c <HAL_TIM_PeriodElapsedCallback+0x344>
	{
		if(++Count1Sec >= 10)
 80005a2:	4b89      	ldr	r3, [pc, #548]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b87      	ldr	r3, [pc, #540]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	4b86      	ldr	r3, [pc, #536]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b09      	cmp	r3, #9
 80005b4:	f240 815a 	bls.w	800086c <HAL_TIM_PeriodElapsedCallback+0x324>
		{
			//HAL_GPIO_TogglePin(GPIOD,Relay_1_Pin);
			Count1Sec=0;
 80005b8:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
			Flag1Sec = 1;
 80005be:	4b83      	ldr	r3, [pc, #524]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]

			if(Start_Offset_Slider_Timer)
 80005c4:	4b82      	ldr	r3, [pc, #520]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d014      	beq.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0xae>
			{//Set_Offset_Slider_Time
				if(++Start_Offset_Slider_Counter >= sliderin)
 80005cc:	4b81      	ldr	r3, [pc, #516]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b7f      	ldr	r3, [pc, #508]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005d6:	801a      	strh	r2, [r3, #0]
 80005d8:	4b7e      	ldr	r3, [pc, #504]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	4b7e      	ldr	r3, [pc, #504]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d308      	bcc.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					Start_Offset_Slider_Counter=0;
 80005e4:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	801a      	strh	r2, [r3, #0]
					Start_Offset_Slider_Timer=0;
 80005ea:	4b79      	ldr	r3, [pc, #484]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Timer_Slider=1;
 80005f0:	4b7a      	ldr	r3, [pc, #488]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_RampClose_Timer)
 80005f6:	4b7a      	ldr	r3, [pc, #488]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d012      	beq.n	8000624 <HAL_TIM_PeriodElapsedCallback+0xdc>
			{
				if(++Start_Offset_RampClose_Counter >= Set_Offset_RampClose_Timer)
 80005fe:	4b79      	ldr	r3, [pc, #484]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b77      	ldr	r3, [pc, #476]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	4b76      	ldr	r3, [pc, #472]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2bc7      	cmp	r3, #199	; 0xc7
 8000610:	d908      	bls.n	8000624 <HAL_TIM_PeriodElapsedCallback+0xdc>
				{
					Start_Offset_RampClose_Timer=0;
 8000612:	4b73      	ldr	r3, [pc, #460]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
					Start_Offset_RampClose_Counter=0;
 8000618:	4b72      	ldr	r3, [pc, #456]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
					Complete_Offset_RampClose_Timer=1;
 800061e:	4b72      	ldr	r3, [pc, #456]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Tiltingup_Timer)
 8000624:	4b71      	ldr	r3, [pc, #452]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d015      	beq.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x110>
			{//Set_Offset_Tiltingup_Timer
				if(++Start_Offset_Tiltingup_Counter >= TIltingup)
 800062c:	4b70      	ldr	r3, [pc, #448]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b6e      	ldr	r3, [pc, #440]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	4b6d      	ldr	r3, [pc, #436]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b6d      	ldr	r3, [pc, #436]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d308      	bcc.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x110>
				{
					Start_Offset_Tiltingup_Timer=0;
 8000646:	4b69      	ldr	r3, [pc, #420]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
					Start_Offset_Tiltingup_Counter=0;
 800064c:	4b68      	ldr	r3, [pc, #416]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Tiltingup_Timer=1;
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Hold_Pouringwait_Timer)
 8000658:	4b68      	ldr	r3, [pc, #416]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d012      	beq.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x13e>
			{
				if(++Start_Hold_Poring_Counter >= Set_Hold_Pouringwait_Timer)
 8000660:	4b67      	ldr	r3, [pc, #412]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	4b64      	ldr	r3, [pc, #400]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2bc7      	cmp	r3, #199	; 0xc7
 8000672:	d908      	bls.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x13e>
				{
					Start_Hold_Pouringwait_Timer=0;
 8000674:	4b61      	ldr	r3, [pc, #388]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
					Start_Hold_Poring_Counter=0;
 800067a:	4b61      	ldr	r3, [pc, #388]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
					Complete_Hold_Pouringwait_Timer=1;
 8000680:	4b60      	ldr	r3, [pc, #384]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Tilting_Timer)
 8000686:	4b60      	ldr	r3, [pc, #384]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d015      	beq.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x172>
			{//Set_Offset_Tilting_Timer
				if(++Start_Offset_Tilting_Counter >= tinltingdown)
 800068e:	4b5f      	ldr	r3, [pc, #380]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b5d      	ldr	r3, [pc, #372]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	4b5c      	ldr	r3, [pc, #368]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d308      	bcc.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x172>
				{
					Start_Offset_Tilting_Timer=0;
 80006a8:	4b57      	ldr	r3, [pc, #348]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
					Start_Offset_Tilting_Counter=0;
 80006ae:	4b57      	ldr	r3, [pc, #348]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Tilting_Timer=1;
 80006b4:	4b57      	ldr	r3, [pc, #348]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Hold_Curing_Timer)
 80006ba:	4b57      	ldr	r3, [pc, #348]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d015      	beq.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x1a6>
			{//Set_Hold_Curing_Timer
				if(++Start_Hold_Curing_Counter >= CuringTime)
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b54      	ldr	r3, [pc, #336]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	4b53      	ldr	r3, [pc, #332]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b52      	ldr	r3, [pc, #328]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d308      	bcc.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x1a6>
				{
					Start_Hold_Curing_Timer=0;
 80006dc:	4b4e      	ldr	r3, [pc, #312]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
					Start_Hold_Curing_Counter=0;
 80006e2:	4b4e      	ldr	r3, [pc, #312]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
					Complete_Hold_Curing_Timer=1;
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Rampopen_Timer)
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d012      	beq.n	800071c <HAL_TIM_PeriodElapsedCallback+0x1d4>
			{
				if(++Start_Offset_Rampopen_Counter >= Set_Hold_Curing_Timer)
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b4b      	ldr	r3, [pc, #300]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	4b4a      	ldr	r3, [pc, #296]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2bc7      	cmp	r3, #199	; 0xc7
 8000708:	d908      	bls.n	800071c <HAL_TIM_PeriodElapsedCallback+0x1d4>
				{
					Start_Offset_Rampopen_Timer=0;
 800070a:	4b47      	ldr	r3, [pc, #284]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
					Start_Offset_Rampopen_Counter=0;
 8000710:	4b46      	ldr	r3, [pc, #280]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Rampopen_Timer=1;
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Sliderout_Timer)
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d015      	beq.n	8000750 <HAL_TIM_PeriodElapsedCallback+0x208>
			{//Set_Offset_Sliderout_Timer
				if(++Start_Offset_Sliderout_Counter >=SLiderout)
 8000724:	4b44      	ldr	r3, [pc, #272]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	d308      	bcc.n	8000750 <HAL_TIM_PeriodElapsedCallback+0x208>
				{
					Start_Offset_Sliderout_Timer=0;
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
					Start_Offset_Sliderout_Counter=0;
 8000744:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Sliderout_Timer=1;
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_EjectionIn_Timer)
 8000750:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d015      	beq.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x23c>
			{//Set_Offset_EjectionIn_Timer
				if(++Start_Offset_EjectionIn_Counter >= Ejectionon)
 8000758:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b39      	ldr	r3, [pc, #228]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d308      	bcc.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x23c>
				{
					Start_Offset_EjectionIn_Timer=0;
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
					Start_Offset_EjectionIn_Counter=0;
 8000778:	4b33      	ldr	r3, [pc, #204]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
					Complete_Offset_EjectionIn_Timer=1;
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
				}
			}
			if(Start_Offset_Ejectionout_Timer)// Set_Offset_Ejectionout_Timer
 8000784:	4b33      	ldr	r3, [pc, #204]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d06f      	beq.n	800086c <HAL_TIM_PeriodElapsedCallback+0x324>
			{
				if(++Start_Offset_Ejectionout_Counter >= Ejectionoff)
 800078c:	4b32      	ldr	r3, [pc, #200]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b2f      	ldr	r3, [pc, #188]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d362      	bcc.n	800086c <HAL_TIM_PeriodElapsedCallback+0x324>
				{
					Start_Offset_Ejectionout_Timer=0;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	e058      	b.n	8000860 <HAL_TIM_PeriodElapsedCallback+0x318>
 80007ae:	bf00      	nop
 80007b0:	20000160 	.word	0x20000160
 80007b4:	20000028 	.word	0x20000028
 80007b8:	20000039 	.word	0x20000039
 80007bc:	2000002a 	.word	0x2000002a
 80007c0:	20000038 	.word	0x20000038
 80007c4:	200001a8 	.word	0x200001a8
 80007c8:	20000029 	.word	0x20000029
 80007cc:	20000037 	.word	0x20000037
 80007d0:	2000007f 	.word	0x2000007f
 80007d4:	2000002c 	.word	0x2000002c
 80007d8:	20000076 	.word	0x20000076
 80007dc:	2000003b 	.word	0x2000003b
 80007e0:	20000080 	.word	0x20000080
 80007e4:	2000002e 	.word	0x2000002e
 80007e8:	2000003c 	.word	0x2000003c
 80007ec:	20000081 	.word	0x20000081
 80007f0:	2000002f 	.word	0x2000002f
 80007f4:	20000070 	.word	0x20000070
 80007f8:	2000003d 	.word	0x2000003d
 80007fc:	20000082 	.word	0x20000082
 8000800:	20000030 	.word	0x20000030
 8000804:	2000003e 	.word	0x2000003e
 8000808:	20000083 	.word	0x20000083
 800080c:	20000031 	.word	0x20000031
 8000810:	20000072 	.word	0x20000072
 8000814:	2000003f 	.word	0x2000003f
 8000818:	20000084 	.word	0x20000084
 800081c:	20000032 	.word	0x20000032
 8000820:	20000074 	.word	0x20000074
 8000824:	20000040 	.word	0x20000040
 8000828:	20000085 	.word	0x20000085
 800082c:	20000033 	.word	0x20000033
 8000830:	20000041 	.word	0x20000041
 8000834:	20000086 	.word	0x20000086
 8000838:	20000034 	.word	0x20000034
 800083c:	20000078 	.word	0x20000078
 8000840:	20000042 	.word	0x20000042
 8000844:	20000087 	.word	0x20000087
 8000848:	20000035 	.word	0x20000035
 800084c:	2000007a 	.word	0x2000007a
 8000850:	20000043 	.word	0x20000043
 8000854:	20000088 	.word	0x20000088
 8000858:	20000036 	.word	0x20000036
 800085c:	2000007c 	.word	0x2000007c
					Start_Offset_Ejectionout_Counter=0;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
					Complete_Offset_Ejectionout_Timer=1;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(++Count500ms >= 4)
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d905      	bls.n	800088c <HAL_TIM_PeriodElapsedCallback+0x344>
		{
			Count500ms=0;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
			Flag500ms = 1;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000036 	.word	0x20000036
 800089c:	20000044 	.word	0x20000044
 80008a0:	2000002b 	.word	0x2000002b
 80008a4:	2000003a 	.word	0x2000003a

080008a8 <InputOutputTest>:

void InputOutputTest(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
/*	HAL_GPIO_WritePin(GPIOD, MotorOn_Pin|MotorOff_Pin|RampOpen_Pin|RampCLose_Pin
	                          |TiltingUp_Pin|TiltingDown_Pin|SkiderOut_Pin|SliderIn_Pin, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, EjectionOn_Pin|EjectionOff_Pin|RoboRelay_Pin, GPIO_PIN_SET);*/

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <HAL_UART_RxCpltCallback>:

uint16_t CuringTime_k1,TIltingup_k1,tinltingdown_k1,sliderin_k1,SLiderout_k1,Ejectionon_k1,Ejectionoff_k1;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if((DWINRxData[1] == 0x03)&&(DWINRxData[2] == 0x14))
 80008bc:	4b63      	ldr	r3, [pc, #396]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	f040 80be 	bne.w	8000a42 <HAL_UART_RxCpltCallback+0x18e>
 80008c6:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 80008c8:	789b      	ldrb	r3, [r3, #2]
 80008ca:	2b14      	cmp	r3, #20
 80008cc:	f040 80b9 	bne.w	8000a42 <HAL_UART_RxCpltCallback+0x18e>
	{
		CuringTime 		= (DWINRxData[3]<<8 | DWINRxData[4]);
 80008d0:	4b5e      	ldr	r3, [pc, #376]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 80008d2:	78db      	ldrb	r3, [r3, #3]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <HAL_UART_RxCpltCallback+0x19c>)
 80008e6:	801a      	strh	r2, [r3, #0]
		TIltingup 		= (DWINRxData[5]<<8 | DWINRxData[6]);
 80008e8:	4b58      	ldr	r3, [pc, #352]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b56      	ldr	r3, [pc, #344]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 80008f2:	799b      	ldrb	r3, [r3, #6]
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b55      	ldr	r3, [pc, #340]	; (8000a54 <HAL_UART_RxCpltCallback+0x1a0>)
 80008fe:	801a      	strh	r2, [r3, #0]
		tinltingdown 	= (DWINRxData[7]<<8 | DWINRxData[8]);
 8000900:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 8000902:	79db      	ldrb	r3, [r3, #7]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 800090a:	7a1b      	ldrb	r3, [r3, #8]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <HAL_UART_RxCpltCallback+0x1a4>)
 8000916:	801a      	strh	r2, [r3, #0]
		sliderin 		= (DWINRxData[9]<<8 | DWINRxData[10]);
 8000918:	4b4c      	ldr	r3, [pc, #304]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 800091a:	7a5b      	ldrb	r3, [r3, #9]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b21a      	sxth	r2, r3
 8000920:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 8000922:	7a9b      	ldrb	r3, [r3, #10]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <HAL_UART_RxCpltCallback+0x1a8>)
 800092e:	801a      	strh	r2, [r3, #0]
		SLiderout 		= (DWINRxData[11]<<8 | DWINRxData[12]);
 8000930:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 8000932:	7adb      	ldrb	r3, [r3, #11]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b44      	ldr	r3, [pc, #272]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 800093a:	7b1b      	ldrb	r3, [r3, #12]
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b21b      	sxth	r3, r3
 8000942:	b29a      	uxth	r2, r3
 8000944:	4b46      	ldr	r3, [pc, #280]	; (8000a60 <HAL_UART_RxCpltCallback+0x1ac>)
 8000946:	801a      	strh	r2, [r3, #0]
		Ejectionon 		= (DWINRxData[13]<<8 | DWINRxData[14]);
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 800094a:	7b5b      	ldrb	r3, [r3, #13]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	b21a      	sxth	r2, r3
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 8000952:	7b9b      	ldrb	r3, [r3, #14]
 8000954:	b21b      	sxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b21b      	sxth	r3, r3
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <HAL_UART_RxCpltCallback+0x1b0>)
 800095e:	801a      	strh	r2, [r3, #0]
		Ejectionoff 	= (DWINRxData[15]<<8 | DWINRxData[16]);
 8000960:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 8000962:	7bdb      	ldrb	r3, [r3, #15]
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	b21a      	sxth	r2, r3
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x198>)
 800096a:	7c1b      	ldrb	r3, [r3, #16]
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b3c      	ldr	r3, [pc, #240]	; (8000a68 <HAL_UART_RxCpltCallback+0x1b4>)
 8000976:	801a      	strh	r2, [r3, #0]

		if(((CuringTime != CuringTime_k1)&&(CuringTime > 0))||((TIltingup != TIltingup_k1)&&(TIltingup>0))
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <HAL_UART_RxCpltCallback+0x19c>)
 800097a:	881a      	ldrh	r2, [r3, #0]
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <HAL_UART_RxCpltCallback+0x1b8>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d003      	beq.n	800098c <HAL_UART_RxCpltCallback+0xd8>
 8000984:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <HAL_UART_RxCpltCallback+0x19c>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d13b      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x150>
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <HAL_UART_RxCpltCallback+0x1a0>)
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <HAL_UART_RxCpltCallback+0x1bc>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	429a      	cmp	r2, r3
 8000996:	d003      	beq.n	80009a0 <HAL_UART_RxCpltCallback+0xec>
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <HAL_UART_RxCpltCallback+0x1a0>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d131      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x150>
		||((tinltingdown != tinltingdown_k1)&&(tinltingdown>0))||((sliderin != sliderin_k1)&&(sliderin>0))
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_UART_RxCpltCallback+0x1a4>)
 80009a2:	881a      	ldrh	r2, [r3, #0]
 80009a4:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <HAL_UART_RxCpltCallback+0x1c0>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d003      	beq.n	80009b4 <HAL_UART_RxCpltCallback+0x100>
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <HAL_UART_RxCpltCallback+0x1a4>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d127      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x150>
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <HAL_UART_RxCpltCallback+0x1a8>)
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_UART_RxCpltCallback+0x1c4>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d003      	beq.n	80009c8 <HAL_UART_RxCpltCallback+0x114>
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <HAL_UART_RxCpltCallback+0x1a8>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d11d      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x150>
		||((SLiderout != SLiderout_k1)&&(SLiderout>0))||((Ejectionon != Ejectionon_k1)&&(Ejectionon>0))
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <HAL_UART_RxCpltCallback+0x1ac>)
 80009ca:	881a      	ldrh	r2, [r3, #0]
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <HAL_UART_RxCpltCallback+0x1c8>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d003      	beq.n	80009dc <HAL_UART_RxCpltCallback+0x128>
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <HAL_UART_RxCpltCallback+0x1ac>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d113      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x150>
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <HAL_UART_RxCpltCallback+0x1b0>)
 80009de:	881a      	ldrh	r2, [r3, #0]
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_UART_RxCpltCallback+0x1cc>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d003      	beq.n	80009f0 <HAL_UART_RxCpltCallback+0x13c>
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <HAL_UART_RxCpltCallback+0x1b0>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x150>
		||((Ejectionoff != Ejectionoff_k1)&&(Ejectionoff>0)))
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_UART_RxCpltCallback+0x1b4>)
 80009f2:	881a      	ldrh	r2, [r3, #0]
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_UART_RxCpltCallback+0x1d0>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d006      	beq.n	8000a0a <HAL_UART_RxCpltCallback+0x156>
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_UART_RxCpltCallback+0x1b4>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <HAL_UART_RxCpltCallback+0x156>
		{
			Trigger_Hmi_Data_Save =1;
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
		}

		CuringTime_k1 = CuringTime;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_RxCpltCallback+0x19c>)
 8000a0c:	881a      	ldrh	r2, [r3, #0]
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_UART_RxCpltCallback+0x1b8>)
 8000a10:	801a      	strh	r2, [r3, #0]
		TIltingup_k1 = TIltingup;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_UART_RxCpltCallback+0x1a0>)
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a18:	801a      	strh	r2, [r3, #0]
		tinltingdown_k1 = tinltingdown;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_UART_RxCpltCallback+0x1a4>)
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_RxCpltCallback+0x1c0>)
 8000a20:	801a      	strh	r2, [r3, #0]
		sliderin_k1 = sliderin;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_RxCpltCallback+0x1a8>)
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_RxCpltCallback+0x1c4>)
 8000a28:	801a      	strh	r2, [r3, #0]
		SLiderout_k1 = SLiderout;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_UART_RxCpltCallback+0x1ac>)
 8000a2c:	881a      	ldrh	r2, [r3, #0]
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_UART_RxCpltCallback+0x1c8>)
 8000a30:	801a      	strh	r2, [r3, #0]
		Ejectionon_k1 = Ejectionon;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_RxCpltCallback+0x1cc>)
 8000a38:	801a      	strh	r2, [r3, #0]
		Ejectionoff_k1 = Ejectionoff;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x1b4>)
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_RxCpltCallback+0x1d0>)
 8000a40:	801a      	strh	r2, [r3, #0]
	}

}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	20000074 	.word	0x20000074
 8000a54:	20000070 	.word	0x20000070
 8000a58:	20000072 	.word	0x20000072
 8000a5c:	20000076 	.word	0x20000076
 8000a60:	20000078 	.word	0x20000078
 8000a64:	2000007a 	.word	0x2000007a
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000048 	.word	0x20000048
 8000a70:	2000004a 	.word	0x2000004a
 8000a74:	2000004c 	.word	0x2000004c
 8000a78:	2000004e 	.word	0x2000004e
 8000a7c:	20000050 	.word	0x20000050
 8000a80:	20000052 	.word	0x20000052
 8000a84:	20000054 	.word	0x20000054
 8000a88:	20000046 	.word	0x20000046

08000a8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,DWINRxData,RxNoOfData);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_UART_TxCpltCallback+0x20>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <HAL_UART_TxCpltCallback+0x24>)
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_UART_TxCpltCallback+0x28>)
 8000a9e:	f004 fa72 	bl	8004f86 <HAL_UART_Receive_IT>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000f0 	.word	0x200000f0
 8000ab0:	200000b0 	.word	0x200000b0
 8000ab4:	200001f0 	.word	0x200001f0

08000ab8 <gdc_businesslogic>:

void Auto_business_logic(const Hw_Inputs);
void Manual_business_logic(const Hw_Inputs);

void gdc_businesslogic(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af02      	add	r7, sp, #8
	/*Read the inputs*/
	input.Auto_Manual 			=	HAL_GPIO_ReadPin(GPIOB,Auto_Manual_Switch_Pin);
 8000abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac2:	4895      	ldr	r0, [pc, #596]	; (8000d18 <gdc_businesslogic+0x260>)
 8000ac4:	f002 fac6 	bl	8003054 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b93      	ldr	r3, [pc, #588]	; (8000d1c <gdc_businesslogic+0x264>)
 8000ace:	701a      	strb	r2, [r3, #0]
	if(input.Auto_Manual == GPIO_PIN_SET){
 8000ad0:	4b92      	ldr	r3, [pc, #584]	; (8000d1c <gdc_businesslogic+0x264>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d107      	bne.n	8000ae8 <gdc_businesslogic+0x30>
		Inputs_Status = Inputs_Status & ~(1 << 0);
 8000ad8:	4b91      	ldr	r3, [pc, #580]	; (8000d20 <gdc_businesslogic+0x268>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	f023 0301 	bic.w	r3, r3, #1
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b8f      	ldr	r3, [pc, #572]	; (8000d20 <gdc_businesslogic+0x268>)
 8000ae4:	801a      	strh	r2, [r3, #0]
 8000ae6:	e006      	b.n	8000af6 <gdc_businesslogic+0x3e>
	}else{
		Inputs_Status = Inputs_Status |(1 <<0);
 8000ae8:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <gdc_businesslogic+0x268>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b8b      	ldr	r3, [pc, #556]	; (8000d20 <gdc_businesslogic+0x268>)
 8000af4:	801a      	strh	r2, [r3, #0]
	}

	input.cycleStart 			=	HAL_GPIO_ReadPin(GPIOE,CycleStart_Switch_Pin);
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	488a      	ldr	r0, [pc, #552]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000afa:	f002 faab 	bl	8003054 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <gdc_businesslogic+0x264>)
 8000b04:	705a      	strb	r2, [r3, #1]
	if(input.cycleStart == GPIO_PIN_SET){
 8000b06:	4b85      	ldr	r3, [pc, #532]	; (8000d1c <gdc_businesslogic+0x264>)
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d107      	bne.n	8000b1e <gdc_businesslogic+0x66>
		Inputs_Status = Inputs_Status & ~(1 << 1);
 8000b0e:	4b84      	ldr	r3, [pc, #528]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	f023 0302 	bic.w	r3, r3, #2
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b81      	ldr	r3, [pc, #516]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b1a:	801a      	strh	r2, [r3, #0]
 8000b1c:	e006      	b.n	8000b2c <gdc_businesslogic+0x74>
	}else{
		Inputs_Status = Inputs_Status |(1 <<1);
 8000b1e:	4b80      	ldr	r3, [pc, #512]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b7d      	ldr	r3, [pc, #500]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	}
	input.Emergency 			=	HAL_GPIO_ReadPin(GPIOB,Emergency_Switch_Pin);
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	4879      	ldr	r0, [pc, #484]	; (8000d18 <gdc_businesslogic+0x260>)
 8000b32:	f002 fa8f 	bl	8003054 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b78      	ldr	r3, [pc, #480]	; (8000d1c <gdc_businesslogic+0x264>)
 8000b3c:	709a      	strb	r2, [r3, #2]
	if(input.Emergency == GPIO_PIN_SET){
 8000b3e:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <gdc_businesslogic+0x264>)
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d107      	bne.n	8000b56 <gdc_businesslogic+0x9e>
		Inputs_Status = Inputs_Status & ~(1 << 2);
 8000b46:	4b76      	ldr	r3, [pc, #472]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f023 0304 	bic.w	r3, r3, #4
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b73      	ldr	r3, [pc, #460]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b52:	801a      	strh	r2, [r3, #0]
 8000b54:	e006      	b.n	8000b64 <gdc_businesslogic+0xac>
	}else{
		Inputs_Status = Inputs_Status |(1 <<2);
 8000b56:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b6f      	ldr	r3, [pc, #444]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b62:	801a      	strh	r2, [r3, #0]
	}

	input.Ram_close_switch 		=	HAL_GPIO_ReadPin(GPIOE,RampClose_Switch_Pin);
 8000b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b68:	486e      	ldr	r0, [pc, #440]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000b6a:	f002 fa73 	bl	8003054 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <gdc_businesslogic+0x264>)
 8000b74:	70da      	strb	r2, [r3, #3]
	if(input.Ram_close_switch == GPIO_PIN_SET){
 8000b76:	4b69      	ldr	r3, [pc, #420]	; (8000d1c <gdc_businesslogic+0x264>)
 8000b78:	78db      	ldrb	r3, [r3, #3]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d107      	bne.n	8000b8e <gdc_businesslogic+0xd6>
		Inputs_Status = Inputs_Status & ~(1 << 3);
 8000b7e:	4b68      	ldr	r3, [pc, #416]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	f023 0308 	bic.w	r3, r3, #8
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b65      	ldr	r3, [pc, #404]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b8a:	801a      	strh	r2, [r3, #0]
 8000b8c:	e006      	b.n	8000b9c <gdc_businesslogic+0xe4>
	}else{
		Inputs_Status = Inputs_Status |(1 <<3);
 8000b8e:	4b64      	ldr	r3, [pc, #400]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <gdc_businesslogic+0x268>)
 8000b9a:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Open_Switch 		=	HAL_GPIO_ReadPin(GPIOE,RampOpen_Switch_Pin);
 8000b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba0:	4860      	ldr	r0, [pc, #384]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000ba2:	f002 fa57 	bl	8003054 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b5c      	ldr	r3, [pc, #368]	; (8000d1c <gdc_businesslogic+0x264>)
 8000bac:	711a      	strb	r2, [r3, #4]
	if(input.Ram_Open_Switch == GPIO_PIN_SET){
 8000bae:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <gdc_businesslogic+0x264>)
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d107      	bne.n	8000bc6 <gdc_businesslogic+0x10e>
		Inputs_Status = Inputs_Status & ~(1 << 4);
 8000bb6:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <gdc_businesslogic+0x268>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	f023 0310 	bic.w	r3, r3, #16
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <gdc_businesslogic+0x268>)
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	e006      	b.n	8000bd4 <gdc_businesslogic+0x11c>
	}else{
		Inputs_Status = Inputs_Status |(1 <<4);
 8000bc6:	4b56      	ldr	r3, [pc, #344]	; (8000d20 <gdc_businesslogic+0x268>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <gdc_businesslogic+0x268>)
 8000bd2:	801a      	strh	r2, [r3, #0]
	}
	input.Tilting_Up_Switch 	=	HAL_GPIO_ReadPin(GPIOE,TiltingUp_Switch_Pin);
 8000bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd8:	4852      	ldr	r0, [pc, #328]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000bda:	f002 fa3b 	bl	8003054 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <gdc_businesslogic+0x264>)
 8000be4:	715a      	strb	r2, [r3, #5]
	if(input.Tilting_Up_Switch == GPIO_PIN_SET){
 8000be6:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <gdc_businesslogic+0x264>)
 8000be8:	795b      	ldrb	r3, [r3, #5]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d107      	bne.n	8000bfe <gdc_businesslogic+0x146>
		Inputs_Status = Inputs_Status & ~(1 << 5);
 8000bee:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <gdc_businesslogic+0x268>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	f023 0320 	bic.w	r3, r3, #32
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <gdc_businesslogic+0x268>)
 8000bfa:	801a      	strh	r2, [r3, #0]
 8000bfc:	e006      	b.n	8000c0c <gdc_businesslogic+0x154>
	}else{
		Inputs_Status = Inputs_Status |(1 <<5);
 8000bfe:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	}
	input.Tilting_down_switch 	=	HAL_GPIO_ReadPin(GPIOE,TiltingDown_Switch_Pin);
 8000c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c10:	4844      	ldr	r0, [pc, #272]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000c12:	f002 fa1f 	bl	8003054 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <gdc_businesslogic+0x264>)
 8000c1c:	719a      	strb	r2, [r3, #6]
	if(input.Tilting_down_switch == GPIO_PIN_SET){
 8000c1e:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <gdc_businesslogic+0x264>)
 8000c20:	799b      	ldrb	r3, [r3, #6]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d107      	bne.n	8000c36 <gdc_businesslogic+0x17e>
		Inputs_Status = Inputs_Status & ~(1 << 6);
 8000c26:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c32:	801a      	strh	r2, [r3, #0]
 8000c34:	e006      	b.n	8000c44 <gdc_businesslogic+0x18c>
	}else{
		Inputs_Status = Inputs_Status |(1 <<6);
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c42:	801a      	strh	r2, [r3, #0]
	}
	input.Ejection_In 			=	HAL_GPIO_ReadPin(GPIOE,EjectionIn_Switch_Pin);
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	4836      	ldr	r0, [pc, #216]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000c4a:	f002 fa03 	bl	8003054 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <gdc_businesslogic+0x264>)
 8000c54:	71da      	strb	r2, [r3, #7]
	if(input.Ejection_In == GPIO_PIN_SET){
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <gdc_businesslogic+0x264>)
 8000c58:	79db      	ldrb	r3, [r3, #7]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d107      	bne.n	8000c6e <gdc_businesslogic+0x1b6>
		Inputs_Status = Inputs_Status & ~(1 << 7);
 8000c5e:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c6a:	801a      	strh	r2, [r3, #0]
 8000c6c:	e006      	b.n	8000c7c <gdc_businesslogic+0x1c4>
	}else{
		Inputs_Status = Inputs_Status |(1 <<7);
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c7a:	801a      	strh	r2, [r3, #0]
	}
	input.Ejection_Output 		=	HAL_GPIO_ReadPin(GPIOE,EjectionOut_Switch_Pin);
 8000c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c80:	4828      	ldr	r0, [pc, #160]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000c82:	f002 f9e7 	bl	8003054 <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <gdc_businesslogic+0x264>)
 8000c8c:	721a      	strb	r2, [r3, #8]
	if(input.Ejection_Output == GPIO_PIN_SET){
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <gdc_businesslogic+0x264>)
 8000c90:	7a1b      	ldrb	r3, [r3, #8]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d107      	bne.n	8000ca6 <gdc_businesslogic+0x1ee>
		Inputs_Status = Inputs_Status & ~(1 << 8);
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <gdc_businesslogic+0x268>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <gdc_businesslogic+0x268>)
 8000ca2:	801a      	strh	r2, [r3, #0]
 8000ca4:	e006      	b.n	8000cb4 <gdc_businesslogic+0x1fc>
	}else{
		Inputs_Status = Inputs_Status |(1 <<8);
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <gdc_businesslogic+0x268>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <gdc_businesslogic+0x268>)
 8000cb2:	801a      	strh	r2, [r3, #0]
	}
	input.Slider_In_Switch 		=	HAL_GPIO_ReadPin(GPIOE,SliderIn_Switch_Pin);
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	481a      	ldr	r0, [pc, #104]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000cba:	f002 f9cb 	bl	8003054 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <gdc_businesslogic+0x264>)
 8000cc4:	725a      	strb	r2, [r3, #9]
	if(input.Slider_In_Switch == GPIO_PIN_SET){
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <gdc_businesslogic+0x264>)
 8000cc8:	7a5b      	ldrb	r3, [r3, #9]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d107      	bne.n	8000cde <gdc_businesslogic+0x226>
		Inputs_Status = Inputs_Status & ~(1 << 9);
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <gdc_businesslogic+0x268>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <gdc_businesslogic+0x268>)
 8000cda:	801a      	strh	r2, [r3, #0]
 8000cdc:	e006      	b.n	8000cec <gdc_businesslogic+0x234>
	}else{
		Inputs_Status = Inputs_Status |(1 <<9);
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <gdc_businesslogic+0x268>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <gdc_businesslogic+0x268>)
 8000cea:	801a      	strh	r2, [r3, #0]
	}
	input.Slider_Out_Switch 	=	HAL_GPIO_ReadPin(GPIOE,SliderOut_Switch_Pin);
 8000cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <gdc_businesslogic+0x26c>)
 8000cf2:	f002 f9af 	bl	8003054 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <gdc_businesslogic+0x264>)
 8000cfc:	729a      	strb	r2, [r3, #10]
	if(input.Slider_Out_Switch == GPIO_PIN_SET){
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <gdc_businesslogic+0x264>)
 8000d00:	7a9b      	ldrb	r3, [r3, #10]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d110      	bne.n	8000d28 <gdc_businesslogic+0x270>
		Inputs_Status = Inputs_Status & ~(1 << 10);
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <gdc_businesslogic+0x268>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <gdc_businesslogic+0x268>)
 8000d12:	801a      	strh	r2, [r3, #0]
 8000d14:	e00f      	b.n	8000d36 <gdc_businesslogic+0x27e>
 8000d16:	bf00      	nop
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	20000058 	.word	0x20000058
 8000d20:	2000006c 	.word	0x2000006c
 8000d24:	40011800 	.word	0x40011800

	}else{
		Inputs_Status = Inputs_Status |(1 <<10);
 8000d28:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b7f      	ldr	r3, [pc, #508]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d34:	801a      	strh	r2, [r3, #0]
	}
	input.MotorOn_Switch 			=	HAL_GPIO_ReadPin(GPIOB,MotorON_Switch_Pin);
 8000d36:	2102      	movs	r1, #2
 8000d38:	487e      	ldr	r0, [pc, #504]	; (8000f34 <gdc_businesslogic+0x47c>)
 8000d3a:	f002 f98b 	bl	8003054 <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b7d      	ldr	r3, [pc, #500]	; (8000f38 <gdc_businesslogic+0x480>)
 8000d44:	72da      	strb	r2, [r3, #11]
	if(input.MotorOn_Switch == GPIO_PIN_SET){
 8000d46:	4b7c      	ldr	r3, [pc, #496]	; (8000f38 <gdc_businesslogic+0x480>)
 8000d48:	7adb      	ldrb	r3, [r3, #11]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d107      	bne.n	8000d5e <gdc_businesslogic+0x2a6>
		Inputs_Status = Inputs_Status & ~(1 << 11);
 8000d4e:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b75      	ldr	r3, [pc, #468]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	e006      	b.n	8000d6c <gdc_businesslogic+0x2b4>

	}else{
		Inputs_Status = Inputs_Status |(1 <<11);
 8000d5e:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b71      	ldr	r3, [pc, #452]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d6a:	801a      	strh	r2, [r3, #0]
	}
	input.MotorOff_Switch 			=	HAL_GPIO_ReadPin(GPIOB,MotorOff_Switch_Pin);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4871      	ldr	r0, [pc, #452]	; (8000f34 <gdc_businesslogic+0x47c>)
 8000d70:	f002 f970 	bl	8003054 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <gdc_businesslogic+0x480>)
 8000d7a:	731a      	strb	r2, [r3, #12]
	if(input.MotorOff_Switch == GPIO_PIN_SET){
 8000d7c:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <gdc_businesslogic+0x480>)
 8000d7e:	7b1b      	ldrb	r3, [r3, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d107      	bne.n	8000d94 <gdc_businesslogic+0x2dc>
		Inputs_Status = Inputs_Status & ~(1 << 12);
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	e006      	b.n	8000da2 <gdc_businesslogic+0x2ea>

	}else{
		Inputs_Status = Inputs_Status |(1 <<12);
 8000d94:	4b66      	ldr	r3, [pc, #408]	; (8000f30 <gdc_businesslogic+0x478>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b64      	ldr	r3, [pc, #400]	; (8000f30 <gdc_businesslogic+0x478>)
 8000da0:	801a      	strh	r2, [r3, #0]
	}
	input.Station_Conformation 			=	HAL_GPIO_ReadPin(GPIOA,StationInfo_Sensor_Pin);
 8000da2:	2102      	movs	r1, #2
 8000da4:	4865      	ldr	r0, [pc, #404]	; (8000f3c <gdc_businesslogic+0x484>)
 8000da6:	f002 f955 	bl	8003054 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <gdc_businesslogic+0x480>)
 8000db0:	735a      	strb	r2, [r3, #13]
	if(input.Station_Conformation == GPIO_PIN_SET){
 8000db2:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <gdc_businesslogic+0x480>)
 8000db4:	7b5b      	ldrb	r3, [r3, #13]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <gdc_businesslogic+0x312>
		Inputs_Status = Inputs_Status & ~(1 << 13);
 8000dba:	4b5d      	ldr	r3, [pc, #372]	; (8000f30 <gdc_businesslogic+0x478>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <gdc_businesslogic+0x478>)
 8000dc6:	801a      	strh	r2, [r3, #0]
 8000dc8:	e006      	b.n	8000dd8 <gdc_businesslogic+0x320>

	}else{
		Inputs_Status = Inputs_Status |(1 <<13);
 8000dca:	4b59      	ldr	r3, [pc, #356]	; (8000f30 <gdc_businesslogic+0x478>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <gdc_businesslogic+0x478>)
 8000dd6:	801a      	strh	r2, [r3, #0]
	}
	input.Robo_Acknowledgment 			=	HAL_GPIO_ReadPin(GPIOA,Robo_Ack_Input_Pin);
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4858      	ldr	r0, [pc, #352]	; (8000f3c <gdc_businesslogic+0x484>)
 8000ddc:	f002 f93a 	bl	8003054 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <gdc_businesslogic+0x480>)
 8000de6:	739a      	strb	r2, [r3, #14]
	if(input.Robo_Acknowledgment == GPIO_PIN_SET){
 8000de8:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <gdc_businesslogic+0x480>)
 8000dea:	7b9b      	ldrb	r3, [r3, #14]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d107      	bne.n	8000e00 <gdc_businesslogic+0x348>
		Inputs_Status = Inputs_Status & ~(1 << 14);
 8000df0:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <gdc_businesslogic+0x478>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <gdc_businesslogic+0x478>)
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	e006      	b.n	8000e0e <gdc_businesslogic+0x356>

	}else{
		Inputs_Status = Inputs_Status |(1 <<14);
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <gdc_businesslogic+0x478>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <gdc_businesslogic+0x478>)
 8000e0c:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Open_Sensor 			=	HAL_GPIO_ReadPin(GPIOC,Rampopen_sensor_Pin);
 8000e0e:	2120      	movs	r1, #32
 8000e10:	484b      	ldr	r0, [pc, #300]	; (8000f40 <gdc_businesslogic+0x488>)
 8000e12:	f002 f91f 	bl	8003054 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <gdc_businesslogic+0x480>)
 8000e1c:	73da      	strb	r2, [r3, #15]
	if(input.Ram_Open_Sensor == GPIO_PIN_SET){
 8000e1e:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <gdc_businesslogic+0x480>)
 8000e20:	7bdb      	ldrb	r3, [r3, #15]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d107      	bne.n	8000e36 <gdc_businesslogic+0x37e>
		Inputs_Status = Inputs_Status & ~(1 << 15);
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <gdc_businesslogic+0x478>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <gdc_businesslogic+0x478>)
 8000e32:	801a      	strh	r2, [r3, #0]
 8000e34:	e008      	b.n	8000e48 <gdc_businesslogic+0x390>

	}else{
		Inputs_Status = Inputs_Status |(1 <<15);
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <gdc_businesslogic+0x478>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <gdc_businesslogic+0x478>)
 8000e46:	801a      	strh	r2, [r3, #0]
	}
	input.Ram_Close_Sensor 			=	HAL_GPIO_ReadPin(GPIOC,Rampclose_sensor_Pin);
 8000e48:	2110      	movs	r1, #16
 8000e4a:	483d      	ldr	r0, [pc, #244]	; (8000f40 <gdc_businesslogic+0x488>)
 8000e4c:	f002 f902 	bl	8003054 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <gdc_businesslogic+0x480>)
 8000e56:	741a      	strb	r2, [r3, #16]
	if(input.Ram_Close_Sensor == GPIO_PIN_SET){
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <gdc_businesslogic+0x480>)
 8000e5a:	7c1b      	ldrb	r3, [r3, #16]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d107      	bne.n	8000e70 <gdc_businesslogic+0x3b8>
		Inputs_Status_2 = Inputs_Status_2 & ~(1 << 0);
 8000e60:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000e6c:	801a      	strh	r2, [r3, #0]
 8000e6e:	e006      	b.n	8000e7e <gdc_businesslogic+0x3c6>

	}else{
		Inputs_Status_2 = Inputs_Status_2 |(1 <<0);
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
	}
	input.TiltingUp_Sensor			=	HAL_GPIO_ReadPin(GPIOA,TiltingUp_Sensor_Pin);
 8000e7e:	2108      	movs	r1, #8
 8000e80:	482e      	ldr	r0, [pc, #184]	; (8000f3c <gdc_businesslogic+0x484>)
 8000e82:	f002 f8e7 	bl	8003054 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <gdc_businesslogic+0x480>)
 8000e8c:	745a      	strb	r2, [r3, #17]
	if(input.TiltingUp_Sensor == GPIO_PIN_SET){
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <gdc_businesslogic+0x480>)
 8000e90:	7c5b      	ldrb	r3, [r3, #17]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d107      	bne.n	8000ea6 <gdc_businesslogic+0x3ee>
		Inputs_Status_2 = Inputs_Status_2 & ~(1 << 1);
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	f023 0302 	bic.w	r3, r3, #2
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000ea2:	801a      	strh	r2, [r3, #0]
 8000ea4:	e006      	b.n	8000eb4 <gdc_businesslogic+0x3fc>

	}else{
		Inputs_Status_2 = Inputs_Status_2 |(1 <<1);
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000eb2:	801a      	strh	r2, [r3, #0]
	}
	input.TiltingDown_Sensor 		=	HAL_GPIO_ReadPin(GPIOA,Tiltingdown_sensor_Pin);
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4821      	ldr	r0, [pc, #132]	; (8000f3c <gdc_businesslogic+0x484>)
 8000eb8:	f002 f8cc 	bl	8003054 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <gdc_businesslogic+0x480>)
 8000ec2:	749a      	strb	r2, [r3, #18]
	if(input.TiltingDown_Sensor == GPIO_PIN_SET){
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <gdc_businesslogic+0x480>)
 8000ec6:	7c9b      	ldrb	r3, [r3, #18]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <gdc_businesslogic+0x424>
		Inputs_Status_2 = Inputs_Status_2 & ~(1 << 2);
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000ed8:	801a      	strh	r2, [r3, #0]
 8000eda:	e006      	b.n	8000eea <gdc_businesslogic+0x432>

		}else{
			Inputs_Status_2 = Inputs_Status_2 |(1 <<2);
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <gdc_businesslogic+0x48c>)
 8000ee8:	801a      	strh	r2, [r3, #0]
		}
	if(input.Auto_Manual == GPIO_PIN_SET){//execute auto code
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <gdc_businesslogic+0x480>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d10d      	bne.n	8000f0e <gdc_businesslogic+0x456>
		Auto_business_logic(input);
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <gdc_businesslogic+0x480>)
 8000ef4:	466b      	mov	r3, sp
 8000ef6:	f102 0110 	add.w	r1, r2, #16
 8000efa:	6809      	ldr	r1, [r1, #0]
 8000efc:	4608      	mov	r0, r1
 8000efe:	8018      	strh	r0, [r3, #0]
 8000f00:	3302      	adds	r3, #2
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	7019      	strb	r1, [r3, #0]
 8000f06:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8000f08:	f000 f81e 	bl	8000f48 <Auto_business_logic>
	}
	else{//execute manual code
		Manual_business_logic(input);
	}
}
 8000f0c:	e00c      	b.n	8000f28 <gdc_businesslogic+0x470>
		Manual_business_logic(input);
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <gdc_businesslogic+0x480>)
 8000f10:	466b      	mov	r3, sp
 8000f12:	f102 0110 	add.w	r1, r2, #16
 8000f16:	6809      	ldr	r1, [r1, #0]
 8000f18:	4608      	mov	r0, r1
 8000f1a:	8018      	strh	r0, [r3, #0]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	0c09      	lsrs	r1, r1, #16
 8000f20:	7019      	strb	r1, [r3, #0]
 8000f22:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8000f24:	f000 f9a8 	bl	8001278 <Manual_business_logic>
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000006c 	.word	0x2000006c
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	20000058 	.word	0x20000058
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40011000 	.word	0x40011000
 8000f44:	2000006e 	.word	0x2000006e

08000f48 <Auto_business_logic>:


void Auto_business_logic(const Hw_Inputs input_status)
{
 8000f48:	b084      	sub	sp, #16
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	f107 0c08 	add.w	ip, r7, #8
 8000f52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(current_state_auto)
 8000f56:	4bb0      	ldr	r3, [pc, #704]	; (8001218 <Auto_business_logic+0x2d0>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b15      	cmp	r3, #21
 8000f5c:	f200 813b 	bhi.w	80011d6 <Auto_business_logic+0x28e>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <Auto_business_logic+0x20>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000fc1 	.word	0x08000fc1
 8000f6c:	08000fd7 	.word	0x08000fd7
 8000f70:	08000ff1 	.word	0x08000ff1
 8000f74:	08001009 	.word	0x08001009
 8000f78:	08001033 	.word	0x08001033
 8000f7c:	0800104b 	.word	0x0800104b
 8000f80:	08001065 	.word	0x08001065
 8000f84:	0800107d 	.word	0x0800107d
 8000f88:	0800108b 	.word	0x0800108b
 8000f8c:	080010a3 	.word	0x080010a3
 8000f90:	080010c9 	.word	0x080010c9
 8000f94:	080010e1 	.word	0x080010e1
 8000f98:	080010ef 	.word	0x080010ef
 8000f9c:	08001107 	.word	0x08001107
 8000fa0:	08001121 	.word	0x08001121
 8000fa4:	08001137 	.word	0x08001137
 8000fa8:	08001151 	.word	0x08001151
 8000fac:	08001167 	.word	0x08001167
 8000fb0:	0800117f 	.word	0x0800117f
 8000fb4:	08001195 	.word	0x08001195
 8000fb8:	080011ad 	.word	0x080011ad
 8000fbc:	080011c3 	.word	0x080011c3
	{
		case 0://wait for cycle start
			current_state_auto=0;
 8000fc0:	4b95      	ldr	r3, [pc, #596]	; (8001218 <Auto_business_logic+0x2d0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
			if(input_status.cycleStart == GPIO_PIN_RESET){
 8000fc6:	7a7b      	ldrb	r3, [r7, #9]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f040 8108 	bne.w	80011de <Auto_business_logic+0x296>
				current_state_auto=1;
 8000fce:	4b92      	ldr	r3, [pc, #584]	; (8001218 <Auto_business_logic+0x2d0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000fd4:	e103      	b.n	80011de <Auto_business_logic+0x296>
		case 1:
			if(SLIDERVALVE){
				HAL_GPIO_WritePin(GPIOD,RampOpen_valve_Pin,GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	488f      	ldr	r0, [pc, #572]	; (800121c <Auto_business_logic+0x2d4>)
 8000fde:	f002 f850 	bl	8003082 <HAL_GPIO_WritePin>
				Start_Offset_Slider_Timer = 1;
 8000fe2:	4b8f      	ldr	r3, [pc, #572]	; (8001220 <Auto_business_logic+0x2d8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
				current_state_auto=2;
 8000fe8:	4b8b      	ldr	r3, [pc, #556]	; (8001218 <Auto_business_logic+0x2d0>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				current_state_auto=3;
			}
		break;
 8000fee:	e10d      	b.n	800120c <Auto_business_logic+0x2c4>
		case 2://Offset timer for slider valve
			if(Complete_Offset_Timer_Slider==1)
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	; (8001224 <Auto_business_logic+0x2dc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	f040 80f4 	bne.w	80011e2 <Auto_business_logic+0x29a>
			{
				Complete_Offset_Timer_Slider=0;
 8000ffa:	4b8a      	ldr	r3, [pc, #552]	; (8001224 <Auto_business_logic+0x2dc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
				current_state_auto=3;
 8001000:	4b85      	ldr	r3, [pc, #532]	; (8001218 <Auto_business_logic+0x2d0>)
 8001002:	2203      	movs	r2, #3
 8001004:	701a      	strb	r2, [r3, #0]
			}
			if(SLIDERVALVE==0){
				current_state_auto=3;
			}
		break;
 8001006:	e0ec      	b.n	80011e2 <Auto_business_logic+0x29a>
		case 3://Check preconditions ramp close
			if((input_status.Ram_Close_Sensor== GPIO_PIN_SET)&&(input_status.Ram_Open_Sensor == GPIO_PIN_RESET))
 8001008:	7e3b      	ldrb	r3, [r7, #24]
 800100a:	2b01      	cmp	r3, #1
 800100c:	f040 80eb 	bne.w	80011e6 <Auto_business_logic+0x29e>
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 80e7 	bne.w	80011e6 <Auto_business_logic+0x29e>
			{
				HAL_GPIO_WritePin(GPIOD,RampCLose_valve_Pin,GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101e:	487f      	ldr	r0, [pc, #508]	; (800121c <Auto_business_logic+0x2d4>)
 8001020:	f002 f82f 	bl	8003082 <HAL_GPIO_WritePin>
				current_state_auto=4;
 8001024:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <Auto_business_logic+0x2d0>)
 8001026:	2204      	movs	r2, #4
 8001028:	701a      	strb	r2, [r3, #0]
				Start_Offset_RampClose_Timer=1;
 800102a:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <Auto_business_logic+0x2e0>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001030:	e0d9      	b.n	80011e6 <Auto_business_logic+0x29e>
		case 4:
			if(Complete_Offset_RampClose_Timer==1)
 8001032:	4b7e      	ldr	r3, [pc, #504]	; (800122c <Auto_business_logic+0x2e4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	f040 80d7 	bne.w	80011ea <Auto_business_logic+0x2a2>
			{
				Complete_Offset_RampClose_Timer=0;
 800103c:	4b7b      	ldr	r3, [pc, #492]	; (800122c <Auto_business_logic+0x2e4>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
				current_state_auto=5;
 8001042:	4b75      	ldr	r3, [pc, #468]	; (8001218 <Auto_business_logic+0x2d0>)
 8001044:	2205      	movs	r2, #5
 8001046:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001048:	e0cf      	b.n	80011ea <Auto_business_logic+0x2a2>
		case 5://Tilting up pre-condiion
			HAL_GPIO_WritePin(GPIOD,TiltingUp_valve_Pin,GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001050:	4872      	ldr	r0, [pc, #456]	; (800121c <Auto_business_logic+0x2d4>)
 8001052:	f002 f816 	bl	8003082 <HAL_GPIO_WritePin>
			Start_Offset_Tiltingup_Timer=1;
 8001056:	4b76      	ldr	r3, [pc, #472]	; (8001230 <Auto_business_logic+0x2e8>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
			current_state_auto=6;
 800105c:	4b6e      	ldr	r3, [pc, #440]	; (8001218 <Auto_business_logic+0x2d0>)
 800105e:	2206      	movs	r2, #6
 8001060:	701a      	strb	r2, [r3, #0]
		break;
 8001062:	e0d3      	b.n	800120c <Auto_business_logic+0x2c4>
		case 6:
			if(Complete_Offset_Tiltingup_Timer==1)
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <Auto_business_logic+0x2ec>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	f040 80c0 	bne.w	80011ee <Auto_business_logic+0x2a6>
			{
				Complete_Offset_Tiltingup_Timer=0;
 800106e:	4b71      	ldr	r3, [pc, #452]	; (8001234 <Auto_business_logic+0x2ec>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
				current_state_auto=7;
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <Auto_business_logic+0x2d0>)
 8001076:	2207      	movs	r2, #7
 8001078:	701a      	strb	r2, [r3, #0]
			}
		break;
 800107a:	e0b8      	b.n	80011ee <Auto_business_logic+0x2a6>
			{
				current_state_auto=9;
			}
			else
			{
				Start_Hold_Pouringwait_Timer=1;
 800107c:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <Auto_business_logic+0x2f0>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
				current_state_auto=8;
 8001082:	4b65      	ldr	r3, [pc, #404]	; (8001218 <Auto_business_logic+0x2d0>)
 8001084:	2208      	movs	r2, #8
 8001086:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001088:	e0c0      	b.n	800120c <Auto_business_logic+0x2c4>
		case 8:
			if(Complete_Hold_Pouringwait_Timer==1)
 800108a:	4b6c      	ldr	r3, [pc, #432]	; (800123c <Auto_business_logic+0x2f4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 80af 	bne.w	80011f2 <Auto_business_logic+0x2aa>
			{
				Complete_Hold_Pouringwait_Timer=0;
 8001094:	4b69      	ldr	r3, [pc, #420]	; (800123c <Auto_business_logic+0x2f4>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
				current_state_auto=9;
 800109a:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <Auto_business_logic+0x2d0>)
 800109c:	2209      	movs	r2, #9
 800109e:	701a      	strb	r2, [r3, #0]
			}
		break;
 80010a0:	e0a7      	b.n	80011f2 <Auto_business_logic+0x2aa>
		case 9:
			HAL_GPIO_WritePin(GPIOD,TiltingUp_valve_Pin,GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a8:	485c      	ldr	r0, [pc, #368]	; (800121c <Auto_business_logic+0x2d4>)
 80010aa:	f001 ffea 	bl	8003082 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,TiltingDown_valve_Pin,GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b4:	4859      	ldr	r0, [pc, #356]	; (800121c <Auto_business_logic+0x2d4>)
 80010b6:	f001 ffe4 	bl	8003082 <HAL_GPIO_WritePin>
			Start_Offset_Tilting_Timer =1;
 80010ba:	4b61      	ldr	r3, [pc, #388]	; (8001240 <Auto_business_logic+0x2f8>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
			current_state_auto=10;
 80010c0:	4b55      	ldr	r3, [pc, #340]	; (8001218 <Auto_business_logic+0x2d0>)
 80010c2:	220a      	movs	r2, #10
 80010c4:	701a      	strb	r2, [r3, #0]
		break;
 80010c6:	e0a1      	b.n	800120c <Auto_business_logic+0x2c4>
		case 10:
			if(Complete_Offset_Tilting_Timer==1)
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <Auto_business_logic+0x2fc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	f040 8092 	bne.w	80011f6 <Auto_business_logic+0x2ae>
			{
				Complete_Offset_Tilting_Timer=0;
 80010d2:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <Auto_business_logic+0x2fc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
				current_state_auto=11;
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <Auto_business_logic+0x2d0>)
 80010da:	220b      	movs	r2, #11
 80010dc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80010de:	e08a      	b.n	80011f6 <Auto_business_logic+0x2ae>
		case 11:
			Start_Hold_Curing_Timer=1;
 80010e0:	4b59      	ldr	r3, [pc, #356]	; (8001248 <Auto_business_logic+0x300>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
			current_state_auto=12;
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <Auto_business_logic+0x2d0>)
 80010e8:	220c      	movs	r2, #12
 80010ea:	701a      	strb	r2, [r3, #0]
		break;
 80010ec:	e08e      	b.n	800120c <Auto_business_logic+0x2c4>
		case 12:
			if(Complete_Hold_Curing_Timer==1)
 80010ee:	4b57      	ldr	r3, [pc, #348]	; (800124c <Auto_business_logic+0x304>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	f040 8081 	bne.w	80011fa <Auto_business_logic+0x2b2>
			{
				Complete_Hold_Curing_Timer=0;
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <Auto_business_logic+0x304>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
				current_state_auto=13;
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <Auto_business_logic+0x2d0>)
 8001100:	220d      	movs	r2, #13
 8001102:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001104:	e079      	b.n	80011fa <Auto_business_logic+0x2b2>
		case 13://Ramp open
			HAL_GPIO_WritePin(GPIOD,RampOpen_valve_Pin,GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	4843      	ldr	r0, [pc, #268]	; (800121c <Auto_business_logic+0x2d4>)
 800110e:	f001 ffb8 	bl	8003082 <HAL_GPIO_WritePin>
			Start_Offset_Rampopen_Timer=1;
 8001112:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <Auto_business_logic+0x308>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
			current_state_auto=14;
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <Auto_business_logic+0x2d0>)
 800111a:	220e      	movs	r2, #14
 800111c:	701a      	strb	r2, [r3, #0]
		break;
 800111e:	e075      	b.n	800120c <Auto_business_logic+0x2c4>
		case 14:
			if(Complete_Offset_Rampopen_Timer==1)
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <Auto_business_logic+0x30c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d16a      	bne.n	80011fe <Auto_business_logic+0x2b6>
			{
				Complete_Offset_Rampopen_Timer=0;
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <Auto_business_logic+0x30c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				current_state_auto=15;
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <Auto_business_logic+0x2d0>)
 8001130:	220f      	movs	r2, #15
 8001132:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001134:	e063      	b.n	80011fe <Auto_business_logic+0x2b6>
		case 15:
			if(SLIDERVALVE){
				HAL_GPIO_WritePin(GPIOD,SkiderOut_valve_Pin,GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113c:	4837      	ldr	r0, [pc, #220]	; (800121c <Auto_business_logic+0x2d4>)
 800113e:	f001 ffa0 	bl	8003082 <HAL_GPIO_WritePin>
				Start_Offset_Sliderout_Timer=1;
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <Auto_business_logic+0x310>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
				current_state_auto=16;
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <Auto_business_logic+0x2d0>)
 800114a:	2210      	movs	r2, #16
 800114c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				current_state_auto=17;
			}
		break;
 800114e:	e05d      	b.n	800120c <Auto_business_logic+0x2c4>
		case 16:
			if(Complete_Offset_Sliderout_Timer==1)
 8001150:	4b42      	ldr	r3, [pc, #264]	; (800125c <Auto_business_logic+0x314>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d154      	bne.n	8001202 <Auto_business_logic+0x2ba>
			{
				Complete_Offset_Sliderout_Timer=0;
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <Auto_business_logic+0x314>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
				current_state_auto=17;
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <Auto_business_logic+0x2d0>)
 8001160:	2211      	movs	r2, #17
 8001162:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001164:	e04d      	b.n	8001202 <Auto_business_logic+0x2ba>
		case 17:
			HAL_GPIO_WritePin(GPIOC,EjectionOn_valve_Pin,GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2140      	movs	r1, #64	; 0x40
 800116a:	483d      	ldr	r0, [pc, #244]	; (8001260 <Auto_business_logic+0x318>)
 800116c:	f001 ff89 	bl	8003082 <HAL_GPIO_WritePin>
			Start_Offset_EjectionIn_Timer=1;
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <Auto_business_logic+0x31c>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
			current_state_auto=18;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <Auto_business_logic+0x2d0>)
 8001178:	2212      	movs	r2, #18
 800117a:	701a      	strb	r2, [r3, #0]
		break;
 800117c:	e046      	b.n	800120c <Auto_business_logic+0x2c4>
		case 18:
			if(Complete_Offset_EjectionIn_Timer==1)
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <Auto_business_logic+0x320>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d13f      	bne.n	8001206 <Auto_business_logic+0x2be>
			{
				Complete_Offset_EjectionIn_Timer=0;
 8001186:	4b38      	ldr	r3, [pc, #224]	; (8001268 <Auto_business_logic+0x320>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
				current_state_auto=19;
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <Auto_business_logic+0x2d0>)
 800118e:	2213      	movs	r2, #19
 8001190:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001192:	e038      	b.n	8001206 <Auto_business_logic+0x2be>
		case 19:
			HAL_GPIO_WritePin(GPIOC,EjectionOff_valve_Pin,GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4831      	ldr	r0, [pc, #196]	; (8001260 <Auto_business_logic+0x318>)
 800119a:	f001 ff72 	bl	8003082 <HAL_GPIO_WritePin>
			Start_Offset_Ejectionout_Timer=1;
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <Auto_business_logic+0x324>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
			current_state_auto=20;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <Auto_business_logic+0x2d0>)
 80011a6:	2214      	movs	r2, #20
 80011a8:	701a      	strb	r2, [r3, #0]
		break;
 80011aa:	e02f      	b.n	800120c <Auto_business_logic+0x2c4>
		case 20:
			if(Complete_Offset_Ejectionout_Timer==1)
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Auto_business_logic+0x328>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d12a      	bne.n	800120a <Auto_business_logic+0x2c2>
			{
				Complete_Offset_Ejectionout_Timer=0;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <Auto_business_logic+0x328>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
				current_state_auto=21;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <Auto_business_logic+0x2d0>)
 80011bc:	2215      	movs	r2, #21
 80011be:	701a      	strb	r2, [r3, #0]
			}
		break;
 80011c0:	e023      	b.n	800120a <Auto_business_logic+0x2c2>
		case 21:
			Production = Production+1;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <Auto_business_logic+0x32c>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <Auto_business_logic+0x32c>)
 80011cc:	801a      	strh	r2, [r3, #0]
			current_state_auto=0;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <Auto_business_logic+0x2d0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
		break;
 80011d4:	e01a      	b.n	800120c <Auto_business_logic+0x2c4>
		default:
			current_state_auto=0;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <Auto_business_logic+0x2d0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
		break;
 80011dc:	e016      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011de:	bf00      	nop
 80011e0:	e014      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011e2:	bf00      	nop
 80011e4:	e012      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011e6:	bf00      	nop
 80011e8:	e010      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011ea:	bf00      	nop
 80011ec:	e00e      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011ee:	bf00      	nop
 80011f0:	e00c      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011f2:	bf00      	nop
 80011f4:	e00a      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011f6:	bf00      	nop
 80011f8:	e008      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011fa:	bf00      	nop
 80011fc:	e006      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 80011fe:	bf00      	nop
 8001200:	e004      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 8001202:	bf00      	nop
 8001204:	e002      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 8001206:	bf00      	nop
 8001208:	e000      	b.n	800120c <Auto_business_logic+0x2c4>
		break;
 800120a:	bf00      	nop
	}
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr
 8001218:	2000007e 	.word	0x2000007e
 800121c:	40011400 	.word	0x40011400
 8001220:	2000007f 	.word	0x2000007f
 8001224:	2000003b 	.word	0x2000003b
 8001228:	20000080 	.word	0x20000080
 800122c:	2000003c 	.word	0x2000003c
 8001230:	20000081 	.word	0x20000081
 8001234:	2000003d 	.word	0x2000003d
 8001238:	20000082 	.word	0x20000082
 800123c:	2000003e 	.word	0x2000003e
 8001240:	20000083 	.word	0x20000083
 8001244:	2000003f 	.word	0x2000003f
 8001248:	20000084 	.word	0x20000084
 800124c:	20000040 	.word	0x20000040
 8001250:	20000085 	.word	0x20000085
 8001254:	20000041 	.word	0x20000041
 8001258:	20000086 	.word	0x20000086
 800125c:	20000042 	.word	0x20000042
 8001260:	40011000 	.word	0x40011000
 8001264:	20000087 	.word	0x20000087
 8001268:	20000043 	.word	0x20000043
 800126c:	20000088 	.word	0x20000088
 8001270:	20000044 	.word	0x20000044
 8001274:	2000008a 	.word	0x2000008a

08001278 <Manual_business_logic>:

void Manual_business_logic(const Hw_Inputs input_status)
{
 8001278:	b084      	sub	sp, #16
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
 800127e:	f107 0c08 	add.w	ip, r7, #8
 8001282:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(input_status.Ram_Open_Switch == GPIO_PIN_RESET){
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <Manual_business_logic+0x20>
		HAL_GPIO_WritePin(GPIOD,RampOpen_valve_Pin,GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <Manual_business_logic+0x2c>)
 8001294:	f001 fef5 	bl	8003082 <HAL_GPIO_WritePin>
	}
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012a0:	b004      	add	sp, #16
 80012a2:	4770      	bx	lr
 80012a4:	40011400 	.word	0x40011400

080012a8 <ModbusFrame>:

uint8_t DWINRxData[64];
uint16_t RxNoOfData;

void ModbusFrame(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	switch(Config)
 80012ac:	4b6f      	ldr	r3, [pc, #444]	; (800146c <ModbusFrame+0x1c4>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <ModbusFrame+0x12>
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d032      	beq.n	800131e <ModbusFrame+0x76>
 80012b8:	e0d2      	b.n	8001460 <ModbusFrame+0x1b8>
	{
		case  ReadMultileReg:
			bufftx[0] = SalveId;
 80012ba:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <ModbusFrame+0x1c8>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_READMULTIPLEREG;
 80012c0:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <ModbusFrame+0x1c8>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_READ & 0xff00)>>8;
 80012c6:	4b6a      	ldr	r3, [pc, #424]	; (8001470 <ModbusFrame+0x1c8>)
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_READ & 0xff);
 80012cc:	4b68      	ldr	r3, [pc, #416]	; (8001470 <ModbusFrame+0x1c8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	70da      	strb	r2, [r3, #3]
			bufftx[4] = (NO_OF_READDATA & 0xff00)>>8;
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <ModbusFrame+0x1c8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_READDATA & 0xff);
 80012d8:	4b65      	ldr	r3, [pc, #404]	; (8001470 <ModbusFrame+0x1c8>)
 80012da:	220a      	movs	r2, #10
 80012dc:	715a      	strb	r2, [r3, #5]

			CRC_value = ASCChecksum(bufftx,6);
 80012de:	2106      	movs	r1, #6
 80012e0:	4863      	ldr	r0, [pc, #396]	; (8001470 <ModbusFrame+0x1c8>)
 80012e2:	f000 f8dd 	bl	80014a0 <ASCChecksum>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b62      	ldr	r3, [pc, #392]	; (8001474 <ModbusFrame+0x1cc>)
 80012ec:	801a      	strh	r2, [r3, #0]

			bufftx[6] = (CRC_value & 0xff);
 80012ee:	4b61      	ldr	r3, [pc, #388]	; (8001474 <ModbusFrame+0x1cc>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <ModbusFrame+0x1c8>)
 80012f6:	719a      	strb	r2, [r3, #6]
			bufftx[7] = (CRC_value & 0xff00)>>8;
 80012f8:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <ModbusFrame+0x1cc>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <ModbusFrame+0x1c8>)
 8001304:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(&huart1,bufftx,8);
 8001306:	2208      	movs	r2, #8
 8001308:	4959      	ldr	r1, [pc, #356]	; (8001470 <ModbusFrame+0x1c8>)
 800130a:	485b      	ldr	r0, [pc, #364]	; (8001478 <ModbusFrame+0x1d0>)
 800130c:	f003 fe06 	bl	8004f1c <HAL_UART_Transmit_IT>
			RxNoOfData=(NO_OF_READDATA*2)+5;
 8001310:	4b5a      	ldr	r3, [pc, #360]	; (800147c <ModbusFrame+0x1d4>)
 8001312:	2219      	movs	r2, #25
 8001314:	801a      	strh	r2, [r3, #0]
			Config = WriteMultipleReg;
 8001316:	4b55      	ldr	r3, [pc, #340]	; (800146c <ModbusFrame+0x1c4>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
		break;
 800131c:	e0a4      	b.n	8001468 <ModbusFrame+0x1c0>
		case WriteMultipleReg:
			bufftx[0] = SalveId;
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <ModbusFrame+0x1c8>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
			bufftx[1] = FUNCTIONCODE_WRITEMULTIPLEREG;
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <ModbusFrame+0x1c8>)
 8001326:	2210      	movs	r2, #16
 8001328:	705a      	strb	r2, [r3, #1]
			bufftx[2] = (STARTADD_WRITE & 0xff00)>>8;
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <ModbusFrame+0x1c8>)
 800132c:	2220      	movs	r2, #32
 800132e:	709a      	strb	r2, [r3, #2]
			bufftx[3] = (STARTADD_WRITE & 0xff);
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <ModbusFrame+0x1c8>)
 8001332:	2200      	movs	r2, #0
 8001334:	70da      	strb	r2, [r3, #3]

			bufftx[4] = (NO_OF_WRITEDATA & 0xff00)>>8;
 8001336:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <ModbusFrame+0x1c8>)
 8001338:	2200      	movs	r2, #0
 800133a:	711a      	strb	r2, [r3, #4]
			bufftx[5] = (NO_OF_WRITEDATA & 0xff);
 800133c:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <ModbusFrame+0x1c8>)
 800133e:	220a      	movs	r2, #10
 8001340:	715a      	strb	r2, [r3, #5]

			bufftx[6] = NO_OF_WRITEDATA*2;
 8001342:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <ModbusFrame+0x1c8>)
 8001344:	2214      	movs	r2, #20
 8001346:	719a      	strb	r2, [r3, #6]

			bufftx[7] = (Production & 0xff00)>>8;
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <ModbusFrame+0x1d8>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <ModbusFrame+0x1c8>)
 8001354:	71da      	strb	r2, [r3, #7]
			bufftx[8] = (Production & 0xff);
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <ModbusFrame+0x1d8>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <ModbusFrame+0x1c8>)
 800135e:	721a      	strb	r2, [r3, #8]

			bufftx[9] = (0 & 0xff00)>>8;
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <ModbusFrame+0x1c8>)
 8001362:	2200      	movs	r2, #0
 8001364:	725a      	strb	r2, [r3, #9]
			bufftx[10] = (0 & 0xff);
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <ModbusFrame+0x1c8>)
 8001368:	2200      	movs	r2, #0
 800136a:	729a      	strb	r2, [r3, #10]

			bufftx[11] = (0 & 0xff00)>>8;
 800136c:	4b40      	ldr	r3, [pc, #256]	; (8001470 <ModbusFrame+0x1c8>)
 800136e:	2200      	movs	r2, #0
 8001370:	72da      	strb	r2, [r3, #11]
			bufftx[12] = (0 & 0xff);
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <ModbusFrame+0x1c8>)
 8001374:	2200      	movs	r2, #0
 8001376:	731a      	strb	r2, [r3, #12]

			bufftx[13] = (Inputs_Status & 0xff00)>>8;
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <ModbusFrame+0x1dc>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b29b      	uxth	r3, r3
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <ModbusFrame+0x1c8>)
 8001384:	735a      	strb	r2, [r3, #13]
			bufftx[14] = (Inputs_Status & 0xff);
 8001386:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <ModbusFrame+0x1dc>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b38      	ldr	r3, [pc, #224]	; (8001470 <ModbusFrame+0x1c8>)
 800138e:	739a      	strb	r2, [r3, #14]

			bufftx[15] = (Inputs_Status_2 & 0xff00)>>8;
 8001390:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <ModbusFrame+0x1e0>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <ModbusFrame+0x1c8>)
 800139c:	73da      	strb	r2, [r3, #15]
			bufftx[16] = (Inputs_Status_2 & 0xff);
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <ModbusFrame+0x1e0>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <ModbusFrame+0x1c8>)
 80013a6:	741a      	strb	r2, [r3, #16]

			bufftx[17] = (CuringTime & 0xff00)>>8;//2005
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <ModbusFrame+0x1e4>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <ModbusFrame+0x1c8>)
 80013b4:	745a      	strb	r2, [r3, #17]
			bufftx[18] = (CuringTime & 0xff);
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <ModbusFrame+0x1e4>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <ModbusFrame+0x1c8>)
 80013be:	749a      	strb	r2, [r3, #18]

			bufftx[19] = (TIltingup & 0xff00)>>8;
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <ModbusFrame+0x1e8>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <ModbusFrame+0x1c8>)
 80013cc:	74da      	strb	r2, [r3, #19]
			bufftx[20] = (TIltingup & 0xff);
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <ModbusFrame+0x1e8>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <ModbusFrame+0x1c8>)
 80013d6:	751a      	strb	r2, [r3, #20]

			bufftx[21] = (tinltingdown & 0xff00)>>8;
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <ModbusFrame+0x1ec>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <ModbusFrame+0x1c8>)
 80013e4:	755a      	strb	r2, [r3, #21]
			bufftx[22] = (tinltingdown & 0xff);
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <ModbusFrame+0x1ec>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <ModbusFrame+0x1c8>)
 80013ee:	759a      	strb	r2, [r3, #22]

			bufftx[23] = (sliderin & 0xff00)>>8;
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <ModbusFrame+0x1f0>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <ModbusFrame+0x1c8>)
 80013fc:	75da      	strb	r2, [r3, #23]
			bufftx[24] = (sliderin & 0xff);
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <ModbusFrame+0x1f0>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <ModbusFrame+0x1c8>)
 8001406:	761a      	strb	r2, [r3, #24]

			bufftx[25] = (SLiderout & 0xff00)>>8;
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <ModbusFrame+0x1f4>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <ModbusFrame+0x1c8>)
 8001414:	765a      	strb	r2, [r3, #25]
			bufftx[26] = (SLiderout & 0xff);
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <ModbusFrame+0x1f4>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <ModbusFrame+0x1c8>)
 800141e:	769a      	strb	r2, [r3, #26]
			CRC_value = ASCChecksum(bufftx,27);
 8001420:	211b      	movs	r1, #27
 8001422:	4813      	ldr	r0, [pc, #76]	; (8001470 <ModbusFrame+0x1c8>)
 8001424:	f000 f83c 	bl	80014a0 <ASCChecksum>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <ModbusFrame+0x1cc>)
 800142e:	801a      	strh	r2, [r3, #0]

			bufftx[27] = (CRC_value & 0xff);
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <ModbusFrame+0x1cc>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <ModbusFrame+0x1c8>)
 8001438:	76da      	strb	r2, [r3, #27]
			bufftx[28] = (CRC_value & 0xff00)>>8;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <ModbusFrame+0x1cc>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <ModbusFrame+0x1c8>)
 8001446:	771a      	strb	r2, [r3, #28]
			RxNoOfData=8;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <ModbusFrame+0x1d4>)
 800144a:	2208      	movs	r2, #8
 800144c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,bufftx,29);
 800144e:	221d      	movs	r2, #29
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <ModbusFrame+0x1c8>)
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <ModbusFrame+0x1d0>)
 8001454:	f003 fd62 	bl	8004f1c <HAL_UART_Transmit_IT>
			Config = ReadMultileReg;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <ModbusFrame+0x1c4>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
		break;
 800145e:	e003      	b.n	8001468 <ModbusFrame+0x1c0>
		default:
			Config = ReadMultileReg;
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <ModbusFrame+0x1c4>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
		break;
 8001466:	bf00      	nop
	}
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000aa 	.word	0x200000aa
 8001470:	2000008c 	.word	0x2000008c
 8001474:	200000ac 	.word	0x200000ac
 8001478:	200001f0 	.word	0x200001f0
 800147c:	200000f0 	.word	0x200000f0
 8001480:	2000008a 	.word	0x2000008a
 8001484:	2000006c 	.word	0x2000006c
 8001488:	2000006e 	.word	0x2000006e
 800148c:	20000074 	.word	0x20000074
 8001490:	20000070 	.word	0x20000070
 8001494:	20000072 	.word	0x20000072
 8001498:	20000076 	.word	0x20000076
 800149c:	20000078 	.word	0x20000078

080014a0 <ASCChecksum>:

uint16_t ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	73bb      	strb	r3, [r7, #14]
	uint8_t CRCRegHigh = 0xff;
 80014b0:	23ff      	movs	r3, #255	; 0xff
 80014b2:	737b      	strb	r3, [r7, #13]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	733b      	strb	r3, [r7, #12]
   	for(i=0;i < CheckSumBytes;i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e013      	b.n	80014e6 <ASCChecksum+0x46>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	4053      	eors	r3, r2
 80014ca:	72fb      	strb	r3, [r7, #11]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <ASCChecksum+0x68>)
 80014d0:	5cd2      	ldrb	r2, [r2, r3]
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	4053      	eors	r3, r2
 80014d6:	73bb      	strb	r3, [r7, #14]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <ASCChecksum+0x6c>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	737b      	strb	r3, [r7, #13]
   	for(i=0;i < CheckSumBytes;i++)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3301      	adds	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3e7      	bcc.n	80014be <ASCChecksum+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	b29b      	uxth	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	08005b0c 	.word	0x08005b0c
 800150c:	08005c0c 	.word	0x08005c0c

08001510 <ModbusInit>:


void ModbusInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, DWINRxData, 64);
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	4903      	ldr	r1, [pc, #12]	; (8001524 <ModbusInit+0x14>)
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <ModbusInit+0x18>)
 800151a:	f003 fd59 	bl	8004fd0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000b0 	.word	0x200000b0
 8001528:	200001f0 	.word	0x200001f0

0800152c <Dwin_Rx_Decoder>:

void Dwin_Rx_Decoder(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
if(!dwin_rx_multipledata_completed){return;}
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <Dwin_Rx_Decoder+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <Dwin_Rx_Decoder+0x14>
dwin_rx_multipledata_completed=0;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <Dwin_Rx_Decoder+0x1c>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e000      	b.n	8001542 <Dwin_Rx_Decoder+0x16>
if(!dwin_rx_multipledata_completed){return;}
 8001540:	bf00      	nop
}
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000045 	.word	0x20000045

0800154c <flashmemoryinit>:
uint8_t writeFlashBuf[10];

uint8_t databuffer_sector_zero[20];
void flashmemoryread(void);

void flashmemoryinit(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	W25qxx_Init();
 8001550:	f000 fe22 	bl	8002198 <W25qxx_Init>
	flashmemoryread();
 8001554:	f000 f87c 	bl	8001650 <flashmemoryread>

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <flashmemoryroutine>:

void flashmemoryroutine(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	if(Trigger_Hmi_Data_Save)
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <flashmemoryroutine+0xd0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05f      	beq.n	8001628 <flashmemoryroutine+0xcc>
	{
		Trigger_Hmi_Data_Save=0;
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <flashmemoryroutine+0xd0>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		databuffer_sector_zero[0] = (CuringTime & 0xff00)>>8;
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <flashmemoryroutine+0xd4>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <flashmemoryroutine+0xd8>)
 800157a:	701a      	strb	r2, [r3, #0]
		databuffer_sector_zero[1] = (CuringTime & 0xff);
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <flashmemoryroutine+0xd4>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <flashmemoryroutine+0xd8>)
 8001584:	705a      	strb	r2, [r3, #1]
		databuffer_sector_zero[2] = (TIltingup & 0xff00)>>8;
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <flashmemoryroutine+0xdc>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <flashmemoryroutine+0xd8>)
 8001592:	709a      	strb	r2, [r3, #2]
		databuffer_sector_zero[3] = (TIltingup & 0xff);
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <flashmemoryroutine+0xdc>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <flashmemoryroutine+0xd8>)
 800159c:	70da      	strb	r2, [r3, #3]
		databuffer_sector_zero[4] = (tinltingdown & 0xff00)>>8;
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <flashmemoryroutine+0xe0>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <flashmemoryroutine+0xd8>)
 80015aa:	711a      	strb	r2, [r3, #4]
		databuffer_sector_zero[5] = (tinltingdown & 0xff);
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <flashmemoryroutine+0xe0>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <flashmemoryroutine+0xd8>)
 80015b4:	715a      	strb	r2, [r3, #5]
		databuffer_sector_zero[6] = (sliderin & 0xff00)>>8;
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <flashmemoryroutine+0xe4>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <flashmemoryroutine+0xd8>)
 80015c2:	719a      	strb	r2, [r3, #6]
		databuffer_sector_zero[7] = (sliderin & 0xff);
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <flashmemoryroutine+0xe4>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <flashmemoryroutine+0xd8>)
 80015cc:	71da      	strb	r2, [r3, #7]
		databuffer_sector_zero[8] = (SLiderout & 0xff00)>>8;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <flashmemoryroutine+0xe8>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <flashmemoryroutine+0xd8>)
 80015da:	721a      	strb	r2, [r3, #8]
		databuffer_sector_zero[9] = (SLiderout & 0xff);
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <flashmemoryroutine+0xe8>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <flashmemoryroutine+0xd8>)
 80015e4:	725a      	strb	r2, [r3, #9]
		databuffer_sector_zero[10] = (Ejectionon & 0xff00)>>8;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <flashmemoryroutine+0xec>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <flashmemoryroutine+0xd8>)
 80015f2:	729a      	strb	r2, [r3, #10]
		databuffer_sector_zero[11] = (Ejectionon & 0xff);
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <flashmemoryroutine+0xec>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <flashmemoryroutine+0xd8>)
 80015fc:	72da      	strb	r2, [r3, #11]
		databuffer_sector_zero[12] = (Ejectionoff & 0xff00)>>8;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <flashmemoryroutine+0xf0>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <flashmemoryroutine+0xd8>)
 800160a:	731a      	strb	r2, [r3, #12]
		databuffer_sector_zero[13] = (Ejectionoff & 0xff);
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <flashmemoryroutine+0xf0>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <flashmemoryroutine+0xd8>)
 8001614:	735a      	strb	r2, [r3, #13]
		W25qxx_EraseSector(0);
 8001616:	2000      	movs	r0, #0
 8001618:	f000 fe90 	bl	800233c <W25qxx_EraseSector>
		W25qxx_WriteSector(databuffer_sector_zero,HMIDATASECTOR,0,14);
 800161c:	230e      	movs	r3, #14
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <flashmemoryroutine+0xd8>)
 8001624:	f000 ff7a 	bl	800251c <W25qxx_WriteSector>

	}
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000046 	.word	0x20000046
 8001630:	20000074 	.word	0x20000074
 8001634:	200000f4 	.word	0x200000f4
 8001638:	20000070 	.word	0x20000070
 800163c:	20000072 	.word	0x20000072
 8001640:	20000076 	.word	0x20000076
 8001644:	20000078 	.word	0x20000078
 8001648:	2000007a 	.word	0x2000007a
 800164c:	2000007c 	.word	0x2000007c

08001650 <flashmemoryread>:

void flashmemoryread(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	W25qxx_ReadSector(databuffer_sector_zero,HMIDATASECTOR,0,14);
 8001654:	230e      	movs	r3, #14
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	483a      	ldr	r0, [pc, #232]	; (8001744 <flashmemoryread+0xf4>)
 800165c:	f001 f83e 	bl	80026dc <W25qxx_ReadSector>
	CuringTime 		= (databuffer_sector_zero[0]<<8 | databuffer_sector_zero[1]);
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <flashmemoryread+0xf4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <flashmemoryread+0xf4>)
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <flashmemoryread+0xf8>)
 8001676:	801a      	strh	r2, [r3, #0]
	TIltingup 		= (databuffer_sector_zero[2]<<8 | databuffer_sector_zero[3]);
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <flashmemoryread+0xf4>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <flashmemoryread+0xf4>)
 8001682:	78db      	ldrb	r3, [r3, #3]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <flashmemoryread+0xfc>)
 800168e:	801a      	strh	r2, [r3, #0]
	tinltingdown 	= (databuffer_sector_zero[4]<<8 | databuffer_sector_zero[5]);
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <flashmemoryread+0xf4>)
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <flashmemoryread+0xf4>)
 800169a:	795b      	ldrb	r3, [r3, #5]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <flashmemoryread+0x100>)
 80016a6:	801a      	strh	r2, [r3, #0]
	sliderin 		= (databuffer_sector_zero[6]<<8 | databuffer_sector_zero[7]);
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <flashmemoryread+0xf4>)
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <flashmemoryread+0xf4>)
 80016b2:	79db      	ldrb	r3, [r3, #7]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <flashmemoryread+0x104>)
 80016be:	801a      	strh	r2, [r3, #0]
	SLiderout 		= (databuffer_sector_zero[8]<<8 | databuffer_sector_zero[9]);
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <flashmemoryread+0xf4>)
 80016c2:	7a1b      	ldrb	r3, [r3, #8]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <flashmemoryread+0xf4>)
 80016ca:	7a5b      	ldrb	r3, [r3, #9]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <flashmemoryread+0x108>)
 80016d6:	801a      	strh	r2, [r3, #0]
	Ejectionon 		= (databuffer_sector_zero[10]<<8 | databuffer_sector_zero[11]);
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <flashmemoryread+0xf4>)
 80016da:	7a9b      	ldrb	r3, [r3, #10]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <flashmemoryread+0xf4>)
 80016e2:	7adb      	ldrb	r3, [r3, #11]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <flashmemoryread+0x10c>)
 80016ee:	801a      	strh	r2, [r3, #0]
	Ejectionoff 	= (databuffer_sector_zero[12]<<8 | databuffer_sector_zero[13]);
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <flashmemoryread+0xf4>)
 80016f2:	7b1b      	ldrb	r3, [r3, #12]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <flashmemoryread+0xf4>)
 80016fa:	7b5b      	ldrb	r3, [r3, #13]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <flashmemoryread+0x110>)
 8001706:	801a      	strh	r2, [r3, #0]
	CuringTime_k1 = CuringTime;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <flashmemoryread+0xf8>)
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <flashmemoryread+0x114>)
 800170e:	801a      	strh	r2, [r3, #0]
	TIltingup_k1 = TIltingup;
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <flashmemoryread+0xfc>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <flashmemoryread+0x118>)
 8001716:	801a      	strh	r2, [r3, #0]
	tinltingdown_k1 = tinltingdown;
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <flashmemoryread+0x100>)
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <flashmemoryread+0x11c>)
 800171e:	801a      	strh	r2, [r3, #0]
	SLiderout_k1 = SLiderout;
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <flashmemoryread+0x108>)
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <flashmemoryread+0x120>)
 8001726:	801a      	strh	r2, [r3, #0]
	sliderin_k1=sliderin;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <flashmemoryread+0x104>)
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <flashmemoryread+0x124>)
 800172e:	801a      	strh	r2, [r3, #0]
	Ejectionon_k1 =Ejectionon;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <flashmemoryread+0x10c>)
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <flashmemoryread+0x128>)
 8001736:	801a      	strh	r2, [r3, #0]
	Ejectionoff_k1=Ejectionoff;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <flashmemoryread+0x110>)
 800173a:	881a      	ldrh	r2, [r3, #0]
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <flashmemoryread+0x12c>)
 800173e:	801a      	strh	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000f4 	.word	0x200000f4
 8001748:	20000074 	.word	0x20000074
 800174c:	20000070 	.word	0x20000070
 8001750:	20000072 	.word	0x20000072
 8001754:	20000076 	.word	0x20000076
 8001758:	20000078 	.word	0x20000078
 800175c:	2000007a 	.word	0x2000007a
 8001760:	2000007c 	.word	0x2000007c
 8001764:	20000048 	.word	0x20000048
 8001768:	2000004a 	.word	0x2000004a
 800176c:	2000004c 	.word	0x2000004c
 8001770:	20000050 	.word	0x20000050
 8001774:	2000004e 	.word	0x2000004e
 8001778:	20000052 	.word	0x20000052
 800177c:	20000054 	.word	0x20000054

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001784:	f001 f80c 	bl	80027a0 <HAL_Init>
  /* USER CODE END WHILE */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f82e 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f000 f97a 	bl	8001a84 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001790:	f000 f8b4 	bl	80018fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001794:	f000 f8fe 	bl	8001994 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001798:	f000 f87a 	bl	8001890 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800179c:	f000 f948 	bl	8001a30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerApplicationInit();
 80017a0:	f7fe fec4 	bl	800052c <TimerApplicationInit>


  ModbusInit();
 80017a4:	f7ff feb4 	bl	8001510 <ModbusInit>
  flashmemoryinit();
 80017a8:	f7ff fed0 	bl	800154c <flashmemoryinit>
 // HAL_UART_Receive_IT(&huart1,serial_1_buff, 1);

  InputOutputTest();
 80017ac:	f7ff f87c 	bl	80008a8 <InputOutputTest>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Flag5msTM2)
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <main+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <main+0x42>
	  {
		  Flag5msTM2=0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <main+0x60>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		  gdc_businesslogic();
 80017be:	f7ff f97b 	bl	8000ab8 <gdc_businesslogic>
	  }
	  if(Flag500ms)
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <main+0x64>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f2      	beq.n	80017b0 <main+0x30>
	  {
		  Flag500ms=0;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <main+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
		  ModbusFrame();
 80017d0:	f7ff fd6a 	bl	80012a8 <ModbusFrame>
		  Dwin_Rx_Decoder();
 80017d4:	f7ff feaa 	bl	800152c <Dwin_Rx_Decoder>
		  flashmemoryroutine();
 80017d8:	f7ff fec0 	bl	800155c <flashmemoryroutine>
	  if(Flag5msTM2)
 80017dc:	e7e8      	b.n	80017b0 <main+0x30>
 80017de:	bf00      	nop
 80017e0:	20000039 	.word	0x20000039
 80017e4:	2000003a 	.word	0x2000003a

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	; 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	2238      	movs	r2, #56	; 0x38
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f974 	bl	8005ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800180e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV6;
 8001814:	2305      	movs	r3, #5
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001822:	2302      	movs	r3, #2
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800182c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001830:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001832:	2302      	movs	r3, #2
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL12;
 8001836:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 800183c:	2310      	movs	r3, #16
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fc35 	bl	80030b4 <HAL_RCC_OscConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001850:	f000 fa08 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	230f      	movs	r3, #15
 8001856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f001 ff36 	bl	80036e0 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800187a:	f000 f9f3 	bl	8001c64 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <SystemClock_Config+0xa4>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	bf00      	nop
 8001886:	3750      	adds	r7, #80	; 0x50
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	42420070 	.word	0x42420070

08001890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI1_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI1_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018c4:	2218      	movs	r2, #24
 80018c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018e2:	f002 f92b 	bl	8003b3c <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018ec:	f000 f9ba 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000108 	.word	0x20000108
 80018f8:	40013000 	.word	0x40013000

080018fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_TIM2_Init+0x94>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <MX_TIM2_Init+0x94>)
 8001922:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001926:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_TIM2_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_TIM2_Init+0x94>)
 8001930:	220a      	movs	r2, #10
 8001932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_TIM2_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_TIM2_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001940:	4813      	ldr	r0, [pc, #76]	; (8001990 <MX_TIM2_Init+0x94>)
 8001942:	f002 fe83 	bl	800464c <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800194c:	f000 f98a 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <MX_TIM2_Init+0x94>)
 800195e:	f003 f827 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 f97c 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_TIM2_Init+0x94>)
 800197a:	f003 fa07 	bl	8004d8c <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001984:	f000 f96e 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000160 	.word	0x20000160

08001994 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <MX_TIM3_Init+0x98>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019b8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80019bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019d8:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019da:	f002 fe37 	bl	800464c <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019e4:	f000 f93e 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4619      	mov	r1, r3
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <MX_TIM3_Init+0x94>)
 80019f6:	f002 ffdb 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a00:	f000 f930 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_TIM3_Init+0x94>)
 8001a12:	f003 f9bb 	bl	8004d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a1c:	f000 f922 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200001a8 	.word	0x200001a8
 8001a2c:	40000400 	.word	0x40000400

08001a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_USART1_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART1_UART_Init+0x4c>)
 8001a68:	f003 fa08 	bl	8004e7c <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f000 f8f7 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200001f0 	.word	0x200001f0
 8001a80:	40013800 	.word	0x40013800

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b6b      	ldr	r3, [pc, #428]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a6a      	ldr	r2, [pc, #424]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a64      	ldr	r2, [pc, #400]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	4b5f      	ldr	r3, [pc, #380]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a5e      	ldr	r2, [pc, #376]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b5c      	ldr	r3, [pc, #368]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b56      	ldr	r3, [pc, #344]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <MX_GPIO_Init+0x1c4>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b10:	2200      	movs	r2, #0
 8001b12:	f641 7110 	movw	r1, #7952	; 0x1f10
 8001b16:	484d      	ldr	r0, [pc, #308]	; (8001c4c <MX_GPIO_Init+0x1c8>)
 8001b18:	f001 fab3 	bl	8003082 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorOn_valve_Pin|MotorOff_valve_Pin|RampOpen_valve_Pin|RampCLose_valve_Pin
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001b22:	484b      	ldr	r0, [pc, #300]	; (8001c50 <MX_GPIO_Init+0x1cc>)
 8001b24:	f001 faad 	bl	8003082 <HAL_GPIO_WritePin>
                          |TiltingUp_valve_Pin|TiltingDown_valve_Pin|SkiderOut_valve_Pin|SliderIn_valve_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EjectionOn_valve_Pin|EjectionOff_valve_Pin|RoboRelay_output_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001b2e:	4849      	ldr	r0, [pc, #292]	; (8001c54 <MX_GPIO_Init+0x1d0>)
 8001b30:	f001 faa7 	bl	8003082 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Robo_Ack_Input_Pin StationInfo_Sensor_Pin Tiltingdown_sensor_Pin TiltingUp_Sensor_Pin */
  GPIO_InitStruct.Pin = Robo_Ack_Input_Pin|StationInfo_Sensor_Pin|Tiltingdown_sensor_Pin|TiltingUp_Sensor_Pin;
 8001b34:	230f      	movs	r3, #15
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4841      	ldr	r0, [pc, #260]	; (8001c4c <MX_GPIO_Init+0x1c8>)
 8001b48:	f001 f900 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b4c:	f641 7310 	movw	r3, #7952	; 0x1f10
 8001b50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4839      	ldr	r0, [pc, #228]	; (8001c4c <MX_GPIO_Init+0x1c8>)
 8001b66:	f001 f8f1 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Rampclose_sensor_Pin Rampopen_sensor_Pin */
  GPIO_InitStruct.Pin = Rampclose_sensor_Pin|Rampopen_sensor_Pin;
 8001b6a:	2330      	movs	r3, #48	; 0x30
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4835      	ldr	r0, [pc, #212]	; (8001c54 <MX_GPIO_Init+0x1d0>)
 8001b7e:	f001 f8e5 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorOff_Switch_Pin MotorON_Switch_Pin Emergency_Switch_Pin Auto_Manual_Switch_Pin */
  GPIO_InitStruct.Pin = MotorOff_Switch_Pin|MotorON_Switch_Pin|Emergency_Switch_Pin|Auto_Manual_Switch_Pin;
 8001b82:	f640 4303 	movw	r3, #3075	; 0xc03
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4830      	ldr	r0, [pc, #192]	; (8001c58 <MX_GPIO_Init+0x1d4>)
 8001b98:	f001 f8d8 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CycleStart_Switch_Pin SliderIn_Switch_Pin SliderOut_Switch_Pin EjectionOut_Switch_Pin
                           EjectionIn_Switch_Pin TiltingDown_Switch_Pin TiltingUp_Switch_Pin RampClose_Switch_Pin
                           RampOpen_Switch_Pin */
  GPIO_InitStruct.Pin = CycleStart_Switch_Pin|SliderIn_Switch_Pin|SliderOut_Switch_Pin|EjectionOut_Switch_Pin
 8001b9c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001ba0:	617b      	str	r3, [r7, #20]
                          |EjectionIn_Switch_Pin|TiltingDown_Switch_Pin|TiltingUp_Switch_Pin|RampClose_Switch_Pin
                          |RampOpen_Switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482a      	ldr	r0, [pc, #168]	; (8001c5c <MX_GPIO_Init+0x1d8>)
 8001bb2:	f001 f8cb 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorOn_valve_Pin MotorOff_valve_Pin RampOpen_valve_Pin RampCLose_valve_Pin
                           TiltingUp_valve_Pin TiltingDown_valve_Pin SkiderOut_valve_Pin SliderIn_valve_Pin */
  GPIO_InitStruct.Pin = MotorOn_valve_Pin|MotorOff_valve_Pin|RampOpen_valve_Pin|RampCLose_valve_Pin
 8001bb6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001bba:	617b      	str	r3, [r7, #20]
                          |TiltingUp_valve_Pin|TiltingDown_valve_Pin|SkiderOut_valve_Pin|SliderIn_valve_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4820      	ldr	r0, [pc, #128]	; (8001c50 <MX_GPIO_Init+0x1cc>)
 8001bd0:	f001 f8bc 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : EjectionOn_valve_Pin EjectionOff_valve_Pin RoboRelay_output_Pin PC9 */
  GPIO_InitStruct.Pin = EjectionOn_valve_Pin|EjectionOff_valve_Pin|RoboRelay_output_Pin|GPIO_PIN_9;
 8001bd4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4819      	ldr	r0, [pc, #100]	; (8001c54 <MX_GPIO_Init+0x1d0>)
 8001bee:	f001 f8ad 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_485_Tx_2_Pin */
  GPIO_InitStruct.Pin = UART_485_Tx_2_Pin;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UART_485_Tx_2_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4812      	ldr	r0, [pc, #72]	; (8001c50 <MX_GPIO_Init+0x1cc>)
 8001c06:	f001 f8a1 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_Rx_485_2_Pin */
  GPIO_InitStruct.Pin = USART_Rx_485_2_Pin;
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_Rx_485_2_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_GPIO_Init+0x1cc>)
 8001c1e:	f001 f895 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_USART2_ENABLE();
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_GPIO_Init+0x1dc>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <MX_GPIO_Init+0x1dc>)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	6053      	str	r3, [r2, #4]

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	; 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	40011400 	.word	0x40011400
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	40011800 	.word	0x40011800
 8001c60:	40010000 	.word	0x40010000

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>
	...

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_MspInit+0x54>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_MspInit+0x54>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_MspInit+0x54>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_MspInit+0x54>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_MspInit+0x54>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_MspInit+0x54>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_MspInit+0x58>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_MspInit+0x58>)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010000 	.word	0x40010000

08001ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d12f      	bne.n	8001d4c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001cf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d1c:	23a0      	movs	r3, #160	; 0xa0
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480b      	ldr	r0, [pc, #44]	; (8001d5c <HAL_SPI_MspInit+0x90>)
 8001d30:	f001 f80c 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <HAL_SPI_MspInit+0x90>)
 8001d48:	f001 f800 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40013000 	.word	0x40013000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010800 	.word	0x40010800

08001d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d114      	bne.n	8001d9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_TIM_Base_MspInit+0x78>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_TIM_Base_MspInit+0x78>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_TIM_Base_MspInit+0x78>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	201c      	movs	r0, #28
 8001d90:	f000 fe63 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d94:	201c      	movs	r0, #28
 8001d96:	f000 fe7c 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d9a:	e018      	b.n	8001dce <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_TIM_Base_MspInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d113      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_TIM_Base_MspInit+0x78>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_TIM_Base_MspInit+0x78>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_TIM_Base_MspInit+0x78>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	201d      	movs	r0, #29
 8001dc4:	f000 fe49 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc8:	201d      	movs	r0, #29
 8001dca:	f000 fe62 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40000400 	.word	0x40000400

08001de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <HAL_UART_MspInit+0xb4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d145      	bne.n	8001e8c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_UART_MspInit+0xb8>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <HAL_UART_MspInit+0xb8>)
 8001e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_UART_MspInit+0xb8>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_UART_MspInit+0xb8>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_UART_MspInit+0xb8>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_UART_MspInit+0xb8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4816      	ldr	r0, [pc, #88]	; (8001e9c <HAL_UART_MspInit+0xbc>)
 8001e44:	f000 ff82 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <HAL_UART_MspInit+0xbc>)
 8001e5c:	f000 ff76 	bl	8002d4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_UART_MspInit+0xc0>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_UART_MspInit+0xc0>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2025      	movs	r0, #37	; 0x25
 8001e82:	f000 fdea 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e86:	2025      	movs	r0, #37	; 0x25
 8001e88:	f000 fe03 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010c00 	.word	0x40010c00
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eea:	f000 fc9f 	bl	800282c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM2_IRQHandler+0x10>)
 8001efa:	f002 fc51 	bl	80047a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000160 	.word	0x20000160

08001f08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM3_IRQHandler+0x10>)
 8001f0e:	f002 fc47 	bl	80047a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001a8 	.word	0x200001a8

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <USART1_IRQHandler+0x10>)
 8001f22:	f003 f8b3 	bl	800508c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001f0 	.word	0x200001f0

08001f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <Reset_Handler>:
 8001f3c:	f7ff fff8 	bl	8001f30 <SystemInit>
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <LoopFillZerobss+0xe>)
 8001f42:	490c      	ldr	r1, [pc, #48]	; (8001f74 <LoopFillZerobss+0x12>)
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <LoopFillZerobss+0x16>)
 8001f46:	2300      	movs	r3, #0
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:
 8001f4a:	58d4      	ldr	r4, [r2, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:
 8001f50:	18c4      	adds	r4, r0, r3
 8001f52:	428c      	cmp	r4, r1
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <LoopFillZerobss+0x1a>)
 8001f58:	4c09      	ldr	r4, [pc, #36]	; (8001f80 <LoopFillZerobss+0x1e>)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:
 8001f62:	42a2      	cmp	r2, r4
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>
 8001f66:	f003 fd99 	bl	8005a9c <__libc_init_array>
 8001f6a:	f7ff fc09 	bl	8001780 <main>
 8001f6e:	4770      	bx	lr
 8001f70:	20000000 	.word	0x20000000
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	08005d54 	.word	0x08005d54
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	20000264 	.word	0x20000264

08001f84 <ADC1_2_IRQHandler>:
 8001f84:	e7fe      	b.n	8001f84 <ADC1_2_IRQHandler>
	...

08001f88 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001f92:	f107 020f 	add.w	r2, r7, #15
 8001f96:	1df9      	adds	r1, r7, #7
 8001f98:	2364      	movs	r3, #100	; 0x64
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <W25qxx_Spi+0x28>)
 8001fa0:	f002 f8ab 	bl	80040fa <HAL_SPI_TransmitReceive>
	return ret;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000108 	.word	0x20000108

08001fb4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2110      	movs	r1, #16
 8001fce:	4813      	ldr	r0, [pc, #76]	; (800201c <W25qxx_ReadID+0x68>)
 8001fd0:	f001 f857 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001fd4:	209f      	movs	r0, #159	; 0x9f
 8001fd6:	f7ff ffd7 	bl	8001f88 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fda:	20a5      	movs	r0, #165	; 0xa5
 8001fdc:	f7ff ffd4 	bl	8001f88 <W25qxx_Spi>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fe4:	20a5      	movs	r0, #165	; 0xa5
 8001fe6:	f7ff ffcf 	bl	8001f88 <W25qxx_Spi>
 8001fea:	4603      	mov	r3, r0
 8001fec:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fee:	20a5      	movs	r0, #165	; 0xa5
 8001ff0:	f7ff ffca 	bl	8001f88 <W25qxx_Spi>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4807      	ldr	r0, [pc, #28]	; (800201c <W25qxx_ReadID+0x68>)
 8001ffe:	f001 f840 	bl	8003082 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4313      	orrs	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40010800 	.word	0x40010800

08002020 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2110      	movs	r1, #16
 800202a:	4816      	ldr	r0, [pc, #88]	; (8002084 <W25qxx_ReadUniqID+0x64>)
 800202c:	f001 f829 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002030:	204b      	movs	r0, #75	; 0x4b
 8002032:	f7ff ffa9 	bl	8001f88 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	e005      	b.n	8002048 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800203c:	20a5      	movs	r0, #165	; 0xa5
 800203e:	f7ff ffa3 	bl	8001f88 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	3301      	adds	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d9f6      	bls.n	800203c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	71bb      	strb	r3, [r7, #6]
 8002052:	e00b      	b.n	800206c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002054:	79bc      	ldrb	r4, [r7, #6]
 8002056:	20a5      	movs	r0, #165	; 0xa5
 8002058:	f7ff ff96 	bl	8001f88 <W25qxx_Spi>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <W25qxx_ReadUniqID+0x68>)
 8002062:	4423      	add	r3, r4
 8002064:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	3301      	adds	r3, #1
 800206a:	71bb      	strb	r3, [r7, #6]
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	2b07      	cmp	r3, #7
 8002070:	d9f0      	bls.n	8002054 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	2110      	movs	r1, #16
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <W25qxx_ReadUniqID+0x64>)
 8002078:	f001 f803 	bl	8003082 <HAL_GPIO_WritePin>
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	40010800 	.word	0x40010800
 8002088:	20000238 	.word	0x20000238

0800208c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	2110      	movs	r1, #16
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <W25qxx_WriteEnable+0x28>)
 8002096:	f000 fff4 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800209a:	2006      	movs	r0, #6
 800209c:	f7ff ff74 	bl	8001f88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2110      	movs	r1, #16
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <W25qxx_WriteEnable+0x28>)
 80020a6:	f000 ffec 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 fbda 	bl	8002864 <HAL_Delay>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40010800 	.word	0x40010800

080020b8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2110      	movs	r1, #16
 80020ca:	481c      	ldr	r0, [pc, #112]	; (800213c <W25qxx_ReadStatusRegister+0x84>)
 80020cc:	f000 ffd9 	bl	8003082 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10c      	bne.n	80020f0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80020d6:	2005      	movs	r0, #5
 80020d8:	f7ff ff56 	bl	8001f88 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020dc:	20a5      	movs	r0, #165	; 0xa5
 80020de:	f7ff ff53 	bl	8001f88 <W25qxx_Spi>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <W25qxx_ReadStatusRegister+0x88>)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80020ee:	e01b      	b.n	8002128 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d10c      	bne.n	8002110 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80020f6:	2035      	movs	r0, #53	; 0x35
 80020f8:	f7ff ff46 	bl	8001f88 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020fc:	20a5      	movs	r0, #165	; 0xa5
 80020fe:	f7ff ff43 	bl	8001f88 <W25qxx_Spi>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <W25qxx_ReadStatusRegister+0x88>)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800210e:	e00b      	b.n	8002128 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002110:	2015      	movs	r0, #21
 8002112:	f7ff ff39 	bl	8001f88 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002116:	20a5      	movs	r0, #165	; 0xa5
 8002118:	f7ff ff36 	bl	8001f88 <W25qxx_Spi>
 800211c:	4603      	mov	r3, r0
 800211e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <W25qxx_ReadStatusRegister+0x88>)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	2110      	movs	r1, #16
 800212c:	4803      	ldr	r0, [pc, #12]	; (800213c <W25qxx_ReadStatusRegister+0x84>)
 800212e:	f000 ffa8 	bl	8003082 <HAL_GPIO_WritePin>
	return status;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40010800 	.word	0x40010800
 8002140:	20000238 	.word	0x20000238

08002144 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002148:	2001      	movs	r0, #1
 800214a:	f000 fb8b 	bl	8002864 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	2110      	movs	r1, #16
 8002152:	480f      	ldr	r0, [pc, #60]	; (8002190 <W25qxx_WaitForWriteEnd+0x4c>)
 8002154:	f000 ff95 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002158:	2005      	movs	r0, #5
 800215a:	f7ff ff15 	bl	8001f88 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800215e:	20a5      	movs	r0, #165	; 0xa5
 8002160:	f7ff ff12 	bl	8001f88 <W25qxx_Spi>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <W25qxx_WaitForWriteEnd+0x50>)
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800216e:	2001      	movs	r0, #1
 8002170:	f000 fb78 	bl	8002864 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <W25qxx_WaitForWriteEnd+0x50>)
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ed      	bne.n	800215e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	2110      	movs	r1, #16
 8002186:	4802      	ldr	r0, [pc, #8]	; (8002190 <W25qxx_WaitForWriteEnd+0x4c>)
 8002188:	f000 ff7b 	bl	8003082 <HAL_GPIO_WritePin>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010800 	.word	0x40010800
 8002194:	20000238 	.word	0x20000238

08002198 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800219e:	4b65      	ldr	r3, [pc, #404]	; (8002334 <W25qxx_Init+0x19c>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80021a6:	e002      	b.n	80021ae <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f000 fb5b 	bl	8002864 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80021ae:	f000 fb4f 	bl	8002850 <HAL_GetTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b63      	cmp	r3, #99	; 0x63
 80021b6:	d9f7      	bls.n	80021a8 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2110      	movs	r1, #16
 80021bc:	485e      	ldr	r0, [pc, #376]	; (8002338 <W25qxx_Init+0x1a0>)
 80021be:	f000 ff60 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80021c2:	2064      	movs	r0, #100	; 0x64
 80021c4:	f000 fb4e 	bl	8002864 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80021c8:	f7ff fef4 	bl	8001fb4 <W25qxx_ReadID>
 80021cc:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3b11      	subs	r3, #17
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d86c      	bhi.n	80022b2 <W25qxx_Init+0x11a>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <W25qxx_Init+0x48>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080022a5 	.word	0x080022a5
 80021e4:	08002297 	.word	0x08002297
 80021e8:	08002289 	.word	0x08002289
 80021ec:	0800227b 	.word	0x0800227b
 80021f0:	0800226d 	.word	0x0800226d
 80021f4:	0800225f 	.word	0x0800225f
 80021f8:	08002251 	.word	0x08002251
 80021fc:	08002241 	.word	0x08002241
 8002200:	08002231 	.word	0x08002231
 8002204:	080022b3 	.word	0x080022b3
 8002208:	080022b3 	.word	0x080022b3
 800220c:	080022b3 	.word	0x080022b3
 8002210:	080022b3 	.word	0x080022b3
 8002214:	080022b3 	.word	0x080022b3
 8002218:	080022b3 	.word	0x080022b3
 800221c:	08002221 	.word	0x08002221
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <W25qxx_Init+0x19c>)
 8002222:	220a      	movs	r2, #10
 8002224:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <W25qxx_Init+0x19c>)
 8002228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800222e:	e046      	b.n	80022be <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <W25qxx_Init+0x19c>)
 8002232:	2209      	movs	r2, #9
 8002234:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002236:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <W25qxx_Init+0x19c>)
 8002238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800223e:	e03e      	b.n	80022be <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002240:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <W25qxx_Init+0x19c>)
 8002242:	2208      	movs	r2, #8
 8002244:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <W25qxx_Init+0x19c>)
 8002248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800224e:	e036      	b.n	80022be <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <W25qxx_Init+0x19c>)
 8002252:	2207      	movs	r2, #7
 8002254:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <W25qxx_Init+0x19c>)
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800225c:	e02f      	b.n	80022be <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <W25qxx_Init+0x19c>)
 8002260:	2206      	movs	r2, #6
 8002262:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <W25qxx_Init+0x19c>)
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800226a:	e028      	b.n	80022be <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <W25qxx_Init+0x19c>)
 800226e:	2205      	movs	r2, #5
 8002270:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <W25qxx_Init+0x19c>)
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002278:	e021      	b.n	80022be <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <W25qxx_Init+0x19c>)
 800227c:	2204      	movs	r2, #4
 800227e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <W25qxx_Init+0x19c>)
 8002282:	2210      	movs	r2, #16
 8002284:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002286:	e01a      	b.n	80022be <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <W25qxx_Init+0x19c>)
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <W25qxx_Init+0x19c>)
 8002290:	2208      	movs	r2, #8
 8002292:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002294:	e013      	b.n	80022be <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <W25qxx_Init+0x19c>)
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <W25qxx_Init+0x19c>)
 800229e:	2204      	movs	r2, #4
 80022a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80022a2:	e00c      	b.n	80022be <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <W25qxx_Init+0x19c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <W25qxx_Init+0x19c>)
 80022ac:	2202      	movs	r2, #2
 80022ae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80022b0:	e005      	b.n	80022be <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <W25qxx_Init+0x19c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e036      	b.n	800232c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <W25qxx_Init+0x19c>)
 80022c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <W25qxx_Init+0x19c>)
 80022c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022cc:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <W25qxx_Init+0x19c>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <W25qxx_Init+0x19c>)
 80022d6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <W25qxx_Init+0x19c>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <W25qxx_Init+0x19c>)
 80022de:	6912      	ldr	r2, [r2, #16]
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <W25qxx_Init+0x19c>)
 80022e6:	8952      	ldrh	r2, [r2, #10]
 80022e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ec:	4a11      	ldr	r2, [pc, #68]	; (8002334 <W25qxx_Init+0x19c>)
 80022ee:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <W25qxx_Init+0x19c>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <W25qxx_Init+0x19c>)
 80022f8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <W25qxx_Init+0x19c>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <W25qxx_Init+0x19c>)
 8002300:	6912      	ldr	r2, [r2, #16]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	0a9b      	lsrs	r3, r3, #10
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <W25qxx_Init+0x19c>)
 800230a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800230c:	f7ff fe88 	bl	8002020 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff fed1 	bl	80020b8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002316:	2002      	movs	r0, #2
 8002318:	f7ff fece 	bl	80020b8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800231c:	2003      	movs	r0, #3
 800231e:	f7ff fecb 	bl	80020b8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <W25qxx_Init+0x19c>)
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000238 	.word	0x20000238
 8002338:	40010800 	.word	0x40010800

0800233c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002344:	e002      	b.n	800234c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fa8c 	bl	8002864 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <W25qxx_EraseSector+0xa8>)
 800234e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002352:	2b01      	cmp	r3, #1
 8002354:	d0f7      	beq.n	8002346 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <W25qxx_EraseSector+0xa8>)
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800235e:	f7ff fef1 	bl	8002144 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <W25qxx_EraseSector+0xa8>)
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800236e:	f7ff fe8d 	bl	800208c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2110      	movs	r1, #16
 8002376:	481c      	ldr	r0, [pc, #112]	; (80023e8 <W25qxx_EraseSector+0xac>)
 8002378:	f000 fe83 	bl	8003082 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <W25qxx_EraseSector+0xa8>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d909      	bls.n	8002398 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8002384:	2021      	movs	r0, #33	; 0x21
 8002386:	f7ff fdff 	bl	8001f88 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0e1b      	lsrs	r3, r3, #24
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fdf9 	bl	8001f88 <W25qxx_Spi>
 8002396:	e002      	b.n	800239e <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8002398:	2020      	movs	r0, #32
 800239a:	f7ff fdf5 	bl	8001f88 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fdef 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fde9 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fde4 	bl	8001f88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2110      	movs	r1, #16
 80023c4:	4808      	ldr	r0, [pc, #32]	; (80023e8 <W25qxx_EraseSector+0xac>)
 80023c6:	f000 fe5c 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80023ca:	f7ff febb 	bl	8002144 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f000 fa48 	bl	8002864 <HAL_Delay>
	w25qxx.Lock = 0;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <W25qxx_EraseSector+0xa8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000238 	.word	0x20000238
 80023e8:	40010800 	.word	0x40010800

080023ec <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <W25qxx_SectorToPage+0x24>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <W25qxx_SectorToPage+0x24>)
 8002400:	8952      	ldrh	r2, [r2, #10]
 8002402:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000238 	.word	0x20000238

08002414 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002422:	e002      	b.n	800242a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002424:	2001      	movs	r0, #1
 8002426:	f000 fa1d 	bl	8002864 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <W25qxx_WritePage+0xfc>)
 800242c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002430:	2b01      	cmp	r3, #1
 8002432:	d0f7      	beq.n	8002424 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <W25qxx_WritePage+0xfc>)
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <W25qxx_WritePage+0xfc>)
 8002444:	8952      	ldrh	r2, [r2, #10]
 8002446:	4293      	cmp	r3, r2
 8002448:	d802      	bhi.n	8002450 <W25qxx_WritePage+0x3c>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <W25qxx_WritePage+0xfc>)
 8002452:	895b      	ldrh	r3, [r3, #10]
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <W25qxx_WritePage+0xfc>)
 8002464:	8952      	ldrh	r2, [r2, #10]
 8002466:	4293      	cmp	r3, r2
 8002468:	d905      	bls.n	8002476 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800246a:	4b29      	ldr	r3, [pc, #164]	; (8002510 <W25qxx_WritePage+0xfc>)
 800246c:	895b      	ldrh	r3, [r3, #10]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002476:	f7ff fe65 	bl	8002144 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800247a:	f7ff fe07 	bl	800208c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	2110      	movs	r1, #16
 8002482:	4824      	ldr	r0, [pc, #144]	; (8002514 <W25qxx_WritePage+0x100>)
 8002484:	f000 fdfd 	bl	8003082 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <W25qxx_WritePage+0xfc>)
 800248a:	895b      	ldrh	r3, [r3, #10]
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <W25qxx_WritePage+0xfc>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d909      	bls.n	80024b6 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80024a2:	2012      	movs	r0, #18
 80024a4:	f7ff fd70 	bl	8001f88 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	0e1b      	lsrs	r3, r3, #24
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fd6a 	bl	8001f88 <W25qxx_Spi>
 80024b4:	e002      	b.n	80024bc <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7ff fd66 	bl	8001f88 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fd60 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fd5a 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd55 	bl	8001f88 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	480c      	ldr	r0, [pc, #48]	; (8002518 <W25qxx_WritePage+0x104>)
 80024e8:	f001 fbac 	bl	8003c44 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	2110      	movs	r1, #16
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <W25qxx_WritePage+0x100>)
 80024f2:	f000 fdc6 	bl	8003082 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80024f6:	f7ff fe25 	bl	8002144 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f000 f9b2 	bl	8002864 <HAL_Delay>
	w25qxx.Lock = 0;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <W25qxx_WritePage+0xfc>)
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000238 	.word	0x20000238
 8002514:	40010800 	.word	0x40010800
 8002518:	20000108 	.word	0x20000108

0800251c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <W25qxx_WriteSector+0xc0>)
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d802      	bhi.n	800253a <W25qxx_WriteSector+0x1e>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <W25qxx_WriteSector+0xc0>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <W25qxx_WriteSector+0xc0>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d243      	bcs.n	80025d2 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	441a      	add	r2, r3
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <W25qxx_WriteSector+0xc0>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d905      	bls.n	8002564 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <W25qxx_WriteSector+0xc0>)
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e001      	b.n	8002568 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002568:	68b8      	ldr	r0, [r7, #8]
 800256a:	f7ff ff3f 	bl	80023ec <W25qxx_SectorToPage>
 800256e:	4602      	mov	r2, r0
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <W25qxx_WriteSector+0xc0>)
 8002572:	895b      	ldrh	r3, [r3, #10]
 8002574:	4619      	mov	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	fbb3 f3f1 	udiv	r3, r3, r1
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <W25qxx_WriteSector+0xc0>)
 8002582:	895b      	ldrh	r3, [r3, #10]
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	fbb3 f1f2 	udiv	r1, r3, r2
 800258c:	fb01 f202 	mul.w	r2, r1, r2
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	69f9      	ldr	r1, [r7, #28]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff ff3a 	bl	8002414 <W25qxx_WritePage>
		StartPage++;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <W25qxx_WriteSector+0xc0>)
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	461a      	mov	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1a9a      	subs	r2, r3, r2
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <W25qxx_WriteSector+0xc0>)
 80025b8:	895b      	ldrh	r3, [r3, #10]
 80025ba:	461a      	mov	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dce1      	bgt.n	8002594 <W25qxx_WriteSector+0x78>
 80025d0:	e000      	b.n	80025d4 <W25qxx_WriteSector+0xb8>
		return;
 80025d2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000238 	.word	0x20000238

080025e0 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80025ee:	e002      	b.n	80025f6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f000 f937 	bl	8002864 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 80025f8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d0f7      	beq.n	80025f0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 800260a:	895b      	ldrh	r3, [r3, #10]
 800260c:	461a      	mov	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	4293      	cmp	r3, r2
 8002612:	d802      	bhi.n	800261a <W25qxx_ReadPage+0x3a>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 800261c:	895b      	ldrh	r3, [r3, #10]
 800261e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 8002628:	8952      	ldrh	r2, [r2, #10]
 800262a:	4293      	cmp	r3, r2
 800262c:	d905      	bls.n	800263a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 8002630:	895b      	ldrh	r3, [r3, #10]
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 800263c:	895b      	ldrh	r3, [r3, #10]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	2110      	movs	r1, #16
 8002650:	4820      	ldr	r0, [pc, #128]	; (80026d4 <W25qxx_ReadPage+0xf4>)
 8002652:	f000 fd16 	bl	8003082 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d909      	bls.n	8002672 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800265e:	200c      	movs	r0, #12
 8002660:	f7ff fc92 	bl	8001f88 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	0e1b      	lsrs	r3, r3, #24
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fc8c 	bl	8001f88 <W25qxx_Spi>
 8002670:	e002      	b.n	8002678 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002672:	200b      	movs	r0, #11
 8002674:	f7ff fc88 	bl	8001f88 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	0c1b      	lsrs	r3, r3, #16
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fc82 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fc7c 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fc77 	bl	8001f88 <W25qxx_Spi>
	W25qxx_Spi(0);
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff fc74 	bl	8001f88 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	2364      	movs	r3, #100	; 0x64
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <W25qxx_ReadPage+0xf8>)
 80026aa:	f001 fc0e 	bl	8003eca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	2110      	movs	r1, #16
 80026b2:	4808      	ldr	r0, [pc, #32]	; (80026d4 <W25qxx_ReadPage+0xf4>)
 80026b4:	f000 fce5 	bl	8003082 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f000 f8d3 	bl	8002864 <HAL_Delay>
	w25qxx.Lock = 0;
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <W25qxx_ReadPage+0xf0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000238 	.word	0x20000238
 80026d4:	40010800 	.word	0x40010800
 80026d8:	20000108 	.word	0x20000108

080026dc <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <W25qxx_ReadSector+0xc0>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d802      	bhi.n	80026fa <W25qxx_ReadSector+0x1e>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <W25qxx_ReadSector+0xc0>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <W25qxx_ReadSector+0xc0>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d243      	bcs.n	8002792 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	441a      	add	r2, r3
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <W25qxx_ReadSector+0xc0>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d905      	bls.n	8002724 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <W25qxx_ReadSector+0xc0>)
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e001      	b.n	8002728 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f7ff fe5f 	bl	80023ec <W25qxx_SectorToPage>
 800272e:	4602      	mov	r2, r0
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <W25qxx_ReadSector+0xc0>)
 8002732:	895b      	ldrh	r3, [r3, #10]
 8002734:	4619      	mov	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	fbb3 f3f1 	udiv	r3, r3, r1
 800273c:	4413      	add	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <W25qxx_ReadSector+0xc0>)
 8002742:	895b      	ldrh	r3, [r3, #10]
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	fbb3 f1f2 	udiv	r1, r3, r2
 800274c:	fb01 f202 	mul.w	r2, r1, r2
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff ff40 	bl	80025e0 <W25qxx_ReadPage>
		StartPage++;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3301      	adds	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <W25qxx_ReadSector+0xc0>)
 8002768:	895b      	ldrh	r3, [r3, #10]
 800276a:	461a      	mov	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1a9a      	subs	r2, r3, r2
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <W25qxx_ReadSector+0xc0>)
 8002778:	895b      	ldrh	r3, [r3, #10]
 800277a:	461a      	mov	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	dce1      	bgt.n	8002754 <W25qxx_ReadSector+0x78>
 8002790:	e000      	b.n	8002794 <W25qxx_ReadSector+0xb8>
		return;
 8002792:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000238 	.word	0x20000238

080027a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_Init+0x28>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_Init+0x28>)
 80027aa:	f043 0310 	orr.w	r3, r3, #16
 80027ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 f947 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b6:	200f      	movs	r0, #15
 80027b8:	f000 f808 	bl	80027cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027bc:	f7ff fa58 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x54>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x58>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f95f 	bl	8002aae <HAL_SYSTICK_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00e      	b.n	8002818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0f      	cmp	r3, #15
 80027fe:	d80a      	bhi.n	8002816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002800:	2200      	movs	r2, #0
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f000 f927 	bl	8002a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <HAL_InitTick+0x5c>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000000 	.word	0x20000000
 8002824:	20000008 	.word	0x20000008
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_IncTick+0x1c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_IncTick+0x20>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a03      	ldr	r2, [pc, #12]	; (800284c <HAL_IncTick+0x20>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000008 	.word	0x20000008
 800284c:	20000260 	.word	0x20000260

08002850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b02      	ldr	r3, [pc, #8]	; (8002860 <HAL_GetTick+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000260 	.word	0x20000260

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff fff0 	bl	8002850 <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_Delay+0x44>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800288a:	bf00      	nop
 800288c:	f7ff ffe0 	bl	8002850 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <__NVIC_EnableIRQ+0x34>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff90 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff2d 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff42 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff90 	bl	800299c <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff35 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d008      	beq.n	8002af0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e020      	b.n	8002b32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020e 	bic.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d005      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2204      	movs	r2, #4
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e0d6      	b.n	8002d0e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 020e 	bic.w	r2, r2, #14
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_DMA_Abort_IT+0x1dc>)
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d958      	bls.n	8002c3e <HAL_DMA_Abort_IT+0x102>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <HAL_DMA_Abort_IT+0x1e0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04f      	beq.n	8002c36 <HAL_DMA_Abort_IT+0xfa>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <HAL_DMA_Abort_IT+0x1e4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d048      	beq.n	8002c32 <HAL_DMA_Abort_IT+0xf6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5f      	ldr	r2, [pc, #380]	; (8002d24 <HAL_DMA_Abort_IT+0x1e8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xf0>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_DMA_Abort_IT+0x1ec>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d038      	beq.n	8002c26 <HAL_DMA_Abort_IT+0xea>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_DMA_Abort_IT+0x1f0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d030      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xe4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_DMA_Abort_IT+0x1f4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d028      	beq.n	8002c1a <HAL_DMA_Abort_IT+0xde>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	; (8002d18 <HAL_DMA_Abort_IT+0x1dc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d020      	beq.n	8002c14 <HAL_DMA_Abort_IT+0xd8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_DMA_Abort_IT+0x1f8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d019      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xd4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <HAL_DMA_Abort_IT+0x1fc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d012      	beq.n	8002c0c <HAL_DMA_Abort_IT+0xd0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_DMA_Abort_IT+0x200>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00a      	beq.n	8002c06 <HAL_DMA_Abort_IT+0xca>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_DMA_Abort_IT+0x204>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d102      	bne.n	8002c00 <HAL_DMA_Abort_IT+0xc4>
 8002bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfe:	e01b      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c04:	e018      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e015      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	e013      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e011      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c18:	e00e      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c1e:	e00b      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	e008      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2a:	e005      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c30:	e002      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c32:	2310      	movs	r3, #16
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_Abort_IT+0xfc>
 8002c36:	2301      	movs	r3, #1
 8002c38:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <HAL_DMA_Abort_IT+0x208>)
 8002c3a:	6053      	str	r3, [r2, #4]
 8002c3c:	e057      	b.n	8002cee <HAL_DMA_Abort_IT+0x1b2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a36      	ldr	r2, [pc, #216]	; (8002d1c <HAL_DMA_Abort_IT+0x1e0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04f      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x1ac>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <HAL_DMA_Abort_IT+0x1e4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d048      	beq.n	8002ce4 <HAL_DMA_Abort_IT+0x1a8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <HAL_DMA_Abort_IT+0x1e8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_Abort_IT+0x1a2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_DMA_Abort_IT+0x1ec>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d038      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x19c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <HAL_DMA_Abort_IT+0x1f0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d030      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x196>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_DMA_Abort_IT+0x1f4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d028      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x190>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <HAL_DMA_Abort_IT+0x1dc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d020      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0x18a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <HAL_DMA_Abort_IT+0x1f8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0x186>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <HAL_DMA_Abort_IT+0x1fc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_Abort_IT+0x182>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_DMA_Abort_IT+0x200>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x17c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_DMA_Abort_IT+0x204>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <HAL_DMA_Abort_IT+0x176>
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	e01b      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cb6:	e018      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cbc:	e015      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	e013      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e011      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cca:	e00e      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002ccc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cd0:	e00b      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cd6:	e008      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce2:	e002      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	e000      	b.n	8002cea <HAL_DMA_Abort_IT+0x1ae>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_DMA_Abort_IT+0x20c>)
 8002cec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
    } 
  }
  return status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40020080 	.word	0x40020080
 8002d1c:	40020008 	.word	0x40020008
 8002d20:	4002001c 	.word	0x4002001c
 8002d24:	40020030 	.word	0x40020030
 8002d28:	40020044 	.word	0x40020044
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	4002006c 	.word	0x4002006c
 8002d34:	40020408 	.word	0x40020408
 8002d38:	4002041c 	.word	0x4002041c
 8002d3c:	40020430 	.word	0x40020430
 8002d40:	40020444 	.word	0x40020444
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	e169      	b.n	8003034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d60:	2201      	movs	r2, #1
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8158 	bne.w	800302e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a9a      	ldr	r2, [pc, #616]	; (8002fec <HAL_GPIO_Init+0x2a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d05e      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002d88:	4a98      	ldr	r2, [pc, #608]	; (8002fec <HAL_GPIO_Init+0x2a0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d875      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002d8e:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d058      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002d94:	4a96      	ldr	r2, [pc, #600]	; (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d86f      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002d9a:	4a96      	ldr	r2, [pc, #600]	; (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d052      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002da0:	4a94      	ldr	r2, [pc, #592]	; (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d869      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002da6:	4a94      	ldr	r2, [pc, #592]	; (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04c      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002dac:	4a92      	ldr	r2, [pc, #584]	; (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d863      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002db2:	4a92      	ldr	r2, [pc, #584]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d046      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002db8:	4a90      	ldr	r2, [pc, #576]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d85d      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002dbe:	2b12      	cmp	r3, #18
 8002dc0:	d82a      	bhi.n	8002e18 <HAL_GPIO_Init+0xcc>
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d859      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <HAL_GPIO_Init+0x80>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002e47 	.word	0x08002e47
 8002dd0:	08002e21 	.word	0x08002e21
 8002dd4:	08002e33 	.word	0x08002e33
 8002dd8:	08002e75 	.word	0x08002e75
 8002ddc:	08002e7b 	.word	0x08002e7b
 8002de0:	08002e7b 	.word	0x08002e7b
 8002de4:	08002e7b 	.word	0x08002e7b
 8002de8:	08002e7b 	.word	0x08002e7b
 8002dec:	08002e7b 	.word	0x08002e7b
 8002df0:	08002e7b 	.word	0x08002e7b
 8002df4:	08002e7b 	.word	0x08002e7b
 8002df8:	08002e7b 	.word	0x08002e7b
 8002dfc:	08002e7b 	.word	0x08002e7b
 8002e00:	08002e7b 	.word	0x08002e7b
 8002e04:	08002e7b 	.word	0x08002e7b
 8002e08:	08002e7b 	.word	0x08002e7b
 8002e0c:	08002e7b 	.word	0x08002e7b
 8002e10:	08002e29 	.word	0x08002e29
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	4a79      	ldr	r2, [pc, #484]	; (8003000 <HAL_GPIO_Init+0x2b4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e1e:	e02c      	b.n	8002e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	623b      	str	r3, [r7, #32]
          break;
 8002e26:	e029      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]
          break;
 8002e30:	e024      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	3308      	adds	r3, #8
 8002e38:	623b      	str	r3, [r7, #32]
          break;
 8002e3a:	e01f      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	330c      	adds	r3, #12
 8002e42:	623b      	str	r3, [r7, #32]
          break;
 8002e44:	e01a      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e013      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	611a      	str	r2, [r3, #16]
          break;
 8002e66:	e009      	b.n	8002e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	615a      	str	r2, [r3, #20]
          break;
 8002e72:	e003      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          break;
 8002e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2bff      	cmp	r3, #255	; 0xff
 8002e80:	d801      	bhi.n	8002e86 <HAL_GPIO_Init+0x13a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	e001      	b.n	8002e8a <HAL_GPIO_Init+0x13e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2bff      	cmp	r3, #255	; 0xff
 8002e90:	d802      	bhi.n	8002e98 <HAL_GPIO_Init+0x14c>
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	e002      	b.n	8002e9e <HAL_GPIO_Init+0x152>
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	3b08      	subs	r3, #8
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	210f      	movs	r1, #15
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80b1 	beq.w	800302e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ecc:	4b4d      	ldr	r3, [pc, #308]	; (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	; (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_GPIO_Init+0x2b8>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee4:	4a48      	ldr	r2, [pc, #288]	; (8003008 <HAL_GPIO_Init+0x2bc>)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a40      	ldr	r2, [pc, #256]	; (800300c <HAL_GPIO_Init+0x2c0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_GPIO_Init+0x1ec>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <HAL_GPIO_Init+0x2c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00d      	beq.n	8002f34 <HAL_GPIO_Init+0x1e8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3e      	ldr	r2, [pc, #248]	; (8003014 <HAL_GPIO_Init+0x2c8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0x1e4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	; (8003018 <HAL_GPIO_Init+0x2cc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_GPIO_Init+0x1e0>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e006      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e004      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	f002 0203 	and.w	r2, r2, #3
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	4093      	lsls	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4a:	492f      	ldr	r1, [pc, #188]	; (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f64:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	492c      	ldr	r1, [pc, #176]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4928      	ldr	r1, [pc, #160]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	491e      	ldr	r1, [pc, #120]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4918      	ldr	r1, [pc, #96]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4914      	ldr	r1, [pc, #80]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d021      	beq.n	8003020 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e021      	b.n	800302e <HAL_GPIO_Init+0x2e2>
 8002fea:	bf00      	nop
 8002fec:	10320000 	.word	0x10320000
 8002ff0:	10310000 	.word	0x10310000
 8002ff4:	10220000 	.word	0x10220000
 8002ff8:	10210000 	.word	0x10210000
 8002ffc:	10120000 	.word	0x10120000
 8003000:	10110000 	.word	0x10110000
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000
 800300c:	40010800 	.word	0x40010800
 8003010:	40010c00 	.word	0x40010c00
 8003014:	40011000 	.word	0x40011000
 8003018:	40011400 	.word	0x40011400
 800301c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_GPIO_Init+0x304>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	43db      	mvns	r3, r3
 8003028:	4909      	ldr	r1, [pc, #36]	; (8003050 <HAL_GPIO_Init+0x304>)
 800302a:	4013      	ands	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	3301      	adds	r3, #1
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	f47f ae8e 	bne.w	8002d60 <HAL_GPIO_Init+0x14>
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	372c      	adds	r7, #44	; 0x2c
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40010400 	.word	0x40010400

08003054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e001      	b.n	8003076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	807b      	strh	r3, [r7, #2]
 800308e:	4613      	mov	r3, r2
 8003090:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003092:	787b      	ldrb	r3, [r7, #1]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003098:	887a      	ldrh	r2, [r7, #2]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800309e:	e003      	b.n	80030a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	041a      	lsls	r2, r3, #16
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	611a      	str	r2, [r3, #16]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e304      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8087 	beq.w	80031e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d4:	4b92      	ldr	r3, [pc, #584]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d00c      	beq.n	80030fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e0:	4b8f      	ldr	r3, [pc, #572]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d112      	bne.n	8003112 <HAL_RCC_OscConfig+0x5e>
 80030ec:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d10b      	bne.n	8003112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fa:	4b89      	ldr	r3, [pc, #548]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d06c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x12c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d168      	bne.n	80031e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e2de      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x76>
 800311c:	4b80      	ldr	r3, [pc, #512]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a7f      	ldr	r2, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e02e      	b.n	8003188 <HAL_RCC_OscConfig+0xd4>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7a      	ldr	r2, [pc, #488]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xd4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0xbc>
 8003156:	4b72      	ldr	r3, [pc, #456]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a71      	ldr	r2, [pc, #452]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6e      	ldr	r2, [pc, #440]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xd4>
 8003170:	4b6b      	ldr	r3, [pc, #428]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6a      	ldr	r2, [pc, #424]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a67      	ldr	r2, [pc, #412]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fb5e 	bl	8002850 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff fb5a 	bl	8002850 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e292      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xe4>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7ff fb4a 	bl	8002850 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff fb46 	bl	8002850 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e27e      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x10c>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ee:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031fa:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x18c>
 8003206:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x176>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e252      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4939      	ldr	r1, [pc, #228]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_OscConfig+0x270>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7ff faff 	bl	8002850 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7ff fafb 	bl	8002850 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e233      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4927      	ldr	r1, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCC_OscConfig+0x270>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7ff fade 	bl	8002850 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7ff fada 	bl	8002850 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e212      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03a      	beq.n	8003338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d019      	beq.n	80032fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7ff fabe 	bl	8002850 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7ff faba 	bl	8002850 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1f2      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f000 fc02 	bl	8003b00 <RCC_Delay>
 80032fc:	e01c      	b.n	8003338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7ff faa4 	bl	8002850 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330a:	e00f      	b.n	800332c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7ff faa0 	bl	8002850 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d908      	bls.n	800332c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1d8      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	42420000 	.word	0x42420000
 8003328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b9b      	ldr	r3, [pc, #620]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e9      	bne.n	800330c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a6 	beq.w	8003492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b94      	ldr	r3, [pc, #592]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b91      	ldr	r3, [pc, #580]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a90      	ldr	r2, [pc, #576]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]
 8003362:	4b8e      	ldr	r3, [pc, #568]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a87      	ldr	r2, [pc, #540]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7ff fa61 	bl	8002850 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7ff fa5d 	bl	8002850 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	; 0x64
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e195      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b7e      	ldr	r3, [pc, #504]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x312>
 80033b8:	4b78      	ldr	r3, [pc, #480]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	e02d      	b.n	8003422 <HAL_RCC_OscConfig+0x36e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x334>
 80033ce:	4b73      	ldr	r3, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a72      	ldr	r2, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	6213      	str	r3, [r2, #32]
 80033da:	4b70      	ldr	r3, [pc, #448]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a6f      	ldr	r2, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	e01c      	b.n	8003422 <HAL_RCC_OscConfig+0x36e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d10c      	bne.n	800340a <HAL_RCC_OscConfig+0x356>
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a66      	ldr	r2, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e00b      	b.n	8003422 <HAL_RCC_OscConfig+0x36e>
 800340a:	4b64      	ldr	r3, [pc, #400]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a63      	ldr	r2, [pc, #396]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d015      	beq.n	8003456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7ff fa11 	bl	8002850 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7ff fa0d 	bl	8002850 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e143      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b54      	ldr	r3, [pc, #336]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ee      	beq.n	8003432 <HAL_RCC_OscConfig+0x37e>
 8003454:	e014      	b.n	8003480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7ff f9fb 	bl	8002850 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7ff f9f7 	bl	8002850 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e12d      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4b45      	ldr	r3, [pc, #276]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4a44      	ldr	r2, [pc, #272]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003490:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 808c 	beq.w	80035b4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800349c:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d10e      	bne.n	80034c8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e103      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d14e      	bne.n	800356e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80034dc:	4b2f      	ldr	r3, [pc, #188]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0ef      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_RCC_OscConfig+0x4f0>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7ff f9ab 	bl	8002850 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034fe:	f7ff f9a7 	bl	8002850 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0df      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	491c      	ldr	r1, [pc, #112]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4918      	ldr	r1, [pc, #96]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_RCC_OscConfig+0x4f0>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7ff f983 	bl	8002850 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800354e:	f7ff f97f 	bl	8002850 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0b7      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x49a>
 800356c:	e022      	b.n	80035b4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_RCC_OscConfig+0x4e8>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x4f0>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7ff f966 	bl	8002850 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003588:	f7ff f962 	bl	8002850 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e09a      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e9      	bne.n	8003588 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8088 	beq.w	80036ce <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035be:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d068      	beq.n	800369c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d14d      	bne.n	800366e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b42      	ldr	r3, [pc, #264]	; (80036dc <HAL_RCC_OscConfig+0x628>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7ff f93a 	bl	8002850 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7ff f936 	bl	8002850 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e06e      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d10f      	bne.n	8003628 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4931      	ldr	r1, [pc, #196]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 8003612:	4313      	orrs	r3, r2
 8003614:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003616:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	492d      	ldr	r1, [pc, #180]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 8003624:	4313      	orrs	r3, r2
 8003626:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	430b      	orrs	r3, r1
 800363a:	4927      	ldr	r1, [pc, #156]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_RCC_OscConfig+0x628>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7ff f903 	bl	8002850 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7ff f8ff 	bl	8002850 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e037      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x59a>
 800366c:	e02f      	b.n	80036ce <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCC_OscConfig+0x628>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7ff f8ec 	bl	8002850 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7ff f8e8 	bl	8002850 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e020      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x5c8>
 800369a:	e018      	b.n	80036ce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e013      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x624>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	42420060 	.word	0x42420060

080036e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0d0      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0207 	bic.w	r2, r3, #7
 800370a:	4965      	ldr	r1, [pc, #404]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a58      	ldr	r2, [pc, #352]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003754:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a52      	ldr	r2, [pc, #328]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800375e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	494d      	ldr	r1, [pc, #308]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d040      	beq.n	8003800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d115      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e07f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e073      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06b      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4936      	ldr	r1, [pc, #216]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d0:	f7ff f83e 	bl	8002850 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7ff f83a 	bl	8002850 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e053      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d210      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0207 	bic.w	r2, r3, #7
 8003816:	4922      	ldr	r1, [pc, #136]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4916      	ldr	r1, [pc, #88]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	490e      	ldr	r1, [pc, #56]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386e:	f000 f821 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490a      	ldr	r1, [pc, #40]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1cc>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1d0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe ff9c 	bl	80027cc <HAL_InitTick>

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40021000 	.word	0x40021000
 80038a8:	08005d0c 	.word	0x08005d0c
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b092      	sub	sp, #72	; 0x48
 80038ba:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c0:	2300      	movs	r3, #0
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c4:	2300      	movs	r3, #0
 80038c6:	647b      	str	r3, [r7, #68]	; 0x44
 80038c8:	2300      	movs	r3, #0
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	633b      	str	r3, [r7, #48]	; 0x30
 80038d4:	2300      	movs	r3, #0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038d8:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d002      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x3a>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d003      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x40>
 80038ec:	e0c3      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ee:	4b67      	ldr	r3, [pc, #412]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80038f2:	e0c3      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80ac 	beq.w	8003a66 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4b5f      	ldr	r3, [pc, #380]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8003918:	5c9b      	ldrb	r3, [r3, r2]
 800391a:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800391c:	4b5a      	ldr	r3, [pc, #360]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 808c 	beq.w	8003a42 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	3301      	adds	r3, #1
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003938:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3302      	adds	r3, #2
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2200      	movs	r2, #0
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	627a      	str	r2, [r7, #36]	; 0x24
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	2200      	movs	r2, #0
 8003952:	4618      	mov	r0, r3
 8003954:	4611      	mov	r1, r2
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	fb00 f203 	mul.w	r2, r0, r3
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	fb03 f301 	mul.w	r3, r3, r1
 8003962:	4413      	add	r3, r2
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	fba2 4500 	umull	r4, r5, r2, r0
 800396a:	442b      	add	r3, r5
 800396c:	461d      	mov	r5, r3
 800396e:	4622      	mov	r2, r4
 8003970:	462b      	mov	r3, r5
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	0159      	lsls	r1, r3, #5
 800397c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003980:	0150      	lsls	r0, r2, #5
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	ebb2 0a04 	subs.w	sl, r2, r4
 800398a:	eb63 0b05 	sbc.w	fp, r3, r5
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800399a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800399e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a2:	ebb2 080a 	subs.w	r8, r2, sl
 80039a6:	eb63 090b 	sbc.w	r9, r3, fp
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039be:	4690      	mov	r8, r2
 80039c0:	4699      	mov	r9, r3
 80039c2:	eb18 0304 	adds.w	r3, r8, r4
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	eb49 0305 	adc.w	r3, r9, r5
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039da:	4629      	mov	r1, r5
 80039dc:	024b      	lsls	r3, r1, #9
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	4604      	mov	r4, r0
 80039e4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80039e8:	4601      	mov	r1, r0
 80039ea:	024a      	lsls	r2, r1, #9
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	2200      	movs	r2, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	617a      	str	r2, [r7, #20]
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2200      	movs	r2, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	60fa      	str	r2, [r7, #12]
 8003a00:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a04:	4622      	mov	r2, r4
 8003a06:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003a0a:	4645      	mov	r5, r8
 8003a0c:	fb05 f202 	mul.w	r2, r5, r2
 8003a10:	46cc      	mov	ip, r9
 8003a12:	4625      	mov	r5, r4
 8003a14:	461c      	mov	r4, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	fb03 f30c 	mul.w	r3, r3, ip
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4644      	mov	r4, r8
 8003a22:	fba2 2404 	umull	r2, r4, r2, r4
 8003a26:	61fc      	str	r4, [r7, #28]
 8003a28:	61ba      	str	r2, [r7, #24]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a34:	f7fc fbf6 	bl	8000224 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a40:	e007      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003a46:	fb03 f202 	mul.w	r2, r3, r2
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003a54:	7b5b      	ldrb	r3, [r3, #13]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8003a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	647b      	str	r3, [r7, #68]	; 0x44
 8003a64:	e004      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8003a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a72:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a74:	e002      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3748      	adds	r7, #72	; 0x48
 8003a82:	46bd      	mov	sp, r7
 8003a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	007a1200 	.word	0x007a1200
 8003a90:	08005d24 	.word	0x08005d24
 8003a94:	08005d34 	.word	0x08005d34
 8003a98:	003d0900 	.word	0x003d0900

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b02      	ldr	r3, [pc, #8]	; (8003aac <HAL_RCC_GetHCLKFreq+0x10>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	20000000 	.word	0x20000000

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab4:	f7ff fff2 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08005d1c 	.word	0x08005d1c

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003adc:	f7ff ffde 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08005d1c 	.word	0x08005d1c

08003b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <RCC_Delay+0x34>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <RCC_Delay+0x38>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a5b      	lsrs	r3, r3, #9
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b1c:	bf00      	nop
  }
  while (Delay --);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	60fa      	str	r2, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f9      	bne.n	8003b1c <RCC_Delay+0x1c>
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	20000000 	.word	0x20000000
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e076      	b.n	8003c3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5e:	d009      	beq.n	8003b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
 8003b66:	e005      	b.n	8003b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fe f89c 	bl	8001ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	ea42 0103 	orr.w	r1, r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	0c1a      	lsrs	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f002 0204 	and.w	r2, r2, #4
 8003c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_SPI_Transmit+0x22>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e12d      	b.n	8003ec2 <HAL_SPI_Transmit+0x27e>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c6e:	f7fe fdef 	bl	8002850 <HAL_GetTick>
 8003c72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d002      	beq.n	8003c8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
 8003c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c88:	e116      	b.n	8003eb8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_SPI_Transmit+0x52>
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c9a:	e10d      	b.n	8003eb8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce2:	d10f      	bne.n	8003d04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d007      	beq.n	8003d22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2a:	d14f      	bne.n	8003dcc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_Transmit+0xf6>
 8003d34:	8afb      	ldrh	r3, [r7, #22]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d142      	bne.n	8003dc0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d5e:	e02f      	b.n	8003dc0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d112      	bne.n	8003d94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	881a      	ldrh	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	1c9a      	adds	r2, r3, #2
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d92:	e015      	b.n	8003dc0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d94:	f7fe fd5c 	bl	8002850 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d803      	bhi.n	8003dac <HAL_SPI_Transmit+0x168>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d102      	bne.n	8003db2 <HAL_SPI_Transmit+0x16e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003dbe:	e07b      	b.n	8003eb8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ca      	bne.n	8003d60 <HAL_SPI_Transmit+0x11c>
 8003dca:	e050      	b.n	8003e6e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_Transmit+0x196>
 8003dd4:	8afb      	ldrh	r3, [r7, #22]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d144      	bne.n	8003e64 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e00:	e030      	b.n	8003e64 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d113      	bne.n	8003e38 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e36:	e015      	b.n	8003e64 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e38:	f7fe fd0a 	bl	8002850 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d803      	bhi.n	8003e50 <HAL_SPI_Transmit+0x20c>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d102      	bne.n	8003e56 <HAL_SPI_Transmit+0x212>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e62:	e029      	b.n	8003eb8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1c9      	bne.n	8003e02 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fbcc 	bl	8004610 <SPI_EndRxTxTransaction>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e003      	b.n	8003eb8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af02      	add	r7, sp, #8
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eee:	e0fb      	b.n	80040e8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef8:	d112      	bne.n	8003f20 <HAL_SPI_Receive+0x56>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10e      	bne.n	8003f20 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2204      	movs	r2, #4
 8003f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8ef 	bl	80040fa <HAL_SPI_TransmitReceive>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e0e8      	b.n	80040f2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_SPI_Receive+0x64>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0e1      	b.n	80040f2 <HAL_SPI_Receive+0x228>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f36:	f7fe fc8b 	bl	8002850 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_SPI_Receive+0x7e>
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f4c:	e0cc      	b.n	80040e8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2204      	movs	r2, #4
 8003f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	d10f      	bne.n	8003fb6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d007      	beq.n	8003fd4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d16a      	bne.n	80040b2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fdc:	e032      	b.n	8004044 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d115      	bne.n	8004018 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f103 020c 	add.w	r2, r3, #12
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004016:	e015      	b.n	8004044 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004018:	f7fe fc1a 	bl	8002850 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d803      	bhi.n	8004030 <HAL_SPI_Receive+0x166>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d102      	bne.n	8004036 <HAL_SPI_Receive+0x16c>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004042:	e051      	b.n	80040e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1c7      	bne.n	8003fde <HAL_SPI_Receive+0x114>
 800404e:	e035      	b.n	80040bc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d113      	bne.n	8004086 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	b292      	uxth	r2, r2
 800406a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004084:	e015      	b.n	80040b2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004086:	f7fe fbe3 	bl	8002850 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d803      	bhi.n	800409e <HAL_SPI_Receive+0x1d4>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_Receive+0x1da>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040b0:	e01a      	b.n	80040e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1c9      	bne.n	8004050 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fa53 	bl	800456c <SPI_EndRxTransaction>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
 80040de:	e003      	b.n	80040e8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b08c      	sub	sp, #48	; 0x30
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x26>
 800411c:	2302      	movs	r3, #2
 800411e:	e198      	b.n	8004452 <HAL_SPI_TransmitReceive+0x358>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004128:	f7fe fb92 	bl	8002850 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004146:	2b01      	cmp	r3, #1
 8004148:	d00f      	beq.n	800416a <HAL_SPI_TransmitReceive+0x70>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004150:	d107      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x68>
 800415a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004168:	e16d      	b.n	8004446 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_SPI_TransmitReceive+0x82>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_SPI_TransmitReceive+0x82>
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004182:	e160      	b.n	8004446 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b04      	cmp	r3, #4
 800418e:	d003      	beq.n	8004198 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2205      	movs	r2, #5
 8004194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	887a      	ldrh	r2, [r7, #2]
 80041c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d007      	beq.n	80041ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d17c      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x10a>
 80041fe:	8b7b      	ldrh	r3, [r7, #26]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d16a      	bne.n	80042da <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004228:	e057      	b.n	80042da <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	d11b      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x176>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x176>
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d113      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	881a      	ldrh	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	1c9a      	adds	r2, r3, #2
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d119      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x1b8>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d014      	beq.n	80042b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	b292      	uxth	r2, r2
 8004294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042ae:	2301      	movs	r3, #1
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042b2:	f7fe facd 	bl	8002850 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042be:	429a      	cmp	r2, r3
 80042c0:	d80b      	bhi.n	80042da <HAL_SPI_TransmitReceive+0x1e0>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d007      	beq.n	80042da <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042d8:	e0b5      	b.n	8004446 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1a2      	bne.n	800422a <HAL_SPI_TransmitReceive+0x130>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d19d      	bne.n	800422a <HAL_SPI_TransmitReceive+0x130>
 80042ee:	e080      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x204>
 80042f8:	8b7b      	ldrh	r3, [r7, #26]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d16f      	bne.n	80043de <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004324:	e05b      	b.n	80043de <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d11c      	bne.n	800436e <HAL_SPI_TransmitReceive+0x274>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <HAL_SPI_TransmitReceive+0x274>
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d114      	bne.n	800436e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d119      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2b6>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d014      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ac:	2301      	movs	r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043b0:	f7fe fa4e 	bl	8002850 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043bc:	429a      	cmp	r2, r3
 80043be:	d803      	bhi.n	80043c8 <HAL_SPI_TransmitReceive+0x2ce>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x2d4>
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80043dc:	e033      	b.n	8004446 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d19e      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x22c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d199      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f90a 	bl	8004610 <SPI_EndRxTxTransaction>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800440e:	e01a      	b.n	8004446 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443c:	e003      	b.n	8004446 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800444e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004452:	4618      	mov	r0, r3
 8004454:	3730      	adds	r7, #48	; 0x30
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800446c:	f7fe f9f0 	bl	8002850 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4413      	add	r3, r2
 800447a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800447c:	f7fe f9e8 	bl	8002850 <HAL_GetTick>
 8004480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	015b      	lsls	r3, r3, #5
 8004488:	0d1b      	lsrs	r3, r3, #20
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004492:	e054      	b.n	800453e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d050      	beq.n	800453e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800449c:	f7fe f9d8 	bl	8002850 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d902      	bls.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d13d      	bne.n	800452e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ca:	d111      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	d004      	beq.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d107      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f8:	d10f      	bne.n	800451a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e017      	b.n	800455e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3b01      	subs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d19b      	bne.n	8004494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000000 	.word	0x20000000

0800456c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004580:	d111      	bne.n	80045a6 <SPI_EndRxTransaction+0x3a>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458a:	d004      	beq.n	8004596 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004594:	d107      	bne.n	80045a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ae:	d117      	bne.n	80045e0 <SPI_EndRxTransaction+0x74>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d112      	bne.n	80045e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2101      	movs	r1, #1
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff ff49 	bl	800445c <SPI_WaitFlagStateUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01a      	beq.n	8004606 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e013      	b.n	8004608 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	2180      	movs	r1, #128	; 0x80
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ff36 	bl	800445c <SPI_WaitFlagStateUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e000      	b.n	8004608 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff ff18 	bl	800445c <SPI_WaitFlagStateUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e000      	b.n	8004644 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e041      	b.n	80046e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fb74 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f000 fa7c 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d001      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e03f      	b.n	8004784 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_TIM_Base_Start_IT+0xa4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d00e      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x62>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a17      	ldr	r2, [pc, #92]	; (8004794 <HAL_TIM_Base_Start_IT+0xa8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x62>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a16      	ldr	r2, [pc, #88]	; (8004798 <HAL_TIM_Base_Start_IT+0xac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x62>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a14      	ldr	r2, [pc, #80]	; (800479c <HAL_TIM_Base_Start_IT+0xb0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d111      	bne.n	8004772 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d010      	beq.n	8004782 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	e007      	b.n	8004782 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00

080047a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0202 	mvn.w	r2, #2
 80047cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9b4 	bl	8004b50 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f9a7 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f9b6 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b04      	cmp	r3, #4
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0204 	mvn.w	r2, #4
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f98a 	bl	8004b50 <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f97d 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f98c 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b08      	cmp	r3, #8
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0208 	mvn.w	r2, #8
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2204      	movs	r2, #4
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f960 	bl	8004b50 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f953 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f962 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0210 	mvn.w	r2, #16
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2208      	movs	r2, #8
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f936 	bl	8004b50 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f929 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f938 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d10e      	bne.n	8004924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d107      	bne.n	8004924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0201 	mvn.w	r2, #1
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fb fe12 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d10e      	bne.n	8004950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d107      	bne.n	8004950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa8d 	bl	8004e6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d10e      	bne.n	800497c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d107      	bne.n	800497c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8fc 	bl	8004b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b20      	cmp	r3, #32
 8004988:	d10e      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b20      	cmp	r3, #32
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0220 	mvn.w	r2, #32
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa58 	bl	8004e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b4      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0xd4>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x172>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b70      	cmp	r3, #112	; 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xa6>
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b60      	cmp	r3, #96	; 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x11a>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b50      	cmp	r3, #80	; 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xfa>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x13a>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b30      	cmp	r3, #48	; 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f000 f972 	bl	8004d4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f000 f95b 	bl	8004d4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 f8d2 	bl	8004c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	; 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f929 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 f8f0 	bl	8004cbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	; 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f919 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 f8b2 	bl	8004c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f909 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 f900 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
	...

08004b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2d      	ldr	r2, [pc, #180]	; (8004c50 <TIM_Base_SetConfig+0xc8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <TIM_Base_SetConfig+0xcc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <TIM_Base_SetConfig+0xc8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0x72>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0x72>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <TIM_Base_SetConfig+0xcc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0x72>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1a      	ldr	r2, [pc, #104]	; (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0x72>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <TIM_Base_SetConfig+0xc8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00

08004c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 030a 	bic.w	r3, r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0210 	bic.w	r2, r3, #16
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	031b      	lsls	r3, r3, #12
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f043 0307 	orr.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b087      	sub	sp, #28
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	021a      	lsls	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e04b      	b.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d00e      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10c      	bne.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00

08004e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e042      	b.n	8004f14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fc ff9c 	bl	8001de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fd5d 	bl	8005980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d121      	bne.n	8004f7a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_UART_Transmit_IT+0x26>
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01a      	b.n	8004f7c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2221      	movs	r2, #33	; 0x21
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	4613      	mov	r3, r2
 8004f92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d112      	bne.n	8004fc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_UART_Receive_IT+0x26>
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e00b      	b.n	8004fc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fb0b 	bl	80055d8 <UART_Start_Receive_IT>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	e000      	b.n	8004fc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fc6:	2302      	movs	r3, #2
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d14a      	bne.n	8005080 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e043      	b.n	8005082 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	461a      	mov	r2, r3
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fae3 	bl	80055d8 <UART_Start_Receive_IT>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800501c:	2b00      	cmp	r3, #0
 800501e:	d12c      	bne.n	800507a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	2b01      	cmp	r3, #1
 8005026:	d125      	bne.n	8005074 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	617b      	str	r3, [r7, #20]
   return(result);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f043 0310 	orr.w	r3, r3, #16
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505e:	627a      	str	r2, [r7, #36]	; 0x24
 8005060:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6a39      	ldr	r1, [r7, #32]
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	61fb      	str	r3, [r7, #28]
   return(result);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e5      	bne.n	800503e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005072:	e002      	b.n	800507a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800507a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800507e:	e000      	b.n	8005082 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3730      	adds	r7, #48	; 0x30
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b0ba      	sub	sp, #232	; 0xe8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <HAL_UART_IRQHandler+0x66>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fb8a 	bl	8005804 <UART_Receive_IT>
      return;
 80050f0:	e25b      	b.n	80055aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80de 	beq.w	80052b8 <HAL_UART_IRQHandler+0x22c>
 80050fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80d1 	beq.w	80052b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_UART_IRQHandler+0xae>
 8005122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_UART_IRQHandler+0xd2>
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f043 0202 	orr.w	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
 800516a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	f043 0204 	orr.w	r2, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d011      	beq.n	80051b2 <HAL_UART_IRQHandler+0x126>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800519a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f043 0208 	orr.w	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 81f2 	beq.w	80055a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x14e>
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb15 	bl	8005804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <HAL_UART_IRQHandler+0x17a>
 80051fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d04f      	beq.n	80052a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa1f 	bl	800564a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d041      	beq.n	800529e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3314      	adds	r3, #20
 8005220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800524a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800525e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1d9      	bne.n	800521a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	4a7e      	ldr	r2, [pc, #504]	; (800546c <HAL_UART_IRQHandler+0x3e0>)
 8005274:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd fc5e 	bl	8002b3c <HAL_DMA_Abort_IT>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	e00e      	b.n	80052b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f98a 	bl	80055b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529c:	e00a      	b.n	80052b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f986 	bl	80055b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a4:	e006      	b.n	80052b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f982 	bl	80055b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80052b2:	e175      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	bf00      	nop
    return;
 80052b6:	e173      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 814f 	bne.w	8005560 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8148 	beq.w	8005560 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8141 	beq.w	8005560 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80b6 	beq.w	8005470 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8145 	beq.w	80055a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800531e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005322:	429a      	cmp	r2, r3
 8005324:	f080 813e 	bcs.w	80055a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800532e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b20      	cmp	r3, #32
 8005338:	f000 8088 	beq.w	800544c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005368:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800536c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005374:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1d9      	bne.n	800533c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3314      	adds	r3, #20
 80053a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e1      	bne.n	8005388 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3314      	adds	r3, #20
 80053ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800541a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800541c:	f023 0310 	bic.w	r3, r3, #16
 8005420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800542e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005430:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800543c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fb3d 	bl	8002ac6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545a:	b29b      	uxth	r3, r3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	b29b      	uxth	r3, r3
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8ad 	bl	80055c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005468:	e09c      	b.n	80055a4 <HAL_UART_IRQHandler+0x518>
 800546a:	bf00      	nop
 800546c:	0800570f 	.word	0x0800570f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005478:	b29b      	uxth	r3, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 808e 	beq.w	80055a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800548c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8089 	beq.w	80055a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054ba:	647a      	str	r2, [r7, #68]	; 0x44
 80054bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e3      	bne.n	8005496 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	623b      	str	r3, [r7, #32]
   return(result);
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054f2:	633a      	str	r2, [r7, #48]	; 0x30
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e3      	bne.n	80054ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60fb      	str	r3, [r7, #12]
   return(result);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005538:	61fa      	str	r2, [r7, #28]
 800553a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	69b9      	ldr	r1, [r7, #24]
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	617b      	str	r3, [r7, #20]
   return(result);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e3      	bne.n	8005514 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f832 	bl	80055c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800555e:	e023      	b.n	80055a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_UART_IRQHandler+0x4f4>
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f8dc 	bl	8005736 <UART_Transmit_IT>
    return;
 800557e:	e014      	b.n	80055aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <HAL_UART_IRQHandler+0x51e>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f91b 	bl	80057d4 <UART_EndTransmit_IT>
    return;
 800559e:	e004      	b.n	80055aa <HAL_UART_IRQHandler+0x51e>
    return;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <HAL_UART_IRQHandler+0x51e>
      return;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_UART_IRQHandler+0x51e>
      return;
 80055a8:	bf00      	nop
  }
}
 80055aa:	37e8      	adds	r7, #232	; 0xe8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2222      	movs	r2, #34	; 0x22
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0220 	orr.w	r2, r2, #32
 800563c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800564a:	b480      	push	{r7}
 800564c:	b095      	sub	sp, #84	; 0x54
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005672:	643a      	str	r2, [r7, #64]	; 0x40
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	61fb      	str	r3, [r7, #28]
   return(result);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	64bb      	str	r3, [r7, #72]	; 0x48
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d119      	bne.n	80056f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f023 0310 	bic.w	r3, r3, #16
 80056d8:	647b      	str	r3, [r7, #68]	; 0x44
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e2:	61ba      	str	r2, [r7, #24]
 80056e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6979      	ldr	r1, [r7, #20]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	613b      	str	r3, [r7, #16]
   return(result);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e5      	bne.n	80056c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005704:	bf00      	nop
 8005706:	3754      	adds	r7, #84	; 0x54
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff41 	bl	80055b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b21      	cmp	r3, #33	; 0x21
 8005748:	d13e      	bne.n	80057c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d114      	bne.n	800577e <UART_Transmit_IT+0x48>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d110      	bne.n	800577e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005770:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	1c9a      	adds	r2, r3, #2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]
 800577c:	e008      	b.n	8005790 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6211      	str	r1, [r2, #32]
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29b      	uxth	r3, r3
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4619      	mov	r1, r3
 800579e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10f      	bne.n	80057c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fb f949 	bl	8000a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b22      	cmp	r3, #34	; 0x22
 8005816:	f040 80ae 	bne.w	8005976 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d117      	bne.n	8005854 <UART_Receive_IT+0x50>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d113      	bne.n	8005854 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	b29a      	uxth	r2, r3
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
 8005852:	e026      	b.n	80058a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d007      	beq.n	8005878 <UART_Receive_IT+0x74>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <UART_Receive_IT+0x82>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e008      	b.n	8005898 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005892:	b2da      	uxtb	r2, r3
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4619      	mov	r1, r3
 80058b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d15d      	bne.n	8005972 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0220 	bic.w	r2, r2, #32
 80058c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d135      	bne.n	8005968 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	613b      	str	r3, [r7, #16]
   return(result);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f023 0310 	bic.w	r3, r3, #16
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005922:	623a      	str	r2, [r7, #32]
 8005924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	69f9      	ldr	r1, [r7, #28]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e5      	bne.n	8005902 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b10      	cmp	r3, #16
 8005942:	d10a      	bne.n	800595a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fe2e 	bl	80055c2 <HAL_UARTEx_RxEventCallback>
 8005966:	e002      	b.n	800596e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fa ffa3 	bl	80008b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	e002      	b.n	8005978 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e000      	b.n	8005978 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005976:	2302      	movs	r3, #2
  }
}
 8005978:	4618      	mov	r0, r3
 800597a:	3730      	adds	r7, #48	; 0x30
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059ba:	f023 030c 	bic.w	r3, r3, #12
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <UART_SetConfig+0x114>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d103      	bne.n	80059f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7fe f876 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	e002      	b.n	80059f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7fe f85e 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 80059f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009a      	lsls	r2, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <UART_SetConfig+0x118>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	0119      	lsls	r1, r3, #4
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009a      	lsls	r2, r3, #2
 8005a20:	441a      	add	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <UART_SetConfig+0x118>)
 8005a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	2064      	movs	r0, #100	; 0x64
 8005a36:	fb00 f303 	mul.w	r3, r0, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	3332      	adds	r3, #50	; 0x32
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <UART_SetConfig+0x118>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a4c:	4419      	add	r1, r3
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009a      	lsls	r2, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <UART_SetConfig+0x118>)
 8005a66:	fba3 0302 	umull	r0, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2064      	movs	r0, #100	; 0x64
 8005a6e:	fb00 f303 	mul.w	r3, r0, r3
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	3332      	adds	r3, #50	; 0x32
 8005a78:	4a07      	ldr	r2, [pc, #28]	; (8005a98 <UART_SetConfig+0x118>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	440a      	add	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40013800 	.word	0x40013800
 8005a98:	51eb851f 	.word	0x51eb851f

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	4d0c      	ldr	r5, [pc, #48]	; (8005ad4 <__libc_init_array+0x38>)
 8005aa2:	4c0d      	ldr	r4, [pc, #52]	; (8005ad8 <__libc_init_array+0x3c>)
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	f000 f822 	bl	8005af4 <_init>
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	4d0a      	ldr	r5, [pc, #40]	; (8005adc <__libc_init_array+0x40>)
 8005ab4:	4c0a      	ldr	r4, [pc, #40]	; (8005ae0 <__libc_init_array+0x44>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	08005d4c 	.word	0x08005d4c
 8005ad8:	08005d4c 	.word	0x08005d4c
 8005adc:	08005d4c 	.word	0x08005d4c
 8005ae0:	08005d50 	.word	0x08005d50

08005ae4 <memset>:
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4402      	add	r2, r0
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d100      	bne.n	8005aee <memset+0xa>
 8005aec:	4770      	bx	lr
 8005aee:	f803 1b01 	strb.w	r1, [r3], #1
 8005af2:	e7f9      	b.n	8005ae8 <memset+0x4>

08005af4 <_init>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr

08005b00 <_fini>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	bf00      	nop
 8005b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	469e      	mov	lr, r3
 8005b0a:	4770      	bx	lr
